import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;

// Initialiser le client Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

export const handler = async (event) => {
  console.log('üîÑ API Login : Requ√™te re√ßue', {
    method: event.httpMethod,
    path: event.path,
    headers: Object.keys(event.headers),
    host: event.headers.host
  });
  
  // Traiter uniquement les requ√™tes POST
  if (event.httpMethod !== 'POST') {
    console.log('‚ùå API Login : M√©thode non autoris√©e', event.httpMethod);
    return {
      statusCode: 405,
      body: JSON.stringify({ message: 'M√©thode non autoris√©e' })
    };
  }

  try {
    // R√©cup√©rer les donn√©es de connexion
    const body = JSON.parse(event.body || '{}');
    const { email, password, redirectTo = '/dashboard' } = body;
    
    console.log('üìù API Login : Donn√©es re√ßues', { 
      email: email ? email.substring(0, 3) + '...' : 'non d√©fini',
      hasPassword: !!password,
      redirectTo
    });
    
    // V√©rifier que les donn√©es sont pr√©sentes
    if (!email || !password) {
      console.log('‚ùå API Login : Donn√©es manquantes');
      return {
        statusCode: 400,
        body: JSON.stringify({ message: 'Email et mot de passe requis' })
      };
    }
    
    // Connexion avec Supabase
    console.log('üîÑ API Login : Tentative de connexion avec Supabase');
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    
    // G√©rer les erreurs de connexion
    if (error) {
      console.error('‚ùå API Login : Erreur connexion', error.message);
      return {
        statusCode: 401,
        body: JSON.stringify({ message: 'Identifiants incorrects' })
      };
    }
    
    console.log('‚úÖ API Login : Connexion r√©ussie pour', data.user.email);
    
    // Nous utilisons directement le redirectTo sans modification
    let finalRedirectUrl = redirectTo;
    console.log('üîÑ API Login : Redirection vers', finalRedirectUrl);
    
    // D√©finir les cookies pour l'authentification
    // Utiliser des jetons plus courts pour √©viter les probl√®mes de troncature
    const accessToken = data.session.access_token;
    const refreshToken = data.session.refresh_token;
    
    console.log('üç™ API Login : G√©n√©ration cookies et redirection');
    
    // Concat√©ner les cookies en une seule cha√Æne pour √©viter les probl√®mes avec Netlify
    const cookieString = [
      `sb-access-token=${accessToken}; Path=/; HttpOnly; SameSite=Lax; Max-Age=604800`,
      `sb-refresh-token=${refreshToken}; Path=/; HttpOnly; SameSite=Lax; Max-Age=604800`
    ].join(', ');
    
    return {
      statusCode: 302,
      headers: {
        'Location': finalRedirectUrl,
        'Set-Cookie': cookieString,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      },
      body: ''
    };
  } catch (error) {
    console.error('‚ùå API Login : Erreur g√©n√©rale', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ message: 'Erreur serveur' })
    };
  }
}; 