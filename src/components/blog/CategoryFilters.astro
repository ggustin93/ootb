---
import { Icon } from 'astro-icon/components';
import { CONTENT_TYPES } from '~/config/content-types';

interface Props {
  currentCategory?: string;
  blogConfig: {
    hero: {
      filters: {
        categoryFilters: {
          allLabel: string;
          mobileSelectLabel: string;
        }
      }
    }
  }
  isTagPage?: boolean;
}

const { currentCategory, blogConfig, isTagPage = false } = Astro.props;
const { allLabel, mobileSelectLabel } = blogConfig.hero.filters.categoryFilters;

// Vérification de sécurité pour l'accès aux propriétés dynamiques
const getCurrentCategoryLabel = (category: string | undefined): string => {
  if (!category || category === 'blog') return allLabel;
  return category in CONTENT_TYPES 
    ? (CONTENT_TYPES as Record<string, {label: string}>)[category]?.label
    : mobileSelectLabel;
};

// Générer des IDs uniques si nous sommes sur la page des tags
const buttonId = isTagPage ? "tag-category-button" : "category-button";
const dropdownId = isTagPage ? "tag-category-dropdown" : "category-dropdown";
const overlayId = isTagPage ? "tag-dropdown-overlay" : "dropdown-overlay";
const dropdownIconId = isTagPage ? "tag-dropdown-icon" : "dropdown-icon";
const selectedCategoryId = isTagPage ? "tag-selected-category" : "selected-category";
const selectedIconId = isTagPage ? "tag-selected-icon" : "selected-icon";
---

<div class="flex flex-col w-full sm:w-auto">
  {/* Version Desktop */}
  <div class="hidden sm:flex gap-1 bg-gray-100/80 p-1 rounded-lg">
    <a
      href="/blog#blog-content"
      class={[
        'flex items-center gap-2 px-3 py-1.5 rounded text-sm',
        (!currentCategory || currentCategory === 'blog') 
          ? 'bg-white text-gray-900 shadow-sm' 
          : 'text-gray-600 hover:text-gray-900'
      ].join(' ')}
    >
      <Icon name="tabler:layout-grid" class="w-4 h-4" />
      <span class="text-sm">{allLabel}</span>
    </a>

    {Object.entries(CONTENT_TYPES).filter(([key]) => key !== 'all').map(([key, config]) => (
      <a
        href={`/category/${key}#category-content`}
        class={[
          'flex items-center gap-2 px-3 py-1.5 rounded text-sm',
          key.toLowerCase() === currentCategory?.toLowerCase() 
            ? [
                'bg-white shadow-sm',
                `text-[${config.color}]`
              ].join(' ')
            : 'text-gray-600 hover:text-gray-900'
        ].join(' ')}
      >
        <Icon name={config.icon} class="w-4 h-4" />
        <span class="text-sm">{config.shortLabel}</span>
      </a>
    ))}
  </div>

  {/* Version Mobile - Menu personnalisé */}
  <div class="sm:hidden relative">
    {/* Si nous sommes sur une page de tag, afficher un texte différent */}
    {isTagPage ? (
      <button
        id={buttonId}
        type="button"
        aria-haspopup="listbox"
        aria-expanded="false"
        aria-labelledby="category-label"
        class="flex items-center justify-between w-full bg-gray-100/80 rounded-lg px-4 py-2.5 text-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-300 transition-all duration-300"
      >
        <span class="flex items-center gap-2">
          <Icon id={selectedIconId} name="tabler:layout-grid" class="w-4 h-4" />
          <span id={selectedCategoryId} class="text-sm font-medium">
Rechercher par catégorie          </span>
        </span>
        <Icon 
          id={dropdownIconId}
          name="tabler:chevron-down" 
          class="w-5 h-5 text-gray-500 transition-transform duration-300" 
        />
      </button>
    ) : (
      <button
        id={buttonId}
        type="button"
        aria-haspopup="listbox"
        aria-expanded="false"
        aria-labelledby="category-label"
        class="flex items-center justify-between w-full bg-gray-100/80 rounded-lg px-4 py-2.5 text-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-300 transition-all duration-300"
      >
        <span class="flex items-center gap-2">
          <Icon id={selectedIconId} name="tabler:layout-grid" class="w-4 h-4" />
          <span id={selectedCategoryId} class="text-sm font-medium">
            {getCurrentCategoryLabel(currentCategory)}
          </span>
        </span>
        <Icon 
          id={dropdownIconId}
          name="tabler:chevron-down" 
          class="w-5 h-5 text-gray-500 transition-transform duration-300" 
        />
      </button>
    )}
    
    <div 
      id={dropdownId} 
      role="listbox"
      aria-labelledby="category-label"
      class="absolute z-20 mt-1 w-full bg-white rounded-lg shadow-lg transform scale-y-0 origin-top opacity-0 transition-all duration-300 ease-in-out max-h-64 overflow-y-auto"
    >
      <a
        href="/blog#category-content"
        role="option"
        aria-selected={!currentCategory || currentCategory === 'blog'}
        class={[
          'flex items-center gap-2 px-4 py-3 hover:bg-gray-50 transition-colors',
          (!currentCategory || currentCategory === 'blog') 
            ? 'bg-gray-50 text-gray-900 font-medium' 
            : 'text-gray-600'
        ].join(' ')}
        data-value="blog"
        data-icon="tabler:layout-grid"
        tabindex="0"
      >
        <Icon name="tabler:layout-grid" class="w-4 h-4" />
        <span class="text-sm">{allLabel}</span>
      </a>

      {Object.entries(CONTENT_TYPES).filter(([key]) => key !== 'all').map(([key, config]) => (
        <a
          href={`/category/${key}#category-content`}
          role="option"
          aria-selected={key.toLowerCase() === currentCategory?.toLowerCase()}
          class={[
            'flex items-center gap-2 px-4 py-3 hover:bg-gray-50 transition-colors',
            key.toLowerCase() === currentCategory?.toLowerCase() 
              ? 'bg-gray-50 font-medium' 
              : 'text-gray-600'
          ].join(' ')}
          data-value={key}
          data-icon={config.icon}
          data-color={config.color}
          tabindex="0"
          style={key.toLowerCase() === currentCategory?.toLowerCase() ? `color: ${config.color};` : ''}
        >
          <Icon name={config.icon} class="w-4 h-4" />
          <span class="text-sm">{config.label}</span>
        </a>
      ))}
    </div>
    
    {/* Overlay pour fermer le menu en cliquant ailleurs */}
    <div id={overlayId} class="fixed inset-0 z-10 bg-black/10 hidden backdrop-blur-sm"></div>
  </div>
</div>

<script>
  // Script simplifié directement injecté sur la page, sans variables define:vars
  document.addEventListener('astro:page-load', () => {
    // Fonction pour les pages de catégories
    initCategoryDropdown('category-button', 'category-dropdown', 'dropdown-overlay', 'dropdown-icon');
    
    // Fonction pour les pages de tags 
    initCategoryDropdown('tag-category-button', 'tag-category-dropdown', 'tag-dropdown-overlay', 'tag-dropdown-icon');
    
    function initCategoryDropdown(buttonId: string, dropdownId: string, overlayId: string, iconId: string) {
      const button = document.getElementById(buttonId);
      const dropdown = document.getElementById(dropdownId);
      const overlay = document.getElementById(overlayId);
      const icon = document.getElementById(iconId);
      
      console.log(`Initialisation: ${buttonId} existe:`, !!button);
      console.log(`Initialisation: ${dropdownId} existe:`, !!dropdown);
      
      if (!button || !dropdown) return;
      
      // Forcer une attente pour s'assurer que tout est bien chargé
      setTimeout(() => {
        // Ajouter un clic global qui fonctionnera même si les autres événements ne fonctionnent pas
        document.body.addEventListener('click', (e) => {
          if (!e.target || !button || !dropdown) return;
          
          const target = e.target as Node;
          
          // Si on clique sur le bouton ou un de ses enfants
          if (button.contains(target)) {
            console.log("Clic détecté sur le bouton", buttonId);
            
            const isOpen = dropdown.classList.contains('scale-y-100');
            if (isOpen) {
              dropdown.classList.remove('scale-y-100', 'opacity-100');
              dropdown.classList.add('scale-y-0', 'opacity-0');
              overlay?.classList.add('hidden');
              button.setAttribute('aria-expanded', 'false');
              icon?.classList.remove('rotate-180');
            } else {
              dropdown.classList.remove('scale-y-0', 'opacity-0');
              dropdown.classList.add('scale-y-100', 'opacity-100');
              overlay?.classList.remove('hidden');
              button.setAttribute('aria-expanded', 'true');
              icon?.classList.add('rotate-180');
            }
            e.stopPropagation();
          } 
          // Si on clique ailleurs et que le menu est ouvert
          else if (!dropdown.contains(target) && dropdown.classList.contains('scale-y-100')) {
            dropdown.classList.remove('scale-y-100', 'opacity-100');
            dropdown.classList.add('scale-y-0', 'opacity-0');
            overlay?.classList.add('hidden');
            button.setAttribute('aria-expanded', 'false');
            icon?.classList.remove('rotate-180');
          }
        });
      }, 500); // Attendre 500ms pour s'assurer que tout est chargé
    }
  });
  
  // Exécuter également au chargement initial
  document.addEventListener('DOMContentLoaded', () => {
    const event = new Event('astro:page-load');
    document.dispatchEvent(event);
  });
</script> 