---
import type { Post } from '~/types';
import Card from '~/components/ui/Card.astro';
import { getFormattedDate } from '~/utils/utils';
import { CONTENT_TYPES } from '~/config/content-types';

export interface Props {
  posts?: Array<Post>;
}

const { posts = [] } = Astro.props;

// Type mapping pour assurer la compatibilité avec Card
type CardType = 'default' | 'podcast' | 'tv' | 'premium';
const typeMapping: Record<string, CardType> = {
  actualite: 'default',
  fiche: 'default',
  live: 'default',
  podcast: 'podcast',
  tv: 'tv',
  premium: 'premium'
};

// Limiter à 9 articles par page pour le format 3x3
const displayedPosts = posts.slice(0, 9);
---

<div class="max-w-6xl mx-auto">
  {posts && posts.length > 0 ? (
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {displayedPosts.map((post) => {
        const publishDate = post.publishDate instanceof Date 
          ? post.publishDate 
          : new Date(post.publishDate);
          
        return (
          <Card
            title={post.title}
            description={post.description}
            image={post.image}
            category={{
              title: CONTENT_TYPES[post.category?.slug as keyof typeof CONTENT_TYPES]?.shortLabel || post.category?.title || '',
              slug: post.category?.slug || 'actualite'
            }}
            tags={[]}
            href={post.slug}
            type={typeMapping[post.category?.slug || 'actualite']}
            meta={{
              publishDate: getFormattedDate(publishDate),
              expert: post.expert,
              duration: post.duration
            }}
          />
        );
      })}
    </div>
  ) : (
    <div class="text-center py-8">
      <p class="text-gray-600 dark:text-gray-400">Aucun article trouvé</p>
    </div>
  )}
</div>

<style>
  /* Animation d'apparition progressive des cards */
  .grid > :global(*) {
    animation: fadeIn 0.6s ease-out forwards;
    opacity: 0;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Décalage de l'animation pour chaque ligne */
  .grid > :global(*:nth-child(1)),
  .grid > :global(*:nth-child(2)),
  .grid > :global(*:nth-child(3)) {
    animation-delay: 0.1s;
  }
  .grid > :global(*:nth-child(4)),
  .grid > :global(*:nth-child(5)),
  .grid > :global(*:nth-child(6)) {
    animation-delay: 0.3s;
  }
  .grid > :global(*:nth-child(7)),
  .grid > :global(*:nth-child(8)),
  .grid > :global(*:nth-child(9)) {
    animation-delay: 0.5s;
  }
</style>