---
import type { Post } from '~/types';
import type { ImageMetadata } from 'astro';
import { CONTENT_TYPES } from '~/config/content-types';
import { getBlogPermalink } from '~/utils/permalinks';
import { DEFAULT_IMAGES } from '~/config/images';
import Button from '~/components/ui/Button.astro';

// Import des composants média
import PodcastPlayer from './media/PodcastPlayer.astro';
import VideoPlayer from './media/VideoPlayer.astro';
import FeaturedImage from './media/FeaturedImage.astro';
import PedagogicalSheet from './components/PedagogicalSheet.astro';

// Import des composants de structure
import PostHeader from './components/PostHeader.astro';
import PostDescription from './components/PostDescription.astro';
import PostFooter from './components/PostFooter.astro';

// Types
interface Props {
  post: Post & {
    showId?: string;
    podcastId?: string;
    image: ImageMetadata | string;
    tvcomUrl?: string;
    pedagogicalSheet?: {
      enseignement: string;
      section: string;
      responsable: {
        prenom: string;
        nom: string;
        email: string;
      };
      description?: string;
      objectifs: string[];
      competences: string[];
      declinaisons?: string;
      conseils?: string;
      references?: Array<{
        type: 'site' | 'video' | 'document';
        url?: string;
        description?: string;
      }>;
    };
  };
  url: string | URL;
}

// Configuration initiale
const { post, url } = Astro.props;
const blogLink = typeof getBlogPermalink === 'function' ? getBlogPermalink() : '/blog';

// Configuration du type de contenu
const contentType = typeof post.category === 'string' ? post.category : (post.category?.slug || 'actualite');
const contentConfig = CONTENT_TYPES[contentType as keyof typeof CONTENT_TYPES];

// Debug - Post Category
console.log('Debug - Post Category:', {
  rawCategory: post.category,
  contentType,
  contentConfig,
  postData: {
    tvcomUrl: post.tvcomUrl,
    category: post.category,
    title: post.title
  }
});

// États du contenu
const contentStates = {
  isLiveFacebook: contentType === 'live',
  isPodcast: contentType === 'podcast',
  isVideo: contentType === 'tv',
  isTvContent: contentType === 'tv',
  isPedagogicalSheet: contentType === 'fiche',
  hasExpertInfo: Boolean(post.expert),
  hasDuration: Boolean(post.duration),
  hasSubtitle: Boolean(post.subtitle),
  hasTags: Boolean(post.tags?.length),
  hasPedagogicalInfo: Boolean(post.pedagogicalSheet)
};

// Extraire l'ID YouTube pour les lives Facebook
const getYouTubeThumbnail = (url: string | undefined) => {
  if (!url) return undefined;
  
  // Extraire l'ID YouTube de l'URL
  const regExp = /^.*((youtu.be\/)|(v\/)|(\/?v=)|(\/embed\/)|(watch\?))([\w\-]+)/;
  const match = url.match(regExp);
  if (!match || !match[7]) return undefined;
  
  // Retourner l'URL de la miniature HD
  return `https://img.youtube.com/vi/${match[7]}/maxresdefault.jpg`;
};

// Gérer l'image à afficher
const displayImage = post.image || (contentStates.isLiveFacebook && post.videoUrl ? getYouTubeThumbnail(post.videoUrl) : undefined);

// Styles conditionnels
const styles = {
  contentColor: contentConfig.color,
  heading: {
    base: "text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading",
    color: contentStates.isLiveFacebook 
      ? "text-[#1877F2]" 
      : contentStates.isPodcast 
        ? "text-[var(--ootb-violet)]" 
        : contentType === 'tv'
          ? "text-[var(--content-tv)]"
          : `text-[${contentConfig.color}]`
  },
  prose: {
    base: "prose prose-lg lg:prose-xl dark:prose-invert max-w-none",
    headings: [
      "prose-h2:font-body prose-h3:font-handwritten",
      "prose-h2:text-[color:var(--content-color)]",
      "prose-h3:text-gray-600 dark:prose-h3:text-gray-400"
    ].join(" ")
  }
};

// Classes pour le wrapper média
const mediaWrapperClasses = [
  "rounded-lg overflow-hidden shadow-lg relative aspect-video mb-8",
  contentStates.isLiveFacebook && "ring-4 ring-[#1877F2]/20",
  contentStates.isPodcast && "ring-4 ring-[var(--ootb-violet)]/20",
  contentType === 'tv' && "ring-4 ring-[var(--ootb-green)]/20"
];

// Debug info
console.log('Debug TV content:', {
  tvcomUrl: post.tvcomUrl,
  isVideo: contentStates.isVideo,
  category: post.category,
  contentType: contentType
});
---

<section class="py-4 sm:py-8 mx-auto max-w-6xl px-4 sm:px-6">
  <article class="pb-16 md:pb-24">
    <div class="pt-8 sm:pt-12 lg:pt-16">
      {/* En-tête avec métadonnées */}
      <PostHeader
        title={post.title}
        subtitle={post.subtitle}
        publishDate={post.publishDate}
        expert={post.expert}
        duration={post.duration}
        tags={post.tags}
        contentConfig={contentConfig}
        styles={styles}
        contentStates={contentStates}
      />

      {/* Contenu principal */}
      <main class="max-w-4xl mx-auto space-y-8">
        {/* Description (sauf pour les fiches pédagogiques) */}
        {post.description && !contentStates.isPedagogicalSheet && (
          <PostDescription
            description={post.description}
            contentStates={contentStates}
          />
        )}

        {/* Fiche pédagogique */}
        {contentStates.isPedagogicalSheet && post.pedagogicalSheet && (
          <PedagogicalSheet sheet={post.pedagogicalSheet} />
        )}

        {/* Média */}
        {(contentStates.isPodcast && post.podcastUrl) && (
          <PodcastPlayer 
            podcastUrl={post.podcastUrl}
          />
        )}

        {/* Média avec bouton superposé pour TV */}
        {(displayImage && !contentStates.isPodcast) && (
          <div class:list={[...mediaWrapperClasses, "group"]}>
            <FeaturedImage 
              image={displayImage}
              title={post.title}
            />
            {/* Overlay sombre et bouton TV Com */}
            {contentType === 'tv' && post.tvcomUrl && (
              <div class="absolute inset-0 flex items-center justify-center bg-black/30 group-hover:bg-black/40 transition-all duration-300">
                <Button
                  variant="outline-tv"
                  href={post.tvcomUrl}
                  icon="tabler:device-tv"
                  size="lg"
                  target="_blank"
                  rel="noopener noreferrer"
                  class="group/btn hover:scale-105 transition-transform duration-300"
                >
                  Voir l'émission sur TV Com
                </Button>
              </div>
            )}
          </div>
        )}

        {/* Video Player for TV content */}
        {(contentStates.isTvContent && post.videoUrl) && (
          <div class:list={[...mediaWrapperClasses, "mb-0 p-0"]}>
            <VideoPlayer 
              videoUrl={post.videoUrl}
              title={post.title}
            />
          </div>
        )}



        {/* Contenu de l'article */}
        <div class:list={[styles.prose.base, styles.prose.headings, styles.prose.facebook]}>
          {post.Content ? <post.Content /> : <slot />}
        </div>
      </main>

      {/* Pied de page */}
      <PostFooter
        tags={post.tags}
        url={url}
        title={post.title}
        blogLink={blogLink}
        contentStates={contentStates}
        contentConfig={contentConfig}
      />
    </div>
  </article>
</section>

<style>  
  .aspect-video {
    aspect-ratio: 16/9;
  }
</style>