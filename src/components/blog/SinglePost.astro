---
import type { Post } from '~/types';
import type { ImageMetadata } from 'astro';
import { CONTENT_TYPES } from '~/config/content-types';
import { getBlogPermalink } from '~/utils/permalinks';

// Import des composants média
import PodcastPlayer from './media/PodcastPlayer.astro';
import VideoPlayer from './media/VideoPlayer.astro';
import FeaturedImage from './media/FeaturedImage.astro';

// Import des composants de structure
import PostHeader from './components/PostHeader.astro';
import PostDescription from './components/PostDescription.astro';
import PostFooter from './components/PostFooter.astro';

// Types
interface Props {
  post: Post & {
    showId?: string;
    podcastId?: string;
    image: ImageMetadata | string;
  };
  url: string | URL;
}

// Configuration initiale
const { post, url } = Astro.props;
const blogLink = typeof getBlogPermalink === 'function' ? getBlogPermalink() : '/blog';

// Configuration du type de contenu
const contentType = (post.category?.slug?.toLowerCase() || 'actualite') as keyof typeof CONTENT_TYPES;
const contentConfig = CONTENT_TYPES[contentType];

// États du contenu
const contentStates = {
  isLiveFacebook: contentType === 'live',
  isPodcast: contentType === 'podcast',
  isVideo: contentType === 'tv' || Boolean(post.videoUrl),
  hasExpertInfo: Boolean(post.expert),
  hasDuration: Boolean(post.duration),
  hasSubtitle: Boolean(post.subtitle),
  hasTags: Boolean(post.tags?.length)
};

// Styles conditionnels
const styles = {
  contentColor: contentConfig.color,
  heading: {
    base: "text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading",
    color: contentStates.isLiveFacebook 
      ? "text-[#1877F2]" 
      : contentStates.isPodcast 
        ? "text-[var(--ootb-violet)]" 
        : `text-[${contentConfig.color}]`
  },
  prose: {
    base: "prose prose-lg lg:prose-xl dark:prose-invert max-w-none",
    headings: [
      "prose-h2:font-body prose-h3:font-handwritten",
      "prose-h2:text-[color:var(--content-color)]",
      "prose-h3:text-gray-600 dark:prose-h3:text-gray-400"
    ].join(" ")
  }
};

// Classes pour le wrapper média
const mediaWrapperClasses = [
  "mb-8 rounded-lg overflow-hidden shadow-lg",
  contentStates.isLiveFacebook && "ring-4 ring-[#1877F2]/20",
  contentStates.isPodcast && "ring-4 ring-[var(--ootb-violet)]/20"
];
---

<section class="py-4 sm:py-8 mx-auto px-4">
  <article class="pb-16 md:pb-24">
    <div class="pt-8 sm:pt-12 lg:pt-16">
      {/* En-tête avec métadonnées */}
      <PostHeader
        title={post.title}
        subtitle={post.subtitle}
        publishDate={post.publishDate}
        expert={post.expert}
        duration={post.duration}
        tags={post.tags}
        contentConfig={contentConfig}
        styles={styles}
        contentStates={contentStates}
      />

      {/* Contenu principal */}
      <main class="max-w-4xl mx-auto space-y-8">
        {/* Description */}
        {post.description && (
          <PostDescription
            description={post.description}
            contentStates={contentStates}
          />
        )}

        {/* Média */}
        {(contentStates.isPodcast && post.podcastUrl) && (
          <PodcastPlayer 
            podcastUrl={post.podcastUrl}
          />
        )}

        {(contentStates.isVideo && post.videoUrl) && (
          <div class:list={mediaWrapperClasses}>
            <VideoPlayer 
              videoUrl={post.videoUrl}
              title={post.title}
            />
          </div>
        )}

        {(post.image && !contentStates.isLiveFacebook && !contentStates.isPodcast) && (
          <div class:list={mediaWrapperClasses}>
            <FeaturedImage 
              image={post.image}
              title={post.title}
            />
          </div>
        )}

        {/* Contenu de l'article */}
        <div class:list={[styles.prose.base, styles.prose.headings, styles.prose.facebook]}>
          <slot />
        </div>
      </main>

      {/* Pied de page */}
      <PostFooter
        tags={post.tags}
        url={url}
        title={post.title}
        blogLink={blogLink}
        contentStates={contentStates}
        contentConfig={contentConfig}
      />
    </div>
  </article>
</section>

<style>  
  .aspect-video {
    aspect-ratio: 16/9;
  }
</style>