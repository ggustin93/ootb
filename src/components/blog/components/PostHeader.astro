---
import { Icon } from 'astro-icon/components';
import { getFormattedDate } from '~/utils/utils';
import ActionBadge from '~/components/ui/ActionBadge.astro';

interface Props {
  title: string;
  subtitle?: string;
  publishDate: Date;
  expert?: string;
  duration?: string;
  tags?: Array<{ title: string; slug: string; }>;
  contentConfig: {
    icon: string;
    label: string;
    variant: 'festival' | 'podcast' | 'emission' | 'appel' | 'live' | 'actualite' | 'fiche';
  };
  contentStates: {
    hasExpertInfo: boolean;
    hasDuration: boolean;
    hasSubtitle: boolean;
    hasTags: boolean;
    isLiveFacebook?: boolean;
    isPodcast?: boolean;
  };
}

const { title, subtitle, publishDate, expert, duration, tags, contentConfig, contentStates } = Astro.props;
---

<header class="max-w-4xl mx-auto mb-8">
  <div class="flex flex-col gap-4 mb-6">
    {/* Badge et métadonnées (incluant les tags maintenant) */}
    <div class="flex flex-col sm:flex-row sm:items-center gap-4">
      <ActionBadge 
        variant={contentConfig.variant} 
        class="flex items-center gap-2 w-fit"
      >
        <Icon name={contentConfig.icon} class="w-5 h-5" />
        {contentConfig.label}
      </ActionBadge>

      <div class="flex flex-wrap items-center gap-3 text-gray-500 text-sm">
        <time datetime={String(publishDate)} class="inline-flex items-center gap-1.5 hover:text-gray-700 transition-colors">
          <Icon name="tabler:calendar" class="w-4 h-4" />
          {getFormattedDate(publishDate)}
        </time>

        {contentStates.hasExpertInfo && (
          <div class="flex items-center gap-1.5 hover:text-gray-700 transition-colors">
            <Icon name="tabler:user" class="w-4 h-4" />
            <span>{expert}</span>
          </div>
        )}

        {contentStates.hasDuration && (
          <div class="flex items-center gap-1.5 hover:text-gray-700 transition-colors">
            <Icon name="tabler:clock" class="w-4 h-4" />
            <span>{duration}</span>
          </div>
        )}
        
        {/* Tags maintenant intégrés dans les métadonnées */}
        {contentStates.hasTags && tags && tags.length > 0 && (
          <>
            {tags.slice(0, 3).map((tag) => (
              <a 
                href={`/tag/${tag.slug}`}
                class:list={[
                  "inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs",
                  "bg-gray-100 text-gray-600 hover:bg-gray-200",
                  "dark:bg-gray-800/50 dark:text-gray-400 dark:hover:bg-gray-800",
                  "transition-colors duration-300"
                ]}
              >
                <Icon name="tabler:tag" class="w-3 h-3" />
                {tag.title}
              </a>
            ))}
          </>
        )}
      </div>
    </div>
  </div>

  {/* Titre et sous-titre */}
  <h1 class:list={[
    "text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading",
    contentStates.isLiveFacebook 
      ? "text-[#1877F2]" 
      : contentStates.isPodcast
        ? "text-[var(--ootb-violet)]"
        : contentConfig.variant === 'appel'
          ? "text-[var(--content-fiche)]"
          : contentConfig.variant === 'fiche'
            ? "text-[var(--content-fiche)]"
            : "text-current"
  ]}>
    {title}
  </h1>

  {contentStates.hasSubtitle && subtitle && (
    <h3 class="font-handwritten text-2xl text-gray-600 dark:text-slate-400 leading-relaxed">{subtitle}</h3>
  )}
</header>
