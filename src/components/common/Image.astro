---
import type { HTMLAttributes } from 'astro/types';
import { findImage } from '~/utils/images';
import {
  getImagesOptimized,
  astroAsseetsOptimizer,
  unpicOptimizer,
  isUnpicCompatible,
  type ImageProps,
} from '~/utils/images-optimization';

type Props = ImageProps;
type ImageType = {
  src: string;
  attributes: HTMLAttributes<'img'>;
};

interface UnsplashOptions {
  quality?: number;
  fit?: 'crop' | 'clamp' | 'clip' | 'scale';
  format?: 'auto' | 'webp' | 'jpg';
  dpr?: 1 | 2 | 3;
}

interface CloudinaryOptions {
  quality?: number | 'auto';
  format?: 'auto' | 'webp' | 'jpg' | 'avif';
  crop?: 'fill' | 'scale' | 'fit' | 'limit';
  fetch_format?: 'auto';
  dpr?: 'auto' | 1 | 2 | 3;
  gravity?: 'auto' | 'center' | 'faces'; // Pour le focus intelligent
}

const defaultUnsplashOptions: UnsplashOptions = {
  quality: 80,
  fit: 'crop',
  format: 'auto',
  dpr: 1
};

const defaultCloudinaryOptions: CloudinaryOptions = {
  quality: 'auto:good', // Bon équilibre par défaut
  format: 'webp',       // WebP par défaut
  crop: 'fill',
  fetch_format: 'auto',
  dpr: 'auto',
  gravity: 'auto'
};

const props = Astro.props;

// Validation des props
if (props.alt === undefined || props.alt === null) {
  throw new Error('Alt attribute is required for accessibility');
}

if (typeof props.width === 'string') {
  props.width = parseInt(props.width);
}

if (typeof props.height === 'string') {
  props.height = parseInt(props.height);
}

if (!props.loading) {
  props.loading = 'lazy';
}

if (!props.decoding) {
  props.decoding = 'async';
}

const _image = await findImage(props.src);

let image: ImageType | undefined = undefined;

// Fonction utilitaire pour générer les transformations Cloudinary
function generateCloudinaryUrl(
  baseUrl: string,
  width: number,
  options: CloudinaryOptions,
  aspectRatio?: string | number,
  isSrcSet = false
): string {
  const url = new URL(baseUrl);
  const pathParts = url.pathname.split('/');
  const cloudName = pathParts[1];
  const publicId = pathParts.slice(4).join('/').replace(/\.[^/.]+$/, '');

  // Limiter la largeur maximale à 1200px pour réduire les transformations
  const limitedWidth = Math.min(width, 1200);
  
  // Préparer les transformations de base
  const transformations = [
    `w_${limitedWidth}`,
    `c_${options.crop}`,
    `q_${options.quality}`,
    `f_${options.format}`,
    `dpr_${options.dpr}`,
    `g_${options.gravity}`,
  ];
  
  // Ajouter l'aspect ratio s'il est spécifié
  if (aspectRatio) {
    // Convertir en format Cloudinary (16:9 -> 16:9, 1.78 -> 1.78:1)
    const arParam = typeof aspectRatio === 'string' && aspectRatio.includes(':')
      ? aspectRatio.replace(':', ':')
      : `${aspectRatio}:1`;
    
    transformations.push(`ar_${arParam}`);
  }

  return `https://res.cloudinary.com/${cloudName}/image/upload/${transformations.join(',')}/${publicId}`;
}

// Fonction pour générer le srcset pour Cloudinary
function generateCloudinarySrcSet(
  baseUrl: string,
  baseWidth: number,
  options: CloudinaryOptions
): string {
  // Tailles optimisées plus réalistes pour le web
  const widths = [400, 800, 1200]; // Réduire à 3 tailles raisonnables
  return widths
    .filter(w => w <= baseWidth) // Ne pas dépasser la largeur de base
    .map(w => {
      const url = generateCloudinaryUrl(baseUrl, w, options, true);
      return `${url} ${w}w`;
    })
    .join(', ');
}

// Fonction pour générer les sizes par défaut
function generateDefaultSizes(baseWidth: number): string {
  return `(max-width: 320px) 300px,
          (max-width: 640px) 580px,
          (max-width: 960px) 920px,
          (max-width: 1280px) 1200px,
          ${baseWidth}px`;
}

if (typeof _image === 'string') {
  // Forcer le traitement Cloudinary pour les URLs Cloudinary
  if (_image.includes('cloudinary.com')) {
    console.log("Forçage du traitement Cloudinary personnalisé pour:", _image);
    const options: CloudinaryOptions = {
      ...defaultCloudinaryOptions,
      ...(props.cloudinaryOptions || {}),
    };
    
    const baseWidth = props.width || 960; // Largeur par défaut raisonnable
    
    // Calculer la hauteur en fonction de l'aspectRatio s'il est spécifié
    let baseHeight: number;
    
    if (props.aspectRatio) {
      // Traiter le format "16:9" ou "1.78"
      if (typeof props.aspectRatio === 'string' && props.aspectRatio.includes(':')) {
        const [width, height] = props.aspectRatio.split(':').map(Number);
        baseHeight = Math.round(baseWidth / (width / height));
      } else {
        // Si c'est un nombre ou une chaîne sans ":", le traiter comme un ratio direct
        const ratio = typeof props.aspectRatio === 'string' 
          ? parseFloat(props.aspectRatio) 
          : props.aspectRatio as number;
        baseHeight = Math.round(baseWidth / ratio);
      }
    } else {
      // Fallback sur le ratio 16:9 par défaut
      baseHeight = props.height || Math.round(baseWidth * 0.5625);
    }
    
    // Maintenant, ajoutons le calcul d'aspect dans les transformations Cloudinary
    const aspectTransformation = props.aspectRatio ? `ar_${props.aspectRatio.toString().replace(':', ':')}` : '';
    
    // Modifions la fonction generateCloudinaryUrl pour inclure l'aspect ratio
    const generateCustomCloudinaryUrl = (url: string, width: number) => {
      const parsedUrl = new URL(url);
      const pathParts = parsedUrl.pathname.split('/');
      const cloudName = pathParts[1];
      const publicId = pathParts.slice(4).join('/').replace(/\.[^/.]+$/, '');
    
      // Limiter la largeur maximale
      const limitedWidth = Math.min(width, 1200);
      
      // Construire les transformations avec l'aspect ratio
      let transformations = [
        `w_${limitedWidth}`,
        `c_${options.crop}`,
        `q_${options.quality}`,
        `f_${options.format}`,
        `dpr_${options.dpr}`,
        `g_${options.gravity}`,
      ];
      
      // Ajouter l'aspect ratio s'il est défini
      if (aspectTransformation) {
        transformations.push(aspectTransformation);
      }
      
      return `https://res.cloudinary.com/${cloudName}/image/upload/${transformations.join(',')}/${publicId}`;
    };
    
    // Utiliser cette nouvelle fonction pour générer l'URL et le srcset
    const src = generateCustomCloudinaryUrl(_image, baseWidth);
    const srcset = [400, 800, 1200]
      .filter(w => w <= baseWidth)
      .map(w => `${generateCustomCloudinaryUrl(_image, w)} ${w}w`)
      .join(', ');
    
    image = {
      src,
      attributes: {
        ...props,
        loading: props.loading,
        decoding: props.decoding,
        alt: props.alt,
        width: baseWidth,
        height: baseHeight,
        sizes: props.sizes || generateDefaultSizes(baseWidth),
        srcset: srcset,
      },
    };
  }
  // Sinon utiliser Unpic pour les autres images compatibles
  else if (isUnpicCompatible(_image)) {
    console.log("Utilisation d'Unpic pour transformer l'image:", _image);
    try {
      image = await getImagesOptimized(_image, props, unpicOptimizer);
    } catch (error) {
      console.error("Erreur avec Unpic:", error);
      // Fallback en cas d'erreur Unpic
    }
  }
  // Gestion des images Unsplash
  else if (_image.includes('unsplash.com')) {
    const photoIdMatch = _image.match(/unsplash\.com\/(photos|a)\/([a-zA-Z0-9-_]+)/)?.[2] || 
                        _image.match(/images\.unsplash\.com\/photo-([a-zA-Z0-9-_]+)/)?.[1];
                        
    if (photoIdMatch) {
      if (props.width && props.height) {
        image = {
          src: `https://images.unsplash.com/photo-${photoIdMatch}?w=${props.width}&h=${props.height}&fit=crop&auto=format`,
          attributes: {
            ...props,
            loading: props.loading,
            decoding: props.decoding,
            alt: props.alt,
            width: props.width,
            height: props.height,
          },
        };
      } else {
        const options: UnsplashOptions = {
          ...defaultUnsplashOptions,
          ...(props.unsplashOptions || {}),
        };
        
        const params = new URLSearchParams({
          w: (props.width || 960).toString(),
          q: options.quality.toString(),
          fit: options.fit,
          auto: 'format,compress',
        });

        const optimizedSrc = `https://images.unsplash.com/photo-${photoIdMatch}?${params}`;
        
        image = {
          src: optimizedSrc,
          attributes: {
            ...props,
            loading: props.loading,
            decoding: props.decoding,
            alt: props.alt,
            sizes: props.sizes || generateDefaultSizes(props.width || 960),
            srcset: generateSrcSet(photoIdMatch, props.width || 960, options),
          },
        };
      }
    }
  }
  // Gestion des autres URLs externes
  else if (_image.startsWith('http://') || _image.startsWith('https://')) {
    image = {
      src: _image,
      attributes: {
        ...props,
        loading: props.loading,
        decoding: props.decoding,
        alt: props.alt,
        width: props.width,
        height: props.height,
        sizes: props.sizes,
      },
    };
  }
} else if (_image) {
  image = await getImagesOptimized(_image, props, astroAsseetsOptimizer);
}

function generateSrcSet(id: string, baseWidth: number, options: UnsplashOptions): string {
  const widths = [320, 640, 960, 1280, 1600];
  return widths
    .filter(w => w <= baseWidth * 2)
    .map(w => {
      const params = new URLSearchParams({
        w: w.toString(),
        q: options.quality.toString(),
        fit: options.fit,
        auto: 'format,compress',
      });
      return `https://images.unsplash.com/photo-${id}?${params} ${w}w`;
    })
    .join(', ');
}
---

{
  !image ? (
    <Fragment />
  ) : (
    <img 
      src={image.src} 
      {...image.attributes}
      crossorigin="anonymous" 
      referrerpolicy="no-referrer"
      fetchpriority={props.loading === 'eager' ? 'high' : 'auto'}
      loading={props.loading}
      decoding={props.decoding}
    />
  )
}