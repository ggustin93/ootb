---
import { Icon } from 'astro-icon/components';
import type { Tag } from '~/types';
import { CONTENT_TYPES } from '~/config/content-types';

interface Props {
  tags: Tag[];
  posts?: {
    slug: string;
    title: string;
    category?: string;
  }[];
  placeholder?: string;
  label?: string;
  showPostResults?: boolean;
  currentPath?: string;
  currentTag?: { slug: string; title: string; };
}

// Récupérer le chemin actuel pour détecter si on est sur la page /blog
const currentPath = Astro.url.pathname;
const isMainBlogPage = currentPath === '/blog' || currentPath === '/blog/';
const isTagPage = currentPath.startsWith('/tag/');

// Extraire le tag actuel du chemin si on est sur une page de tag
const currentTagFromPath = isTagPage ? decodeURIComponent(currentPath.split('/tag/')[1].split('/')[0]) : '';

const {
  tags,
  posts = [],
  placeholder = "Ex: IA, Montessori, inclusion, ...",
  label = "Rechercher par thématique ou titre d'article :",
  showPostResults = true,
  currentTag
} = Astro.props;

// Déterminer le tag actuel (priorité à celui passé en prop)
const activeTag = currentTag || (isTagPage ? tags.find(t => t.slug === currentTagFromPath) : null);

// Sérialiser les données pour le lazy loading
const serializedTags = JSON.stringify(tags);
const serializedPosts = JSON.stringify(posts);
const contentTypes = CONTENT_TYPES;
---

<div class="mb-4">
  <div class="flex justify-between items-center mb-3">
    <div class="text-white/90 text-sm uppercase tracking-wider font-medium">{label}</div>
    {isTagPage && (
      <a href="/blog/" class="text-white/80 hover:text-white text-sm flex items-center gap-1 transition-colors duration-200">
        <Icon name="tabler:x" class="w-4 h-4" />
        <span>Réinitialiser le filtre</span>
      </a>
    )}
  </div>
  <div class="relative">
    <input
      type="search"
      id="tag-search"
      placeholder={activeTag ? `Tag actuel : ${activeTag.title}` : placeholder}
      class="w-full px-5 py-4 pl-12 text-gray-700 bg-white/95 backdrop-blur-sm border border-white/20 rounded-full focus:outline-none focus:ring-2 focus:ring-white/30 transition-all duration-300"
      autocomplete="off"
    />
    {activeTag ? (
      <div class="absolute left-4 top-1/2 transform -translate-y-1/2 flex items-center gap-1.5">
        <Icon name="tabler:tag" class="w-5 h-5 text-gray-500" />
      </div>
    ) : (
      <Icon 
        name="tabler:search" 
        class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" 
      />
    )}
    <!-- Conteneur vide pour les suggestions - sera rempli dynamiquement -->
    <div id="search-suggestions" class="absolute w-full mt-2 bg-white rounded-xl shadow-lg overflow-hidden hidden z-50 p-2">
      <div class="max-h-64 overflow-y-auto">
        <div class="px-4 py-3 text-gray-500 text-center" id="loading-indicator">
          <div class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-gray-400 mr-2"></div>
          Chargement...
        </div>
        <div id="no-results" class="px-4 py-3 text-gray-500 text-center hidden">
          Aucun résultat trouvé
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ showPostResults, isMainBlogPage, serializedTags, serializedPosts, contentTypes, activeTag }}>
  function initializeTagSearch() {
    let isSearchFocused = false;
    let mouseOverSuggestions = false;
    let debounceTimer;
    const MAX_VISIBLE_RESULTS = 50; // Limiter à 50 résultats maximum
    
    // État pour le lazy loading
    let isDataLoaded = false;
    let tags = [];
    let posts = [];

    const searchInput = document.getElementById('tag-search');
    const searchSuggestions = document.getElementById('search-suggestions');
    const loadingIndicator = document.getElementById('loading-indicator');
    const noResultsMessage = document.getElementById('no-results');
    
    // Si un tag actif est défini, mettre à jour le placeholder
    if (activeTag && searchInput) {
      searchInput.placeholder = `Tag actuel : ${activeTag.title}`;
    }
    
    // Fonction pour charger les données
    function loadSearchData() {
      if (isDataLoaded) return Promise.resolve();
      
      return new Promise((resolve) => {
        // Simuler un petit délai pour montrer l'indicateur de chargement
        setTimeout(() => {
          // Désérialiser les données
          tags = JSON.parse(serializedTags);
          posts = JSON.parse(serializedPosts);
          
          // Dédupliquer les posts par titre
          const uniquePosts = [];
          const seenTitles = new Set();
          
          posts.forEach(post => {
            if (!seenTitles.has(post.title)) {
              seenTitles.add(post.title);
              uniquePosts.push(post);
            }
          });
          
          posts = uniquePosts;
          
          // Générer le HTML des suggestions
          const suggestionsContainer = searchSuggestions.querySelector('.max-h-64');
          
          // Nettoyer le conteneur avant d'ajouter de nouvelles sections
          // Garder uniquement l'indicateur de chargement et le message "aucun résultat"
          const elementsToKeep = ['loading-indicator', 'no-results'];
          Array.from(suggestionsContainer.children).forEach(child => {
            if (!elementsToKeep.includes(child.id)) {
              child.remove();
            }
          });
          
          // Créer la section des tags
          if (tags.length > 0) {
            const tagsSection = document.createElement('div');
            tagsSection.innerHTML = `
              <div class="px-4 py-1 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                Thématiques
              </div>
            `;
            
            tags.forEach(tag => {
              const button = document.createElement('button');
              button.className = 'w-full px-4 py-2 text-left hover:bg-gray-50 flex items-center gap-2 text-gray-700';
              button.setAttribute('data-tag-slug', tag.slug);
              button.setAttribute('data-tag-title', tag.title);
              button.setAttribute('data-result-type', 'tag');
              button.innerHTML = `
                <svg class="w-4 h-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                  <path d="M7.5 7.5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"></path>
                  <path d="M3 6v5.5a2.5 2.5 0 0 0 2.5 2.5h5.5l7 7v-15a2.5 2.5 0 0 0 -2.5 -2.5h-12.5a2.5 2.5 0 0 0 -2.5 2.5z"></path>
                </svg>
                <span>${tag.title}</span>
              `;
              tagsSection.appendChild(button);
            });
            
            suggestionsContainer.appendChild(tagsSection);
          }
          
          // Créer la section des posts
          if (showPostResults && posts.length > 0) {
            const postsSection = document.createElement('div');
            postsSection.innerHTML = `
              <div class="px-4 py-1 mt-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                Ressources
              </div>
            `;
            
            posts.forEach(post => {
              const button = document.createElement('button');
              button.className = 'w-full px-4 py-2 text-left hover:bg-gray-50 flex items-center gap-2 text-gray-700';
              button.setAttribute('data-post-slug', post.slug);
              button.setAttribute('data-post-title', post.title);
              if (post.category) {
                button.setAttribute('data-post-category', post.category);
              }
              button.setAttribute('data-result-type', 'post');
              
              let categoryLabel = '';
              if (post.category) {
                if (post.category in contentTypes) {
                  categoryLabel = contentTypes[post.category].label;
                } else {
                  categoryLabel = post.category;
                }
              }
              
              button.innerHTML = `
                <svg class="w-4 h-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                  <path d="M14 3v4a1 1 0 0 0 1 1h4"></path>
                  <path d="M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z"></path>
                  <path d="M9 9l1 0"></path>
                  <path d="M9 13l6 0"></path>
                  <path d="M9 17l6 0"></path>
                </svg>
                <div class="flex-1">
                  <span class="block">${post.title}</span>
                  ${post.category ? `<span class="text-xs text-gray-500 block">${categoryLabel}</span>` : ''}
                </div>
              `;
              postsSection.appendChild(button);
            });
            
            suggestionsContainer.appendChild(postsSection);
          }
          
          // Cacher l'indicateur de chargement
          if (loadingIndicator) {
            loadingIndicator.classList.add('hidden');
          }
          
          isDataLoaded = true;
          
          // Initialiser les événements sur les boutons
          initSuggestionButtons();
          
          resolve();
        }, 100);
      });
    }
    
    function initSuggestionButtons() {
      const suggestionButtons = document.querySelectorAll('#search-suggestions button');
      
      // Gérer la sélection d'une suggestion
      suggestionButtons?.forEach(button => {
        button.addEventListener('click', () => {
          const resultType = button.getAttribute('data-result-type');
          
          if (resultType === 'tag') {
            const tagSlug = button.getAttribute('data-tag-slug');
            if (tagSlug) {
              window.location.href = `/tag/${tagSlug}`;
            }
          } else if (resultType === 'post') {
            const postSlug = button.getAttribute('data-post-slug');
            
            if (postSlug) {
              // Pour tous les types de contenu, utiliser le format direct sans préfixe /blog/
              // Format attendu: /[slug]
              window.location.href = `/${postSlug}`;
            }
          }
        });
      });
    }

    function showSuggestions() {
      if (searchSuggestions) {
        searchSuggestions.classList.remove('hidden');
      }
    }

    function hideSuggestions() {
      if (!mouseOverSuggestions && !isSearchFocused && searchSuggestions) {
        searchSuggestions.classList.add('hidden');
      }
    }

    function filterSuggestions(searchTerm) {
      if (!isDataLoaded) return false;
      
      let hasVisibleSuggestions = false;
      let visibleTags = 0;
      let visiblePosts = 0;
      
      const suggestionButtons = document.querySelectorAll('#search-suggestions button');

      // Optimisation : normaliser le terme de recherche une seule fois
      const normalizedSearch = searchTerm
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "");

      suggestionButtons?.forEach(button => {
        const resultType = button.getAttribute('data-result-type');
        let title = '';
        
        if (resultType === 'tag') {
          title = button.getAttribute('data-tag-title') || '';
        } else if (resultType === 'post') {
          title = button.getAttribute('data-post-title') || '';
          
          // Sur la page principale du blog, on affiche tous les types de posts
          // Sur les autres pages, on filtre si nécessaire
          if (!isMainBlogPage) {
            // Si un filtrage par catégorie est nécessaire, ce serait ici
            // Exemple de code commenté pour référence future
            /*
            const category = button.getAttribute('data-category');
            const currentCategory = window.location.pathname.includes('/category/') 
              ? window.location.pathname.split('/category/')[1].split('/')[0]
              : null;
              
            // Si on est sur une page de catégorie et que le post n'appartient pas à cette catégorie, on le cache
            if (currentCategory && category !== currentCategory) {
              button.style.display = 'none';
              return;
            }
            */
          }
        }

        const normalizedTitle = title
          .toLowerCase()
          .normalize("NFD")
          .replace(/[\u0300-\u036f]/g, "");

        const isVisible = normalizedSearch === '' || normalizedTitle.includes(normalizedSearch);
        
        // Optimisation : limiter le nombre de résultats visibles
        if (isVisible) {
          if (resultType === 'post') {
            visiblePosts++;
            // Limiter le nombre de résultats de posts affichés
            if (visiblePosts > MAX_VISIBLE_RESULTS) {
              button.style.display = 'none';
              return;
            }
          } else if (resultType === 'tag') {
            visibleTags++;
          }
          
          button.style.display = '';
          hasVisibleSuggestions = true;
        } else {
          button.style.display = 'none';
        }
      });

      // Gérer l'affichage des sections et du message "aucun résultat"
      const tagSection = document.querySelector('#search-suggestions > div > div:first-of-type:not(#loading-indicator):not(#no-results)');
      const postSection = showPostResults ? document.querySelector('#search-suggestions > div > div:nth-of-type(2):not(#loading-indicator):not(#no-results)') : null;
      
      if (tagSection) {
        tagSection.style.display = visibleTags > 0 ? '' : 'none';
      }
      
      if (postSection) {
        postSection.style.display = visiblePosts > 0 ? '' : 'none';
        
        // Ajouter un message si le nombre de résultats est limité
        const limitMessage = document.getElementById('limit-message');
        if (visiblePosts > MAX_VISIBLE_RESULTS) {
          if (!limitMessage) {
            const message = document.createElement('div');
            message.id = 'limit-message';
            message.className = 'px-4 py-2 text-xs text-gray-500 text-center';
            message.textContent = `Affichage limité aux ${MAX_VISIBLE_RESULTS} premiers résultats`;
            postSection.appendChild(message);
          }
        } else if (limitMessage) {
          limitMessage.remove();
        }
      }
      
      if (noResultsMessage) {
        noResultsMessage.classList.toggle('hidden', hasVisibleSuggestions);
      }

      return hasVisibleSuggestions;
    }

    // Gérer le focus de l'input avec lazy loading
    searchInput?.addEventListener('focus', () => {
      isSearchFocused = true;
      showSuggestions();
      
      // Charger les données si ce n'est pas déjà fait
      if (!isDataLoaded) {
        loadSearchData().then(() => {
          filterSuggestions(searchInput.value);
        });
      } else {
        filterSuggestions(searchInput.value);
      }
    });

    searchInput?.addEventListener('blur', () => {
      isSearchFocused = false;
      setTimeout(hideSuggestions, 200);
    });

    searchSuggestions?.addEventListener('mouseenter', () => {
      mouseOverSuggestions = true;
    });

    searchSuggestions?.addEventListener('mouseleave', () => {
      mouseOverSuggestions = false;
      if (!isSearchFocused) {
        hideSuggestions();
      }
    });

    // Filtrer les suggestions avec debounce pour optimiser les performances
    searchInput?.addEventListener('input', (e) => {
      const target = e.target;
      if (!target) return;
      const searchTerm = target.value;
      
      // Charger les données si ce n'est pas déjà fait
      if (!isDataLoaded) {
        loadSearchData().then(() => {
          // Effacer le timer précédent
          clearTimeout(debounceTimer);
          
          // Définir un nouveau timer (200ms de délai)
          debounceTimer = setTimeout(() => {
            const hasResults = filterSuggestions(searchTerm);
            
            if (hasResults || searchTerm === '') {
              showSuggestions();
            } else {
              hideSuggestions();
            }
          }, 200);
        });
      } else {
        // Effacer le timer précédent
        clearTimeout(debounceTimer);
        
        // Définir un nouveau timer (200ms de délai)
        debounceTimer = setTimeout(() => {
          const hasResults = filterSuggestions(searchTerm);
          
          if (hasResults || searchTerm === '') {
            showSuggestions();
          } else {
            hideSuggestions();
          }
        }, 200);
      }
    });

    // Reset initial
    if (searchInput) {
      searchInput.value = '';
      hideSuggestions();
    }
  }

  // Initialiser au chargement initial
  initializeTagSearch();

  // Réinitialiser à chaque changement de page
  document.addEventListener('astro:page-load', () => {
    initializeTagSearch();
  });
</script>

<style>
  /* Style pour la barre de défilement des suggestions */
  #search-suggestions .max-h-64 {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
  }

  #search-suggestions .max-h-64::-webkit-scrollbar {
    width: 6px;
  }

  #search-suggestions .max-h-64::-webkit-scrollbar-track {
    background: transparent;
  }

  #search-suggestions .max-h-64::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }
</style> 