---
import { Icon } from 'astro-icon/components';
import Image from '~/components/common/Image.astro';
import type { ImageMetadata } from 'astro';
import ActionBadge from '~/components/ui/ActionBadge.astro';
import logo_blanc from '~/assets/images/logo_ootb_white.svg';
// Import du logo garçon en format WebP au lieu de SVG pour meilleure compatibilité mobile
import logo_garcon_blanc from '~/assets/images/logo_ootb_garcon_blanc.webp';
// Garder le SVG comme fallback si nécessaire
// import logo_garcon_blanc_svg from '~/assets/images/logo_ootb_garcon_blanc.svg';
import GradientHeroSection from './GradientHeroSection.astro';
import homepageData from '../../content/homepage/index.json';
// Import du composant ScrollDownArrow
// Le composant ScrollDownArrow n'est plus utilisé directement

interface Props {
  image?: ImageMetadata;
  scrollTargetId?: string; // ID de la section cible pour le défilement
  /**
   * Contrôle si la flèche de défilement doit être affichée
   * @default true
   */
  showScrollArrow?: boolean;
  
  /**
   * Contrôle si la flèche de défilement doit être affichée sur mobile
   * @default false
   */
  showScrollArrowOnMobile?: boolean;
}

const { 
  image: propImage, 
  scrollTargetId = "mission-section",
  showScrollArrow = true,
  showScrollArrowOnMobile = false
} = Astro.props;

// Get homepage data from JSON
const hero = homepageData.hero;

// Fallback values if no Tina data is available
const defaultHero = {
  title: {
    line1: "La plateforme",
    line2: "des pédagogies",
    line3: "innovantes !"
  },
  badges: [
    {
      text: "Festival",
      link: "/festival",
      variant: "festival"
    },
    {
      text: "Podcast",
      link: "/category/podcast",
      variant: "podcast"
    },
    {
      text: "Émission",
      link: "/category/tv",
      variant: "emission"
    },
    {
      text: "Appel à projets",
      link: "/appel-a-projets",
      variant: "appel"
    }
  ]
};

// Use props if provided, otherwise use Tina data with fallback
const displayImage = propImage || hero?.image;
const displayTitle = hero?.title || defaultHero.title;
const displayBadges = hero?.badges || defaultHero.badges;
---

<GradientHeroSection>
  <!-- Éléments décoratifs flottants optimisés -->
  <div class="absolute inset-0 overflow-hidden" aria-hidden="true">
    <Icon name="tabler:book-2" class="absolute w-14 md:w-16 h-24 md:h-24 -rotate-[15deg] md:-rotate-12 top-[15%] md:top-[10%] left-[5%] md:left-[40%] opacity-30 transition-transform hover:-translate-y-2 duration-1000 text-white filter drop-shadow-lg" />
    <Icon name="tabler:book" class="absolute w-12 md:w-14 h-20 md:h-20 rotate-45 top-[35%] md:top-[40%] right-[5%] md:right-[12%] opacity-30 transition-transform hover:translate-y-2 duration-1000 text-white filter drop-shadow-lg" />
  </div>

  <div class="relative z-20 grid md:grid-cols-2 gap-8 md:gap-12 items-center max-w-6xl mx-auto px-4 md:px-8 pt-12 md:pt-32 w-full">
    <div class="text-center md:text-left flex flex-col">
      <!-- Sur mobile: logo_garcon_blanc en haut de la page -->
      <div class="md:hidden mb-2 pt-2 pb-4 flex justify-center px-12">
        <div class="transform scale-150 mx-auto">
          <Image
            src={logo_garcon_blanc}
            alt="Out of the Books"
            class="w-[180px] h-auto mx-auto object-contain md:w-[240px]"
            widths={[180, 240, 360]}
            sizes="(max-width: 768px) 180px, 240px"
            loading="eager"
            decoding="async"
          />
        </div>
      </div>

      <!-- Titre sur mobile -->
      <h2 class="md:hidden mb-6 mt-4 font-body text-3xl font-light max-w-lg leading-tight mx-auto py-2">
        <span class="text-white font-bold block mb-2">{displayTitle.line1}</span>
        <span class="text-[--ootb-yellow] relative font-bold italic block mb-2">
          <span class="relative font-bold">
            {displayTitle.line2}
            <span class="absolute bottom-0 left-0 w-[102%] h-[0.07em] bg-[--ootb-yellow] rounded-full transform -rotate-1 translate-x-[-1%]"></span>
            <span class="absolute bottom-[0.08em] left-0 w-[101%] h-[0.06em] bg-[--ootb-yellow]/70 rounded-full transform rotate-[0.5deg] translate-x-[-2%]"></span>
            <span class="absolute bottom-[-0.08em] left-0 w-[103%] h-[0.07em] bg-[--ootb-yellow]/60 rounded-full transform -rotate-[1.5deg] translate-x-[1%]"></span>
          </span>
        </span>
        <span class="text-white font-bold block">{displayTitle.line3}</span>
      </h2>

      <!-- Logo desktop -->
      <h1 class="hidden md:block font-heading text-7xl font-bold leading-none tracking-tight mb-16">
        <Image
          src={logo_blanc}
          alt="Out of the Books"
          class="w-[400px] h-auto md:mx-0"
          widths={[400]}
          sizes="400px"
          loading="eager"
          decoding="async"
        />
      </h1>

      <!-- Sur desktop: le texte après le logo -->
      <h2 class="hidden md:block font-body text-3xl md:text-5xl font-light mb-8 md:mb-16 max-w-lg leading-tight mx-auto md:mx-0">
        <span class="text-white font-bold block mb-0.5">{displayTitle.line1}</span>
        <span class="text-[--ootb-yellow] relative md:ml-6 font-bold italic block mb-0.5">
          <span class="relative font-bold">
            {displayTitle.line2}
            <span class="absolute bottom-0 left-0 w-[102%] h-[0.06em] bg-[--ootb-yellow] rounded-full transform -rotate-1 translate-x-[-1%]"></span>
            <span class="absolute bottom-[0.08em] left-0 w-[101%] h-[0.05em] bg-[--ootb-yellow]/70 rounded-full transform rotate-[0.5deg] translate-x-[-2%]"></span>
            <span class="absolute bottom-[-0.08em] left-0 w-[103%] h-[0.06em] bg-[--ootb-yellow]/60 rounded-full transform -rotate-[1.5deg] translate-x-[1%]"></span>
          </span>
        </span>
        <span class="text-white font-bold block">{displayTitle.line3}</span>
      </h2>

      <!-- Section des badges responsive -->
      <div class="flex flex-wrap md:flex-nowrap gap-3 justify-center md:justify-start items-center md:relative mt-4 md:mt-4 md:mb-4 md:w-full">
        {displayBadges.map((badge) => (
          <a href={badge.link} class="transform hover:scale-105 transition-all duration-300 m-0.5 md:m-0">
            <ActionBadge variant={badge.variant as "festival" | "podcast" | "emission" | "appel" | "live" | "actualite" | undefined}>
              {badge.text}
            </ActionBadge>
          </a>
        ))}
      </div>
    </div>

    <!-- Image principale (desktop) avec flèche repositionnée -->
    <div class="relative hidden md:block px-8">
      <Image
        src={displayImage}
        alt="Illustration principale"
        class="relative z-20 transform hover:-rotate-2 transition-transform duration-300 w-full max-w-[600px] mx-auto object-contain h-auto"
        widths={[400, 600]}
        sizes="(max-width: 600px) 400px, 600px"
        aspectRatio="auto"
        loading="eager"
        decoding="async"
      />
      
      <!-- Cercle décoratif -->
      <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 rounded-full bg-white/10 blur-2xl z-10"></div>
      
      <!-- ScrollDownArrow toujours en bas à droite de l'image (desktop) -->
      {showScrollArrow && (
        <div class="hidden md:block absolute z-30 bottom-0 left-1/2 transform translate-y-[100%] translate-x-[-50%]">
          <div class="flex flex-col items-center group cursor-pointer" data-target-id={scrollTargetId}>
            <!-- Applique le fond flou uniquement sur le texte -->
            <p class="font-handwritten text-white text-2xl md:text-3xl mb-3 transform -rotate-3 relative group-hover:text-[--ootb-yellow] transition-colors duration-300">
              <span class="absolute inset-0 bg-white/10 backdrop-blur-md rounded-xl -z-10 scale-110 px-8"></span>
              Explorer l'univers
            </p>
            
            <!-- La flèche est sans flou -->
            <div class="arrow-animation hover:scale-110 transition-all duration-300">
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke-width="2.5" 
                stroke="currentColor" 
                class="w-8 h-8 md:w-10 md:h-10 text-white group-hover:text-[--ootb-yellow] transition-colors duration-300 drop-shadow-md"
              >
                <path 
                  stroke-linecap="round" 
                  stroke-linejoin="round" 
                  d="M19.5 13.5L12 21m0 0l-7.5-7.5M12 21V3"
                />
              </svg>
            </div>
          </div>
        </div>
      )}
    </div>
  </div>
  
  <!-- ScrollDownArrow pour mobile (en bas) -->
  {showScrollArrow && showScrollArrowOnMobile && (
    <div class="md:hidden relative mt-8 mb-4">
      <div class="flex flex-col items-center mx-auto w-max group cursor-pointer" data-target-id={scrollTargetId}>
        <!-- Applique le fond flou uniquement sur le texte (mobile) -->
        <p class="font-handwritten text-white text-2xl mb-3 transform -rotate-3 relative group-hover:text-[--ootb-yellow] transition-colors duration-300">
          <span class="absolute inset-0 bg-white/10 backdrop-blur-md rounded-xl -z-10 scale-110 px-8"></span>
          Explorer l'univers
        </p>
        
        <!-- La flèche est sans flou (mobile) -->
        <div class="arrow-animation hover:scale-110 transition-all duration-300">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke-width="2.5" 
            stroke="currentColor" 
            class="w-8 h-8 text-white group-hover:text-[--ootb-yellow] transition-colors duration-300 drop-shadow-md"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              d="M19.5 13.5L12 21m0 0l-7.5-7.5M12 21V3"
            />
          </svg>
        </div>
      </div>
    </div>
  )}
</GradientHeroSection>

<style>
  @keyframes float {
    0% { transform: translateY(0px); }
    50% { transform: translateY(10px); }
    100% { transform: translateY(0px); }
  }

  .arrow-animation {
    animation: float 2s ease-in-out infinite;
  }

  .arrow-animation:hover {
    animation-play-state: paused;
  }

  @media (prefers-reduced-motion: reduce) {
    .arrow-animation {
      animation: none;
    }
  }
</style>

<script define:vars={{ scrollTargetId }}>
  // Observer la hauteur de la fenêtre et ajuster la position des éléments si nécessaire
  const adjustHeroLayout = () => {
    // Hauteur de la fenêtre
    const windowHeight = window.innerHeight;
    const heroSection = document.querySelector('.grid');
    
    // Si la hauteur de la fenêtre est trop petite, ajuster les espacements
    if (windowHeight < 700 && heroSection) {
      // Réduire les marges internes pour les petits écrans
      heroSection.classList.add('md:pt-16', 'pt-8');
      heroSection.classList.remove('md:pt-32', 'pt-12');
    } else if (heroSection) {
      // Restaurer les marges normales
      heroSection.classList.remove('md:pt-16', 'pt-8');
      heroSection.classList.add('md:pt-32', 'pt-12');
    }
  };

  // Ajouter la fonctionnalité de scroll lors du clic
  const setupScrollArrow = () => {
    const arrowContainers = document.querySelectorAll('.flex.flex-col.items-center.group.cursor-pointer');
    
    arrowContainers.forEach(container => {
      // Récupérer l'ID cible depuis l'attribut data-target-id
      const targetId = container.getAttribute('data-target-id') || scrollTargetId;
      
      if (!targetId) return;
      
      container.addEventListener('click', () => {
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          const headerOffset = 100;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        } else {
          const defaultScrollDistance = window.innerHeight * 0.8;
          const currentPosition = window.pageYOffset;
          window.scrollTo({
            top: currentPosition + defaultScrollDistance,
            behavior: 'smooth'
          });
        }
      });
    });
  };

  // Exécuter au chargement et au redimensionnement
  window.addEventListener('resize', adjustHeroLayout);
  document.addEventListener('DOMContentLoaded', () => {
    adjustHeroLayout();
    setupScrollArrow();
  });
  document.addEventListener('astro:after-swap', () => {
    adjustHeroLayout();
    setupScrollArrow();
  });
</script>