---
import Image from '~/components/common/Image.astro';
import { Icon } from 'astro-icon/components';
import { getPermalink } from '~/utils/permalinks';
import Button from '~/components/ui/Button.astro';

interface Meta {
  publishDate?: Date | string;
  isLive?: boolean;
  platform?: string;
  duration?: string;
  expert?: string;
  contributors?: string;
  episode?: string;
}

interface Category {
  slug: string;
  title: string;
}

interface Props {
  title: string;
  image: string;
  badge?: string;
  href: string;
  type?: 'default' | 'actualite' | 'fiche' | 'live' | 'podcast' | 'tv' | 'premium';
  category?: Category;
  tags?: string[];
  meta?: Meta;
  class?: string;
}

const { 
  title, 
  image, 
  badge,
  href,
  type = 'default',
  category,
  tags,
  meta,
  class: className = ''
} = Astro.props;

const displayedTags = tags || [];

// Configuration des types de cartes avec les variables de couleur OOTB
const typeConfig = {
  actualite: {
    icon: 'tabler:news',
    label: 'Lire l\'actualité',
    color: 'var(--content-actualite)',
    badgeIcon: 'tabler:news',
  },
  fiche: {
    icon: 'tabler:file-text',
    label: 'Consulter la fiche',
    color: 'var(--content-fiche)',
    badgeIcon: 'tabler:file-text',
  },
  live: {
    icon: 'tabler:broadcast',
    label: 'Voir le live Facebook',
    color: 'var(--content-live)',
    badgeIcon: 'tabler:brand-facebook',
  },
  podcast: {
    icon: 'tabler:brand-spotify',
    label: 'Écouter l\'épisode',
    color: 'var(--content-podcast)',
    badgeIcon: 'tabler:microphone',
  },
  tv: {
    icon: 'tabler:player-play',
    label: 'Regarder l\'émission',
    color: 'var(--content-tv)',
    badgeIcon: 'tabler:video',
  },
  premium: {
    icon: 'tabler:crown',
    label: 'Accéder au contenu premium',
    color: 'var(--content-premium)',
    badgeIcon: 'tabler:crown',
  },
  default: {
    icon: 'tabler:article',
    label: 'Lire l\'article',
    color: 'var(--content-actualite)',
    badgeIcon: 'tabler:article',
  }
} as const;

// Détermine le type final en fonction de la catégorie ou du type explicite
const finalType = category?.slug?.toLowerCase() in typeConfig 
  ? category.slug.toLowerCase() as keyof typeof typeConfig
  : type;

const config = typeConfig[finalType];

// Format date
const formatPublishDate = (date?: Date | string) => {
  if (!date) return null;
  const publishDate = date instanceof Date ? date : new Date(date);
  return new Intl.DateTimeFormat('fr-FR', {
    day: 'numeric',
    month: 'short',
    year: 'numeric'
  }).format(publishDate);
};

const formattedPublishDate = meta?.publishDate 
  ? formatPublishDate(meta.publishDate) 
  : null;

// Options d'optimisation d'image spécifiques pour les miniatures
const thumbnailImageOptions = {
  width: 400, // Largeur adaptée pour les miniatures
  height: 225, // Hauteur pour un ratio 16:9
  quality: 75, // Qualité légèrement réduite pour les miniatures
  format: 'webp', 
  loading: 'lazy',
  decoding: 'async',
};

---

<article 
  class:list={[
    'flex flex-col bg-white dark:bg-gray-800 rounded-2xl shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden h-full',
    className
  ]}
>
  <div class="relative aspect-[16/9] overflow-hidden">
    {image && (
      <Image 
        src={image}
        alt={title}
        class="w-full h-full object-cover"
        {...thumbnailImageOptions}
      />
    )}
    {(badge || category) && (
      <div class="absolute top-4 left-4 z-10">
        <span 
          class:list={[
            'inline-flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium text-white',
            'transform skew-x-[-12deg] shadow-md transition-transform duration-300 group-hover:scale-105',
            `bg-[${config.color}]`
          ]}
        >
          <span class="transform skew-x-[12deg] flex items-center gap-1.5">
            <Icon name={config.badgeIcon} class="w-4 h-4" />
            {badge || category?.title || category?.slug}
          </span>
        </span>
      </div>
    )}
    {formattedPublishDate && (
      <div class="absolute bottom-4 right-4 z-10">
        <span class="bg-black/60 text-white text-xs px-2.5 py-1 rounded-full font-medium">
          {formattedPublishDate}
        </span>
      </div>
    )}
    <div class="absolute inset-0 bg-gradient-to-t from-black/50 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
  </div>

  <div class="p-6 flex flex-col flex-grow">
    <h3 class="flex-grow">
      <a 
        href={getPermalink(href, 'post')} 
        class="text-2xl font-bold mb-2 line-clamp-2 text-gray-900 hover:text-[var(--hover-color)] transition-colors duration-300"
        aria-label={`Lire ${title}`}
      >
        {title}
      </a>
    </h3>
    
    {(meta?.duration || meta?.expert || meta?.contributors || meta?.episode) && (
      <div class="mt-3 flex flex-col space-y-1.5 text-sm text-gray-600">
        {meta.duration && (
          <div class="inline-flex items-center space-x-2">
            <Icon name="tabler:clock" class="h-4 w-4 text-gray-500 opacity-70" />
            <span>{meta.duration}</span>
          </div>
        )}
        {(meta.expert || meta.contributors) && (
          <div class="inline-flex items-center space-x-2">
            <Icon name="tabler:users" class="h-4 w-4 text-gray-500 opacity-70" />
            <span>
              {meta.expert && meta.contributors 
                ? `${meta.expert}, ${meta.contributors}`
                : (meta.expert || meta.contributors)}
            </span>
          </div>
        )}
        {meta.episode && (
          <div class="inline-flex items-center space-x-2">
            <Icon name="tabler:device-tv" class="h-4 w-4 text-gray-500 opacity-70" />
            <span>{meta.episode}</span>
          </div>
        )}
      </div>
    )}
  </div>
  
  <div class="p-6 pt-0 mb-6">
    <Button 
      href={getPermalink(href, 'post')}
      variant="card"
      icon={config.icon}
      iconPosition="left"
      class:list={[
        'text-gray-700',
        `bg-[color-mix(in_srgb,${config.color}_10%,transparent)] hover:bg-[color-mix(in_srgb,${config.color}_15%,transparent)]`,
        'transition-all duration-300 shadow-sm hover:shadow'
      ]}
      aria-label={config.label}
    >
      <span class="font-medium">{config.label}</span>
      <Icon 
        name="tabler:chevron-right" 
        class="w-5 h-5 transition-transform duration-300 group-hover/button:translate-x-0.5" 
        slot="icon-right"
      />
    </Button>
  </div>
</article>

<style>
  article {
    transition: all 0.3s ease-in-out;
  }
  
  article:hover {
    transform: translateY(-4px);
  }

  article::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 1rem;
    pointer-events: none;
    transition: all 0.3s ease-in-out;
    opacity: 0;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
  }

  article:hover::after {
    opacity: 1;
  }
</style>
