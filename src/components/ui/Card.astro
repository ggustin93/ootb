---
import Image from '~/components/common/Image.astro';
import { Icon } from 'astro-icon/components';
import { getPermalink } from '~/utils/permalinks';
import Button from '~/components/ui/Button.astro';

interface Meta {
  author?: string;
  episode?: string;
  duration?: string;
  expert?: string;
  contributors?: string;
  publishDate?: string;
}

interface Category {
  slug: string;
  title: string;
}

interface Props {
  title: string;
  description: string;
  image: string;
  badge?: string;
  href: string;
  type?: 'default' | 'actualite' | 'fiche' | 'live' | 'podcast' | 'tv' | 'premium';
  category?: Category;
  tags?: string[];
  meta?: Meta;
  class?: string;
}

const { 
  title, 
  description, 
  image, 
  badge,
  href,
  type = 'default',
  category,
  tags,
  meta,
  class: className = ''
} = Astro.props;

const displayedTags = tags || [];

// Configuration des types de cartes avec les variables de couleur OOTB
const typeConfig = {
  actualite: {
    icon: 'tabler:news',
    label: 'Lire l\'actualité',
    color: 'var(--content-actualite)',  // Gris neutre
    badgeIcon: 'tabler:news',
  },
  fiche: {
    icon: 'tabler:file-text',
    label: 'Consulter la fiche',
    color: 'var(--content-fiche)',  // --ootb-blue
    badgeIcon: 'tabler:file-text',
  },
  live: {
    icon: 'tabler:broadcast',
    label: 'Voir le live Facebook',
    color: 'var(--content-live)',  // Facebook Blue
    badgeIcon: 'tabler:brand-facebook',
  },
  podcast: {
    icon: 'tabler:brand-spotify', 
    label: 'Écouter l\'épisode',
    color: 'var(--content-podcast)',  // --ootb-violet
    badgeIcon: 'tabler:microphone',
  },
  tv: {
    icon: 'tabler:player-play',
    label: 'Regarder l\'émission', 
    color: 'var(--content-tv)',  // --ootb-green
    badgeIcon: 'tabler:video',
  },
  premium: {
    icon: 'tabler:crown',
    label: 'Accéder au contenu premium',
    color: 'var(--content-premium)',  // --ootb-orange
    badgeIcon: 'tabler:crown',
  },
  default: {
    icon: 'tabler:article',
    label: 'Lire l\'article',
    color: 'var(--content-actualite)',  // Même gris que les actualités
    badgeIcon: 'tabler:article',
  }
} as const;

const finalType = category?.slug?.toLowerCase() === 'podcast' ? 'podcast' 
  : category?.slug?.toLowerCase() === 'tv' ? 'tv'
  : category?.slug?.toLowerCase() === 'premium' ? 'premium'
  : category?.slug?.toLowerCase() === 'actualite' ? 'actualite'
  : category?.slug?.toLowerCase() === 'fiche' ? 'fiche'
  : category?.slug?.toLowerCase() === 'live' ? 'live'
  : type;

const config = typeConfig[finalType];
---

<article class:list={[
  'group relative bg-white dark:bg-gray-800 rounded-2xl overflow-hidden',
  'hover:shadow-xl hover:-translate-y-1',
  'border border-gray-100/50 dark:border-gray-700/50',
  'flex flex-col h-full transition-all duration-300',
  className
]}>
  <div class="relative aspect-[16/9] overflow-hidden">
    <Image 
      src={image}
      alt={title}
      class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
      widths={[400, 800]}
      sizes="(max-width: 768px) 100vw, 400px"
      loading="lazy"
      decoding="async"
    />
    {(badge || category) && (
      <div class="absolute top-4 left-4 z-10">
        <span 
          class:list={[
            'inline-flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium text-white',
            'transform skew-x-[-12deg] shadow-md transition-transform duration-300 group-hover:scale-105',
            {
              'bg-[var(--content-actualite)]': finalType === 'actualite',
              'bg-[var(--content-live)]': finalType === 'live',
              'bg-[var(--content-fiche)]': finalType === 'fiche',
              'bg-[var(--content-podcast)]': finalType === 'podcast',
              'bg-[var(--content-tv)]': finalType === 'tv',
              'bg-[var(--content-premium)]': finalType === 'premium',
              'bg-slate-500': finalType === 'default'
            }
          ]}
        >
          <span class="transform skew-x-[12deg] flex items-center gap-1.5">
            <Icon name={config.badgeIcon} class="w-4 h-4" />
            {badge || category?.title || category}
          </span>
        </span>
      </div>
    )}
    
    <div class="absolute inset-0 bg-gradient-to-t from-black/50 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
  </div>

  <div class="p-6 flex flex-col flex-grow">
    <h3>
      <a 
        href={getPermalink(href, 'post')} 
        class="text-2xl font-bold mb-2 line-clamp-2 text-gray-900 hover:text-[var(--hover-color)] transition-colors duration-300"
        style={`--hover-color: ${config.color}`}
      >
        {title}
      </a>
    </h3>
    
    <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-2 text-sm leading-relaxed">
      {description}
    </p>

    {displayedTags.length > 0 && (
      <div class="flex flex-wrap gap-2 mb-4">
        {displayedTags.map((tag) => (
          <span class="inline-flex items-center px-3 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200 transition-all duration-300 hover:bg-gray-200 dark:hover:bg-gray-600 cursor-pointer">
            <Icon name="tabler:tag" class="w-3 h-3 mr-1" />
            {tag}
          </span>
        ))}
      </div>
    )}

    {meta && (
      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-4">
        {meta.author && (
          <div class="flex items-center gap-1">
            <Icon name="tabler:pencil" class="w-4 h-4" />
            <span>{meta.author}</span>
          </div>
        )}
        {meta.publishDate && (
          <div class="flex items-center gap-1">
            <Icon name="tabler:calendar" class="w-4 h-4" />
            <span>{meta.publishDate}</span>
          </div>
        )}
        {meta.expert && (
          <div class="flex items-center gap-1">
            <Icon name="tabler:user" class="w-4 h-4" />
            <span>{meta.expert}</span>
          </div>
        )}
        {meta.duration && (
          <div class="flex items-center gap-1">
            <Icon name="tabler:clock" class="w-4 h-4" />
            <span>{meta.duration}</span>
          </div>
        )}
        {meta.contributors && (
          <div class="flex items-center gap-1">
            <Icon name="tabler:users" class="w-4 h-4" />
            <span>{meta.contributors}</span>
          </div>
        )}
      </div>
    )}

    <div class="mt-auto">
      <Button 
        href={getPermalink(href, 'post')}
        variant="card"
        icon={config.icon}
        iconPosition="left"
        class:list={[
          'text-gray-700',
          {
            'bg-[color-mix(in_srgb,var(--content-actualite)_10%,transparent)] hover:bg-[color-mix(in_srgb,var(--content-actualite)_15%,transparent)]': finalType === 'actualite',
            'bg-[color-mix(in_srgb,var(--content-live)_10%,transparent)] hover:bg-[color-mix(in_srgb,var(--content-live)_15%,transparent)]': finalType === 'live',
            'bg-[color-mix(in_srgb,var(--content-fiche)_10%,transparent)] hover:bg-[color-mix(in_srgb,var(--content-fiche)_15%,transparent)]': finalType === 'fiche',
            'bg-[color-mix(in_srgb,var(--content-podcast)_10%,transparent)] hover:bg-[color-mix(in_srgb,var(--content-podcast)_15%,transparent)]': finalType === 'podcast',
            'bg-[color-mix(in_srgb,var(--content-tv)_10%,transparent)] hover:bg-[color-mix(in_srgb,var(--content-tv)_15%,transparent)]': finalType === 'tv',
            'bg-[color-mix(in_srgb,var(--content-premium)_10%,transparent)] hover:bg-[color-mix(in_srgb,var(--content-premium)_15%,transparent)]': finalType === 'premium',
          },
          'transition-all duration-300 shadow-sm hover:shadow'
        ]}
      >
        <span class="font-medium">{config.label}</span>
        <Icon 
          name="tabler:chevron-right" 
          class="w-5 h-5 transition-transform duration-300 group-hover/button:translate-x-0.5" 
          slot="icon-right"
        />
      </Button>
    </div>
  </div>
</article>

<style>
  article {
    transition: all 0.3s ease-in-out;
  }
  
  article:hover {
    transform: translateY(-4px);
  }

  article::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 1rem;
    pointer-events: none;
    transition: all 0.3s ease-in-out;
    opacity: 0;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
  }

  article:hover::after {
    opacity: 1;
  }
</style>