---
import { days, dayDates, eventTypes } from '~/services/events';
import type { Event } from '~/types/festival';
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import EventCard from '~/components/ui/EventCard.astro';

interface Props {
  events: Record<string, Event[]>;
}

const { events } = Astro.props;

const ITEMS_PER_PAGE = 10;

// Créer un tableau plat de tous les événements pour la pagination
const allEvents = Object.values(events).flat();

// Compter le nombre d'événements par type
const eventCounts: Record<string, number> = {
  'all': allEvents.length,
  'Conférences': allEvents.filter(event => event.type === 'Conférences').length,
  'Ateliers': allEvents.filter(event => event.type === 'Ateliers').length,
  'Stands': allEvents.filter(event => event.type === 'Stands').length
};

// Afficher des logs pour le débogage des filtres
console.log(`Nombre total d'événements: ${allEvents.length}`);
console.log(`Événements par type:`, eventCounts);
allEvents.forEach(event => {
  console.log(`Événement: "${event.title}" (Type: ${event.type}, Jour: ${event.day})`);
});
---

<div class="space-y-8 md:space-y-12" data-items-per-page={ITEMS_PER_PAGE}>
  <!-- Filtres -->
  <div class="space-y-4 md:space-y-6">
    <!-- Filtre par jour -->
    <div class="relative">
      <div class="flex flex-col sm:flex-row justify-between items-start mb-3 md:mb-4 gap-3 md:gap-4">
        <div class="flex-1 w-full">
          <!-- Version mobile: menu déroulant -->
          <div class="sm:hidden w-full">
            <select 
              id="mobile-day-selector" 
              class="w-full py-3 px-4 rounded-xl font-medium border border-[#e4451e]/20 bg-white text-[#e4451e] focus:outline-none focus:ring-2 focus:ring-[#e4451e]/30"
            >
              <option value="all">Tous les jours</option>
              {days.map((day) => (
                <option value={day}>{day}</option>
              ))}
            </select>
          </div>
          
          <!-- Version desktop: boutons -->
          <div class="hidden sm:flex overflow-x-auto gap-2 md:gap-3 p-1" id="days-container">
            <!-- Option "Tous les jours" -->
            <button
              class:list={[
                "day-filter-button min-w-[140px] py-2 md:py-3 px-3 md:px-4 rounded-xl font-medium transition-all duration-300",
                "flex flex-col items-center justify-center border border-[#e4451e]/20",
                "active bg-[#e4451e] text-white shadow-md"
              ]}
              data-day="all"
              type="button"
            >
              <span class="text-sm text-current opacity-75">Vue globale</span>
              <span class="text-lg mt-1 font-semibold text-current">Tous les jours</span>
            </button>

            {days.map((day) => (
              <button
                class:list={[
                  "day-filter-button min-w-[140px] py-2 md:py-3 px-3 md:px-4 rounded-xl font-medium transition-all duration-300",
                  "flex flex-col items-center justify-center border border-[#e4451e]/20",
                  "bg-white text-[#e4451e] hover:bg-[#e4451e]/5 hover:border-[#e4451e]/40 hover:shadow-sm"
                ]}
                data-day={day}
                type="button"
              >
                <span class="text-sm text-current opacity-75">{day}</span>
                <span class="text-lg font-semibold text-current">{dayDates[day]}</span>
              </button>
            ))}
          </div>
        </div>
        
        <div class="w-full sm:w-auto sm:ml-2 md:ml-4">
          <Button
            href="/programme.pdf"
            variant="outline"
            size="sm"
            icon="tabler:file-download"
            iconPosition="left"
            class="w-full sm:w-auto justify-center"
          >
            Programme PDF
          </Button>
        </div>
      </div>
    </div>

    <!-- Filtre par type -->
    <div class="flex flex-wrap gap-2 md:gap-3" id="types-container">
      <!-- Bouton "Tous les événements" -->
      <button
        class:list={[
          "type-filter-button group px-4 md:px-5 py-2 md:py-2.5 rounded-lg font-medium text-sm transition-all duration-300",
          "flex items-center gap-2 w-full sm:w-auto justify-center sm:justify-start mb-1 sm:mb-0",
          "bg-white border border-[#e4451e]/20 text-[#e4451e] hover:bg-[#e4451e]/5",
          "data-[state=active]:bg-[#e4451e] data-[state=active]:border-[#e4451e] data-[state=active]:text-white"
        ]}
        data-type="all"
        data-state="active"
        type="button"
      >
        <Icon name="tabler:layout-grid" class="w-5 h-5" />
        <span>Tous les événements</span>
        <span class="ml-2 px-2 py-0.5 rounded-full text-xs bg-[#e4451e]/10 text-[#e4451e] 
               group-data-[state=active]:bg-white 
               group-data-[state=active]:text-[#e4451e]"
          data-state="active"
        >
          {eventCounts.all}
        </span>
      </button>

      {eventTypes.map(type => (
        <button
          class:list={[
            "type-filter-button group px-4 md:px-5 py-2 md:py-2.5 rounded-lg font-medium text-sm transition-all duration-300",
            "flex items-center gap-2 flex-1 sm:flex-none justify-center sm:justify-start",
            "bg-white border border-[#e4451e]/20 text-[#e4451e] hover:bg-[#e4451e]/5",
            "data-[state=active]:bg-[#e4451e] data-[state=active]:border-[#e4451e] data-[state=active]:text-white"
          ]}
          data-type={type}
          data-state="inactive"
          type="button"
        >
          <Icon name={
            type === 'Conférences' ? 'tabler:presentation' :
            type === 'Ateliers' ? 'tabler:hammer' : 'tabler:building-store'
          } class="w-5 h-5" />
          <span>{type}</span>
          <span 
            class="ml-2 px-2 py-0.5 rounded-full text-xs 
                   bg-[#e4451e]/10 text-[#e4451e] 
                   group-data-[state=active]:bg-white 
                   group-data-[state=active]:text-[#e4451e]"
            data-state="inactive"
          >
            {type === 'Conférences' ? eventCounts.Conférences : 
             type === 'Ateliers' ? eventCounts.Ateliers : 
             eventCounts.Stands}
          </span>
        </button>
      ))}
    </div>
  </div>

  <!-- Pagination supérieure (identique à celle du bas) -->
  <div class="flex justify-between items-center pb-4 md:pb-6 border-b border-gray-100">
    <button class="pagination-button flex items-center gap-2 px-3 md:px-4 py-1.5 md:py-2 rounded-lg border border-gray-200 bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" id="prev-page-top" disabled>
      <Icon name="tabler:chevron-left" class="w-4 h-4 md:w-5 md:h-5" />
      <span class="hidden sm:inline">Précédent</span>
    </button>
    <span class="pagination-info text-sm text-gray-600">Page <span id="current-page-top">1</span> sur <span id="total-pages-top">1</span></span>
    <button class="pagination-button flex items-center gap-2 px-3 md:px-4 py-1.5 md:py-2 rounded-lg border border-gray-200 bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" id="next-page-top">
      <span class="hidden sm:inline">Suivant</span>
      <Icon name="tabler:chevron-right" class="w-4 h-4 md:w-5 md:h-5" />
    </button>
  </div>

  <!-- Contenu des événements -->
  <div class="space-y-4 md:space-y-6" id="events-container">
    {allEvents.map(event => (
      <EventCard event={event} />
    ))}
    
    <!-- Message "Pas d'événements correspondants" -->
    <div id="no-events-message" class="hidden py-12 px-6 bg-gray-50 rounded-xl border border-gray-100 text-center">
      <div class="flex flex-col items-center justify-center gap-4">
        <div class="w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center">
          <Icon name="tabler:calendar-off" class="w-8 h-8 text-gray-400" />
        </div>
        <div class="space-y-2">
          <h3 class="text-xl font-bold text-gray-700">Aucun événement trouvé</h3>
          <p class="text-gray-500" id="no-events-details">Pas d'événements correspondant à vos critères de recherche.</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Pagination -->
  <div class="flex justify-between items-center pt-4 md:pt-6 border-t border-gray-100">
    <button class="pagination-button flex items-center gap-2 px-3 md:px-4 py-1.5 md:py-2 rounded-lg border border-gray-200 bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" id="prev-page" disabled>
      <Icon name="tabler:chevron-left" class="w-4 h-4 md:w-5 md:h-5" />
      <span class="hidden sm:inline">Précédent</span>
    </button>
    <span class="pagination-info text-sm text-gray-600">Page <span id="current-page">1</span> sur <span id="total-pages">1</span></span>
    <button class="pagination-button flex items-center gap-2 px-3 md:px-4 py-1.5 md:py-2 rounded-lg border border-gray-200 bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" id="next-page">
      <span class="hidden sm:inline">Suivant</span>
      <Icon name="tabler:chevron-right" class="w-4 h-4 md:w-5 md:h-5" />
    </button>
  </div>
</div>

<style>
  .day-filter-button:hover {
    @apply transform -translate-y-0.5;
  }

  .day-filter-button.active {
    @apply transform -translate-y-1;
  }

  .type-filter-button[data-state="active"] {
    @apply shadow-sm;
  }

  .overflow-x-auto {
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
  }

  .overflow-x-auto::-webkit-scrollbar {
    display: none;
  }

  .accordion-content {
    transition: max-height 0.3s ease-out;
  }

  .accordion-icon {
    transition: transform 0.3s ease;
  }

  .accordion-trigger[aria-expanded="true"] .accordion-icon {
    transform: rotate(180deg);
  }

  /* Styles pour l'accordéon de description */
  .description-text {
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .description-text.expanded {
    display: block;
    line-clamp: none;
    -webkit-line-clamp: unset;
    animation: fadeIn 0.5s ease;
  }

  .description-text.not-truncated {
    padding-bottom: 0;
  }

  @keyframes fadeIn {
    from { opacity: 0.7; }
    to { opacity: 1; }
  }

  .description-container {
    position: relative;
    padding-bottom: 1.5rem;
  }

  .description-toggle {
    position: absolute;
    bottom: 0;
    right: 0;
    padding: 0.25rem 0.75rem;
    border-radius: 0.375rem;
    background-color: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(4px);
  }
  
  .description-toggle:hover {
    background-color: rgba(228, 69, 30, 0.1);
  }

  .description-icon {
    transition: transform 0.3s ease;
  }

  .description-toggle[aria-expanded="true"] .description-icon {
    transform: rotate(180deg);
  }

  /* Amélioration de la responsivité mobile */
  @media (max-width: 640px) {
    .event-card {
      @apply shadow-sm;
    }
    
    .event-card .md\:w-1\/3 {
      height: auto;
    }
    
    /* Ajustements pour les petits écrans */
    .event-card h3 {
      @apply text-xl font-bold;
    }

    .mobile-details {
      @apply text-base;
    }
  }
</style>

<script>
  let currentPage = 1;
  const itemsPerPage = parseInt(document.querySelector('[data-items-per-page]')?.getAttribute('data-items-per-page') || '10');
  let filteredEvents: HTMLElement[] = [];
  
  // Définir l'ordre des jours pour le tri
  const dayOrder = {
    'Mercredi': 1,
    'Jeudi': 2,
    'Vendredi': 3
  };

  // Fonction pour normaliser les noms des jours (supprimer les espaces, minuscules)
  function normalizeDay(day: string | null): string {
    if (!day) return '';
    return day.trim().toLowerCase();
  }
  
  function updatePagination() {
    const events = Array.from(document.querySelectorAll('.event-card')) as HTMLElement[];
    const activeDay = document.querySelector('.day-filter-button.active')?.getAttribute('data-day');
    const activeType = document.querySelector('.type-filter-button[data-state="active"]')?.getAttribute('data-type');
    
    console.log(`Filtrage - Jour actif: ${activeDay}, Type actif: ${activeType}`);
    console.log(`Nombre total d'événements à filtrer: ${events.length}`);
    
    // Compter les événements par type et par jour pour le débogage
    const typeCounts = {
      'Conférences': events.filter(e => e.getAttribute('data-type') === 'Conférences').length,
      'Ateliers': events.filter(e => e.getAttribute('data-type') === 'Ateliers').length,
      'Stands': events.filter(e => e.getAttribute('data-type') === 'Stands').length
    };
    
    const dayCounts = {
      'Mercredi': events.filter(e => normalizeDay(e.getAttribute('data-day')) === 'mercredi').length,
      'Jeudi': events.filter(e => normalizeDay(e.getAttribute('data-day')) === 'jeudi').length,
      'Vendredi': events.filter(e => normalizeDay(e.getAttribute('data-day')) === 'vendredi').length
    };
    
    console.log(`Distribution par type:`, typeCounts);
    console.log(`Distribution par jour:`, dayCounts);
    
    // Logs spécifiques pour les événements du vendredi
    console.log('=== DÉTAILS DES ÉVÉNEMENTS DU VENDREDI ===');
    events.forEach(event => {
      const eventDay = event.getAttribute('data-day');
      if (eventDay && (eventDay.includes('vendredi') || eventDay.includes('Vendredi'))) {
        console.log(`Événement vendredi trouvé: "${event.querySelector('h3')?.textContent}" - data-day="${eventDay}"`);
      }
    });
    console.log('=======================================');
    
    // Filtrer les événements
    events.forEach(event => {
      const eventType = event.getAttribute('data-type');
      const eventDay = event.getAttribute('data-day');
      
      // Vérifier si l'événement correspond aux filtres actifs
      // Utiliser la normalisation pour comparer les jours de manière plus souple
      const dayMatch = activeDay === 'all' || 
                      (activeDay && eventDay && 
                       normalizeDay(activeDay) === normalizeDay(eventDay));
      const typeMatch = activeType === 'all' || eventType === activeType;
      
      // Appliquer les deux filtres ensemble (ET logique)
      const isVisible = dayMatch && typeMatch;
      
      // Afficher ou masquer l'événement
      event.style.display = isVisible ? 'block' : 'none';
      
      // Logs de débogage améliorés pour tous les événements filtrés
      if (activeDay !== 'all') {
        console.log(`Filtrage - Événement "${event.querySelector('h3')?.textContent}": type=${eventType}, jour=${eventDay}, activeDay=${activeDay}, dayMatch=${dayMatch}, visible=${isVisible}`);
      }
    });
    
    // Mettre à jour la liste des événements filtrés (avec normalisation des jours)
    filteredEvents = events.filter(event => {
      const eventType = event.getAttribute('data-type');
      const eventDay = event.getAttribute('data-day');
      
      // Appliquer les mêmes règles de filtrage avec normalisation
      const dayMatch = activeDay === 'all' || 
                      (activeDay && eventDay && 
                       normalizeDay(activeDay) === normalizeDay(eventDay));
      const typeMatch = activeType === 'all' || eventType === activeType;
      
      return dayMatch && typeMatch;
    });

    // Tri chronologique des événements
    filteredEvents.sort((a, b) => {
      const dayA = a.getAttribute('data-day') || '';
      const dayB = b.getAttribute('data-day') || '';
      const timeA = a.getAttribute('data-time') || '';
      const timeB = b.getAttribute('data-time') || '';
      
      // Trier d'abord par jour (Mercredi, Jeudi, Vendredi)
      const dayOrderA = dayOrder[dayA as keyof typeof dayOrder] || 999; // Valeur élevée pour les jours non définis
      const dayOrderB = dayOrder[dayB as keyof typeof dayOrder] || 999;
      
      if (dayOrderA !== dayOrderB) {
        return dayOrderA - dayOrderB;
      }
      
      // Si même jour, trier par heure
      return timeA.localeCompare(timeB);
    });
    
    // Réorganiser les événements dans le DOM selon le tri
    const container = document.getElementById('events-container');
    if (container) {
      filteredEvents.forEach(event => {
        container.appendChild(event);
      });
    }

    console.log(`Nombre d'événements filtrés: ${filteredEvents.length}`);
    
    // Gérer l'affichage du message "Pas d'événements correspondants"
    const noEventsMessage = document.getElementById('no-events-message');
    const noEventsDetails = document.getElementById('no-events-details');
    
    if (filteredEvents.length === 0) {
      // Personnaliser le message en fonction des filtres sélectionnés
      let message = "Pas d'événements correspondant à vos critères de recherche.";
      
      if (activeType && activeDay && activeType !== 'all' && activeDay !== 'all') {
        message = `Pas de ${activeType.toLowerCase()} ce ${activeDay.toLowerCase()}.`;
      } else if (activeType && activeType !== 'all') {
        message = `Pas de ${activeType.toLowerCase()} dans le programme.`;
      } else if (activeDay && activeDay !== 'all') {
        message = `Pas d'événements programmés le ${activeDay.toLowerCase()}.`;
      }
      
      if (noEventsDetails) {
        noEventsDetails.textContent = message;
      }
      
      // Afficher le message
      if (noEventsMessage) {
        noEventsMessage.classList.remove('hidden');
      }
      
      // Masquer les paginations (haut et bas)
      const paginationContainers = document.querySelectorAll('.pagination-info');
      paginationContainers.forEach(container => {
        const paginationDiv = container.closest('div');
        if (paginationDiv) {
          paginationDiv.classList.add('hidden');
        }
      });
    } else {
      // Masquer le message s'il y a des événements
      if (noEventsMessage) {
        noEventsMessage.classList.add('hidden');
      }
      
      // Afficher les paginations (haut et bas)
      const paginationContainers = document.querySelectorAll('.pagination-info');
      paginationContainers.forEach(container => {
        const paginationDiv = container.closest('div');
        if (paginationDiv) {
          paginationDiv.classList.remove('hidden');
        }
      });
    }
    
    // Calculer les pages
    const totalPages = Math.max(1, Math.ceil(filteredEvents.length / itemsPerPage));
    
    // Mettre à jour les compteurs de page (haut et bas)
    document.querySelectorAll('#current-page, #current-page-top').forEach(el => {
      el.textContent = currentPage.toString();
    });
    
    document.querySelectorAll('#total-pages, #total-pages-top').forEach(el => {
      el.textContent = totalPages.toString();
    });

    // Réinitialiser la page courante si elle dépasse le nombre total de pages
    if (currentPage > totalPages) {
      currentPage = 1;
    }

    // Activer/désactiver les boutons de pagination (haut et bas)
    const prevButtons = document.querySelectorAll('#prev-page, #prev-page-top');
    const nextButtons = document.querySelectorAll('#next-page, #next-page-top');
    
    prevButtons.forEach(button => {
      (button as HTMLButtonElement).disabled = currentPage === 1;
    });
    
    nextButtons.forEach(button => {
      (button as HTMLButtonElement).disabled = currentPage === totalPages;
    });

    // Afficher les événements de la page courante
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    
    filteredEvents.forEach((event, index) => {
      event.style.display = index >= start && index < end ? 'block' : 'none';
    });
  }

  // Gestionnaires d'événements pour la pagination
  document.querySelectorAll('#prev-page, #prev-page-top').forEach(button => {
    button.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        updatePagination();
        // Faire défiler vers le haut de la liste d'événements
        document.getElementById('events-container')?.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });

  document.querySelectorAll('#next-page, #next-page-top').forEach(button => {
    button.addEventListener('click', () => {
      const totalPages = Math.ceil(filteredEvents.length / itemsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        updatePagination();
        // Faire défiler vers le haut de la liste d'événements
        document.getElementById('events-container')?.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });

  // Gestionnaires d'événements pour les filtres
  document.querySelectorAll('.day-filter-button').forEach(button => {
    button.addEventListener('click', () => {
      // Récupérer le jour sélectionné
      const selectedDay = button.getAttribute('data-day');
      console.log(`Jour sélectionné: ${selectedDay}`);
      
      // Mettre à jour l'apparence des boutons
      document.querySelectorAll('.day-filter-button').forEach(b => {
        b.classList.remove('active');
        b.classList.remove('bg-[#e4451e]', 'text-white', 'shadow-md');
        b.classList.add('bg-white', 'text-[#e4451e]');
      });
      button.classList.add('active', 'bg-[#e4451e]', 'text-white', 'shadow-md');
      button.classList.remove('bg-white', 'text-[#e4451e]');
      
      // Log des événements du jour sélectionné pour débogage
      if (selectedDay && selectedDay !== 'all') {
        console.log(`=== ÉVÉNEMENTS DU JOUR: ${selectedDay} ===`);
        const events = Array.from(document.querySelectorAll('.event-card')) as HTMLElement[];
        const eventsForDay = events.filter(e => {
          const eventDay = e.getAttribute('data-day');
          return eventDay && normalizeDay(eventDay) === normalizeDay(selectedDay);
        });
        console.log(`Nombre d'événements pour ${selectedDay}: ${eventsForDay.length}`);
        eventsForDay.forEach(event => {
          console.log(`- ${event.querySelector('h3')?.textContent} (Type: ${event.getAttribute('data-type')})`);
        });
        console.log('====================================');
      }
      
      // Réinitialiser la page et appliquer le filtrage
      currentPage = 1;
      updatePagination();
    });
  });

  document.querySelectorAll('.type-filter-button').forEach(button => {
    button.addEventListener('click', () => {
      const filterType = button.getAttribute('data-type');
      console.log(`Clic sur le filtre de type: ${filterType}`);
      
      document.querySelectorAll('.type-filter-button').forEach(b => {
        b.setAttribute('data-state', 'inactive');
        // Mettre à jour l'état de la pastille
        b.querySelector('span:last-child')?.setAttribute('data-state', 'inactive');
      });
      button.setAttribute('data-state', 'active');
      // Mettre à jour l'état de la pastille
      button.querySelector('span:last-child')?.setAttribute('data-state', 'active');
      currentPage = 1;
      updatePagination();
      
      // Vérifier les éléments après filtrage
      if (filterType === 'Conférences') {
        const conferenceCards = document.querySelectorAll('.event-card[data-type="Conférences"]');
        console.log(`Nombre de cartes de conférences dans le DOM: ${conferenceCards.length}`);
        conferenceCards.forEach(card => {
          console.log(`- Conférence: "${(card as HTMLElement).querySelector('h3')?.textContent}", jour: ${card.getAttribute('data-day')}, style.display: ${(card as HTMLElement).style.display}`);
        });
      }
    });
  });

  // Gestionnaire d'événement pour le sélecteur mobile
  document.getElementById('mobile-day-selector')?.addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement;
    const selectedDay = target.value;
    
    // Simuler un clic sur le bouton correspondant
    const dayButton = document.querySelector(`.day-filter-button[data-day="${selectedDay}"]`);
    if (dayButton) {
      (dayButton as HTMLElement).click();
    }
  });

  // Initialisation
  document.addEventListener('DOMContentLoaded', () => {
    // Activer le premier jour et "Tous les événements" par défaut
    const firstDayButton = document.querySelector('.day-filter-button[data-day="all"]');
    const allEventsButton = document.querySelector('.type-filter-button[data-type="all"]');
    
    if (firstDayButton) {
      firstDayButton.classList.add('active', 'bg-[#e4451e]', 'text-white', 'shadow-md');
      firstDayButton.classList.remove('bg-white', 'text-[#e4451e]');
    }

    if (allEventsButton) {
      allEventsButton.setAttribute('data-state', 'active');
    }
    
    // Initialiser le sélecteur mobile avec la valeur par défaut
    const mobileSelector = document.getElementById('mobile-day-selector') as HTMLSelectElement;
    if (mobileSelector) {
      mobileSelector.value = 'all';
    }
    
    updatePagination();

    // Initialiser les boutons d'accordéon une fois que les événements sont chargés
    document.querySelectorAll('.description-toggle').forEach(toggle => {
      toggle.addEventListener('click', () => {
        const container = toggle.closest('.description-container');
        const text = container?.querySelector('.description-text');
        const showMore = toggle.querySelector('.show-more');
        const showLess = toggle.querySelector('.show-less');
        
        if (toggle.getAttribute('aria-expanded') === 'false') {
          toggle.setAttribute('aria-expanded', 'true');
          text?.classList.add('expanded');
          text?.classList.remove('line-clamp-4');
          showMore?.classList.add('hidden');
          showLess?.classList.remove('hidden');
        } else {
          toggle.setAttribute('aria-expanded', 'false');
          text?.classList.remove('expanded');
          text?.classList.add('line-clamp-4');
          showMore?.classList.remove('hidden');
          showLess?.classList.add('hidden');
        }
      });
    });
    
    // Initialiser les boutons "Voir les détails" sur mobile
    document.querySelectorAll('.details-toggle').forEach(toggle => {
      toggle.addEventListener('click', () => {
        const card = toggle.closest('.event-card');
        const details = card?.querySelector('.mobile-details');
        const showDetails = toggle.querySelector('.show-details');
        const hideDetails = toggle.querySelector('.hide-details');
        const icon = toggle.querySelector('.details-icon');
        
        if (toggle.getAttribute('aria-expanded') === 'false') {
          toggle.setAttribute('aria-expanded', 'true');
          details?.classList.remove('hidden');
          showDetails?.classList.add('hidden');
          hideDetails?.classList.remove('hidden');
          icon?.classList.add('rotate-180');
        } else {
          toggle.setAttribute('aria-expanded', 'false');
          details?.classList.add('hidden');
          showDetails?.classList.remove('hidden');
          hideDetails?.classList.add('hidden');
          icon?.classList.remove('rotate-180');
        }
      });
    });
  });
</script>