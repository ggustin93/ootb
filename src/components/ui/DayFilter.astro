---
import { days, dayDates, eventTypes } from '~/data/festival';
import type { Event } from '~/types/festival';
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';

interface Props {
  events: Record<string, Event[]>;
}

const { events } = Astro.props;

const ITEMS_PER_PAGE = 6;

// Créer un tableau plat de tous les événements pour la pagination
const allEvents = Object.values(events).flat();
---

<div class="space-y-12" data-items-per-page={ITEMS_PER_PAGE}>
  <!-- Filtres -->
  <div class="space-y-6">
    <!-- Filtre par jour -->
    <div class="relative">
      <div class="flex flex-col sm:flex-row justify-between items-start mb-4 gap-4">
        <div class="flex-1 w-full">
          <!-- Version mobile: menu déroulant -->
          <div class="sm:hidden w-full">
            <select 
              id="mobile-day-selector" 
              class="w-full py-3 px-4 rounded-xl font-medium border border-[#e4451e]/20 bg-white text-[#e4451e] focus:outline-none focus:ring-2 focus:ring-[#e4451e]/30"
            >
              <option value="all">Tous les jours</option>
              {days.map((day) => (
                <option value={day}>{day}</option>
              ))}
            </select>
          </div>
          
          <!-- Version desktop: boutons -->
          <div class="hidden sm:flex overflow-x-auto gap-3 p-1" id="days-container">
            <!-- Option "Tous les jours" -->
            <button
              class:list={[
                "day-filter-button min-w-[140px] py-3 px-4 rounded-xl font-medium transition-all duration-300",
                "flex flex-col items-center justify-center border border-[#e4451e]/20",
                "active bg-[#e4451e] text-white shadow-md"
              ]}
              data-day="all"
              type="button"
            >
              <span class="text-sm text-current opacity-75">Vue globale</span>
              <span class="text-lg mt-1 font-semibold text-current">Tous les jours</span>
            </button>

            {days.map((day) => (
              <button
                class:list={[
                  "day-filter-button min-w-[140px] py-3 px-4 rounded-xl font-medium transition-all duration-300",
                  "flex flex-col items-center justify-center border border-[#e4451e]/20",
                  "bg-white text-[#e4451e] hover:bg-[#e4451e]/5 hover:border-[#e4451e]/40 hover:shadow-sm"
                ]}
                data-day={day}
                type="button"
              >
                <span class="text-sm text-current opacity-75">{day}</span>
                <span class="text-lg font-semibold text-current">{dayDates[day]}</span>
              </button>
            ))}
          </div>
        </div>
        
        <div class="w-full sm:w-auto sm:ml-4">
          <Button
            href="/programme.pdf"
            variant="outline"
            size="sm"
            icon="tabler:file-download"
            iconPosition="left"
            class="w-full sm:w-auto justify-center"
          >
            Programme PDF
          </Button>
        </div>
      </div>
    </div>

    <!-- Filtre par type -->
    <div class="flex flex-wrap gap-3" id="types-container">
      <!-- Bouton "Tous les événements" -->
      <button
        class:list={[
          "type-filter-button group px-5 py-2.5 rounded-lg font-medium text-sm transition-all duration-300",
          "flex items-center gap-2 w-full sm:w-auto justify-center sm:justify-start mb-2 sm:mb-0",
          "bg-white border border-[#e4451e]/20 text-[#e4451e] hover:bg-[#e4451e]/5",
          "data-[state=active]:bg-[#e4451e] data-[state=active]:border-[#e4451e] data-[state=active]:text-white"
        ]}
        data-type="all"
        data-state="active"
        type="button"
      >
        <Icon name="tabler:layout-grid" class="w-5 h-5" />
        <span>Tous les événements</span>
        <span class="ml-2 px-2 py-0.5 rounded-full text-xs bg-[#e4451e]/10 text-[#e4451e] group-data-[state=active]:bg-white/20 group-data-[state=active]:text-white">
          {Object.values(events).flat().filter(event => event.type === 'Conférences' || event.type === 'Ateliers').length}
        </span>
      </button>

      {eventTypes.map(type => (
        <button
          class:list={[
            "type-filter-button px-5 py-2.5 rounded-lg font-medium text-sm transition-all duration-300",
            "flex items-center gap-2 flex-1 sm:flex-none justify-center sm:justify-start",
            "bg-white border border-[#e4451e]/20 text-[#e4451e] hover:bg-[#e4451e]/5",
            "data-[state=active]:bg-[#e4451e] data-[state=active]:border-[#e4451e] data-[state=active]:text-white"
          ]}
          data-type={type}
          data-state="inactive"
          type="button"
        >
          <Icon name={
            type === 'Conférences' ? 'tabler:presentation' :
            type === 'Ateliers' ? 'tabler:hammer' : 'tabler:building-store'
          } class="w-5 h-5" />
          <span>{type}</span>
          <span 
            class="ml-2 px-2 py-0.5 rounded-full text-xs bg-[#e4451e]/10 text-[#e4451e] data-[state=active]:bg-white/20 data-[state=active]:text-white"
            data-state={type === eventTypes[0] ? 'active' : 'inactive'}
          >
            {Object.values(events).flat().filter(event => event.type === type).length}
          </span>
        </button>
      ))}
    </div>
  </div>

  <!-- Contenu des événements -->
  <div class="space-y-6" id="events-container">
    {allEvents.map(event => (
      <div 
        class="event-card group bg-white rounded-xl border border-gray-100 overflow-hidden hover:shadow-lg transition-all duration-300"
        data-type={event.type}
        data-day={event.day}
      >
        <div class="md:flex h-full">
          <!-- Image à gauche -->
          <div class="md:w-1/3 relative overflow-hidden rounded-l-xl">
            <div class="h-full transition-transform duration-500 group-hover:scale-105">
              <Image
                src={event.image}
                alt={event.title}
                class="w-full h-full object-cover"
                widths={[300, 600, 900]}
                sizes="(max-width: 640px) 100vw, (max-width: 768px) 300px, (max-width: 1024px) 600px, 900px"
                aspectRatio="4:3"
                loading="lazy"
                decoding="async"
                format="webp"
                fetchpriority="low"
              />
            </div>
          </div>

          <!-- Contenu à droite -->
          <div class="md:w-2/3 p-6 flex flex-col">
            <div class="flex-grow">
              <!-- En-tête avec heure, lieu et expert -->
              <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500 mb-3">
                <div class="flex items-center">
                  <Icon name="tabler:calendar" class="w-4 h-4 mr-1" />
                  <span>{event.day} {dayDates[event.day as keyof typeof dayDates] || ''}</span>
                </div>
                <div class="flex items-center">
                  <Icon name="tabler:clock" class="w-4 h-4 mr-1" />
                  <span>{event.time}</span>
                </div>
                <div class="flex items-center">
                  <Icon name="tabler:map-pin" class="w-4 h-4 mr-1" />
                  <span>{event.location}</span>
                </div>
                {event.speaker && (
                  <div class="flex items-center">
                    <Icon name="tabler:user" class="w-4 h-4 mr-1" />
                    <span class="font-medium text-gray-500">{event.speaker}</span>
                  </div>
                )}
              </div>

              <!-- Titre -->
              <h3 class="text-2xl font-bold text-sky-900 group-hover:text-[#e4451e] transition-colors mb-3">
                {event.title}
              </h3>

              <!-- Description -->
              <p class="text-gray-600 mb-4">{event.description}</p>
            </div>

            <div class="mt-auto">

            </div>
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Pagination -->
  <div class="flex justify-between items-center pt-6 border-t border-gray-100">
    <button class="pagination-button flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-200 bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" id="prev-page" disabled>
      <Icon name="tabler:chevron-left" class="w-5 h-5" />
      <span class="hidden sm:inline">Précédent</span>
    </button>
    <span class="pagination-info text-sm text-gray-600">Page <span id="current-page">1</span> sur <span id="total-pages">1</span></span>
    <button class="pagination-button flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-200 bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" id="next-page">
      <span class="hidden sm:inline">Suivant</span>
      <Icon name="tabler:chevron-right" class="w-5 h-5" />
    </button>
  </div>
</div>

<style>
  .day-filter-button:hover {
    @apply transform -translate-y-0.5;
  }

  .day-filter-button.active {
    @apply transform -translate-y-1;
  }

  .type-filter-button[data-state="active"] {
    @apply shadow-sm;
  }

  .overflow-x-auto {
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
  }

  .overflow-x-auto::-webkit-scrollbar {
    display: none;
  }

  .accordion-content {
    transition: max-height 0.3s ease-out;
  }

  .accordion-icon {
    transition: transform 0.3s ease;
  }

  .accordion-trigger[aria-expanded="true"] .accordion-icon {
    transform: rotate(180deg);
  }
</style>

<script>
  let currentPage = 1;
  const itemsPerPage = parseInt(document.querySelector('[data-items-per-page]')?.getAttribute('data-items-per-page') || '6');
  let filteredEvents: HTMLElement[] = [];
  
  function updatePagination() {
    const events = Array.from(document.querySelectorAll('.event-card')) as HTMLElement[];
    const activeDay = document.querySelector('.day-filter-button.active')?.getAttribute('data-day');
    const activeType = document.querySelector('.type-filter-button[data-state="active"]')?.getAttribute('data-type');
    
    // Filtrer les événements
    events.forEach(event => {
      const dayMatch = activeDay === 'all' || event.getAttribute('data-day') === activeDay;
      const typeMatch = activeType === 'all' || event.getAttribute('data-type') === activeType;
      event.style.display = dayMatch && typeMatch ? 'block' : 'none';
    });
    
    // Mettre à jour la liste des événements filtrés
    filteredEvents = events.filter(event => {
      const dayMatch = activeDay === 'all' || event.getAttribute('data-day') === activeDay;
      const typeMatch = activeType === 'all' || event.getAttribute('data-type') === activeType;
      return dayMatch && typeMatch;
    });

    // Calculer les pages
    const totalPages = Math.ceil(filteredEvents.length / itemsPerPage);
    document.getElementById('current-page')!.textContent = currentPage.toString();
    document.getElementById('total-pages')!.textContent = totalPages.toString();

    // Activer/désactiver les boutons
    const prevButton = document.getElementById('prev-page') as HTMLButtonElement;
    const nextButton = document.getElementById('next-page') as HTMLButtonElement;
    if (prevButton) prevButton.disabled = currentPage === 1;
    if (nextButton) nextButton.disabled = currentPage === totalPages;

    // Afficher les événements de la page courante
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    
    filteredEvents.forEach((event, index) => {
      event.style.display = index >= start && index < end ? 'block' : 'none';
    });
  }

  // Gestionnaires d'événements pour la pagination
  document.getElementById('prev-page')?.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      updatePagination();
    }
  });

  document.getElementById('next-page')?.addEventListener('click', () => {
    const totalPages = Math.ceil(filteredEvents.length / itemsPerPage);
    if (currentPage < totalPages) {
      currentPage++;
      updatePagination();
    }
  });

  // Gestionnaires d'événements pour les filtres
  document.querySelectorAll('.day-filter-button').forEach(button => {
    button.addEventListener('click', () => {
      document.querySelectorAll('.day-filter-button').forEach(b => {
        b.classList.remove('active');
        b.classList.remove('bg-[#e4451e]', 'text-white', 'shadow-md');
        b.classList.add('bg-white', 'text-[#e4451e]');
      });
      button.classList.add('active', 'bg-[#e4451e]', 'text-white', 'shadow-md');
      button.classList.remove('bg-white', 'text-[#e4451e]');
      currentPage = 1;
      updatePagination();
    });
  });

  document.querySelectorAll('.type-filter-button').forEach(button => {
    button.addEventListener('click', () => {
      document.querySelectorAll('.type-filter-button').forEach(b => {
        b.setAttribute('data-state', 'inactive');
        // Mettre à jour l'état de la pastille
        b.querySelector('span:last-child')?.setAttribute('data-state', 'inactive');
      });
      button.setAttribute('data-state', 'active');
      // Mettre à jour l'état de la pastille
      button.querySelector('span:last-child')?.setAttribute('data-state', 'active');
      currentPage = 1;
      updatePagination();
    });
  });

  // Gestionnaire d'événement pour le sélecteur mobile
  document.getElementById('mobile-day-selector')?.addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement;
    const selectedDay = target.value;
    
    // Simuler un clic sur le bouton correspondant
    const dayButton = document.querySelector(`.day-filter-button[data-day="${selectedDay}"]`);
    if (dayButton) {
      (dayButton as HTMLElement).click();
    }
  });

  // Initialisation
  document.addEventListener('DOMContentLoaded', () => {
    // Activer le premier jour et "Tous les événements" par défaut
    const firstDayButton = document.querySelector('.day-filter-button[data-day="all"]');
    const allEventsButton = document.querySelector('.type-filter-button[data-type="all"]');
    
    if (firstDayButton) {
      firstDayButton.classList.add('active', 'bg-[#e4451e]', 'text-white', 'shadow-md');
      firstDayButton.classList.remove('bg-white', 'text-[#e4451e]');
    }

    if (allEventsButton) {
      allEventsButton.setAttribute('data-state', 'active');
    }
    
    // Initialiser le sélecteur mobile avec la valeur par défaut
    const mobileSelector = document.getElementById('mobile-day-selector') as HTMLSelectElement;
    if (mobileSelector) {
      mobileSelector.value = 'all';
    }
    
    updatePagination();
  });
</script>