---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/common/LogoWithIcon.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface ActionConfig extends CallToAction {
  mode?: 'festival' | 'community' | 'custom';
  festivalButton?: CallToAction;
  communityButton?: CallToAction;
  customButton?: CallToAction;
}

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
  title?: string;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  mobileLinks?: Array<{ title: string; links: Array<Link> }>;
  actions?: Array<ActionConfig>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  mobileLinks = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-[200] flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out bg-white/90 backdrop-blur-sm',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-3 mx-auto max-w-7xl px-4 sm:px-6',
      {
        'md:flex md:justify-between': position !== 'center',
      },
      {
        'md:grid md:grid-cols-3 md:items-center': position === 'center',
      }
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <button 
          type="button" 
          class="flex flex-col h-12 w-12 rounded justify-center items-center cursor-pointer group hover:border-2 hover:border-[--ootb-turquoise] hover:bg-[color-mix(in_srgb,var(--ootb-turquoise),transparent_80%)] data-[menu-open=true]:border-2 data-[menu-open=true]:border-[--ootb-turquoise] data-[menu-open=true]:bg-[color-mix(in_srgb,var(--ootb-turquoise),transparent_80%)] transition-all duration-300" 
          aria-label="Toggle Menu" 
          data-aw-toggle-menu
        >
          <Icon name="tabler:menu-2" class="w-6 h-6 group-hover:text-[--ootb-turquoise] transition-colors duration-300" />
        </button>
      </div>
    </div>
    <nav
      class="items-center w-full md:w-auto hidden md:flex md:mx-5 text-default md:overflow-y-visible md:overflow-x-auto md:justify-self-center"
      aria-label="Main navigation"
    >
      <ul class="hidden md:flex md:flex-row md:self-center w-full md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium md:pl-2">
        {
          links.map(({ text, href, links }, index) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class:list={[
                      "hover:text-[--ootb-turquoise] dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap transition-all duration-300 rounded-md",
                      { "ml-2": index === 0 }
                    ]}
                  >
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline" />
                  </button>
                  <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b md:hover:bg-[color-mix(in_srgb,var(--ootb-turquoise),transparent_70%)] hover:text-gray-900 dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap transition-all duration-300',
                            { 'aw-link-active text-[--ootb-turquoise] bg-[color-mix(in_srgb,var(--ootb-turquoise),transparent_80%)]': href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-[--ootb-turquoise] dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap transition-all duration-300 rounded-md',
                    { 'ml-2': index === 0 },
                    { 'aw-link-active text-[--ootb-turquoise]': href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:w-auto md:static justify-end md:justify-self-end',
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((actionConfig) => {
                // Système de toggle intelligent avec support du mode custom
                let activeButton;
                
                if (actionConfig.mode === 'festival' && actionConfig.festivalButton) {
                  activeButton = actionConfig.festivalButton;
                } else if (actionConfig.mode === 'community' && actionConfig.communityButton) {
                  activeButton = actionConfig.communityButton;
                } else if (actionConfig.mode === 'custom' && actionConfig.customButton) {
                  activeButton = actionConfig.customButton;
                }
                
                if (activeButton) {
                  return (
                    <Button 
                      {...activeButton}
                      class="text-[--ootb-turquoise] border-[--ootb-turquoise] hover:bg-[color-mix(in_srgb,var(--ootb-turquoise),transparent_15%)] hover:text-white transition-all duration-300"
                    >
                      {activeButton.text}
                    </Button>
                  );
                }
              })}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>

{/* Menu Mobile */}
<div 
  class="md:hidden fixed inset-0 z-[201] bg-white/90 backdrop-blur-sm hidden"
  data-aw-toggle-menu-panel
>
  <div class="w-full h-full overflow-y-auto">
    <div class="w-full text-center p-4">
      <div class="flex justify-end mb-4">
        <button 
          type="button" 
          class="flex flex-col h-12 w-12 rounded justify-center items-center cursor-pointer group hover:border-2 hover:border-[--ootb-turquoise] hover:bg-[color-mix(in_srgb,var(--ootb-turquoise),transparent_80%)] data-[menu-open=true]:border-2 data-[menu-open=true]:border-[--ootb-turquoise] data-[menu-open=true]:bg-[color-mix(in_srgb,var(--ootb-turquoise),transparent_80%)] transition-all duration-300" 
          aria-label="Close Menu" 
          data-aw-toggle-menu
        >
          <Icon name="tabler:x" class="w-6 h-6 group-hover:text-[--ootb-turquoise] transition-colors duration-300" />
        </button>
      </div>

      {mobileLinks.map((section) => (
        <div class="mb-8">
          <h3 class="font-bold text-xl mb-4 px-4 text-[--ootb-turquoise]">
            {section.title}
          </h3>
          <ul>
            {section.links.map(({ text, href }) => (
              <li>
                <a
                  class:list={[
                    'block py-3 px-4 hover:text-[--ootb-turquoise] hover:bg-[color-mix(in_srgb,var(--ootb-turquoise),transparent_80%)] hover:text-gray-900 transition-all duration-300 rounded-md',
                    { 'text-[--ootb-turquoise]': href === currentPath }
                  ]}
                  href={href}
                >
                  {text}
                </a>
              </li>
            ))}
          </ul>
        </div>
      ))}

      {/* Boutons d'action pour mobile */}
      {actions?.length && (
        <div class="mt-8 pt-8 border-t border-gray-200">
          {actions.map((actionConfig) => {
            // Même système de toggle intelligent pour mobile
            let activeButton;
            
            if (actionConfig.mode === 'festival' && actionConfig.festivalButton) {
              activeButton = actionConfig.festivalButton;
            } else if (actionConfig.mode === 'community' && actionConfig.communityButton) {
              activeButton = actionConfig.communityButton;
            } else if (actionConfig.mode === 'custom' && actionConfig.customButton) {
              activeButton = actionConfig.customButton;
            }
            
            if (activeButton) {
              return (
                <Button 
                  {...activeButton}
                  class="w-full mb-4 last:mb-0 text-[--ootb-turquoise] border-[--ootb-turquoise] hover:bg-[color-mix(in_srgb,var(--ootb-turquoise),transparent_15%)] hover:text-white transition-all duration-300"
                >
                  {activeButton.text}
                </Button>
              );
            }
          })}
        </div>
      )}
    </div>
  </div>
</div>

<script>
  document.addEventListener('click', (e) => {
    const panel = document.querySelector('[data-aw-toggle-menu-panel]');
    const button = (e.target as Element).closest('[data-aw-toggle-menu]');
    
    if (button) {
      panel?.classList.toggle('hidden');
    } else if (!panel?.contains(e.target as Node)) {
      panel?.classList.add('hidden');
    }
  });
</script>