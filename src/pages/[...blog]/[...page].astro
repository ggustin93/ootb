---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import Layout from '~/layouts/PageLayout.astro';
import BlogList from '~/components/blog/List.astro';
import Pagination from '~/components/blog/Pagination.astro';
import { findTags } from '~/utils/blog';

import { blogListRobots, getStaticPathsBlogList } from '~/utils/blog';
import { CONTENT_TYPES } from '~/config/content-types';
import { Image } from 'astro:assets';
import GradientHeroSection from '~/components/sections/GradientHeroSection.astro';
import TagSearch from '~/components/common/TagSearch.astro';
import ScrollDownArrow from '~/components/ui/ScrollDownArrow.astro';
import CategoryFilters from '~/components/blog/CategoryFilters.astro';
import CategoryButton from '~/components/blog/CategoryButton.astro';

// Import des données TinaCMS
import sharedData from '~/content/blog/blog.json';
import ootbLogo from '~/assets/images/ootb-logo.svg';

export const prerender = true;

export const getStaticPaths = (async ({ paginate }) => {
  return await getStaticPathsBlogList({ paginate });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page } = Astro.props as Props;
const currentPage = page.currentPage ?? 1;

const allTags = await findTags().then(tags => {
  const uniqueTags = new Map();
  tags.forEach(tag => {
    if (!uniqueTags.has(tag.slug)) {
      uniqueTags.set(tag.slug, tag);
    }
  });
  return Array.from(uniqueTags.values());
});

// Limiter le nombre de tags affichés initialement
const initialTags = allTags.slice(0, 15);

const metadata = {
  title: `Blog${currentPage > 1 ? ` — Page ${currentPage}` : ''}`,
  robots: {
    index: blogListRobots?.index && currentPage === 1,
    follow: blogListRobots?.follow,
  },
  openGraph: {
    type: 'blog',
  },
};

// Extraction des données
const { hero } = sharedData;
const { filters, contentSection, search } = hero;

---

<Layout metadata={metadata}>
  <GradientHeroSection>
    <!-- Éléments décoratifs flottants -->
    <div class="absolute inset-0 overflow-hidden">
      <!-- Formes géométriques subtiles -->
      <div class="absolute w-32 h-32 rounded-full bg-white/10 blur-2xl -top-8 -left-8 animate-float"></div>
      <div class="absolute w-48 h-48 rounded-full bg-white/10 blur-3xl bottom-32 right-16 animate-float-delayed"></div>
    </div>

    <div class="relative z-10 container mx-auto px-4 pt-16 pb-8">
      <div class="max-w-6xl mx-auto">
        <div class="grid md:grid-cols-12 gap-12 items-center">
          <!-- Mascotte (cachée sur mobile, visible sur desktop) -->
          <div class="hidden md:block relative order-2 md:order-1 md:col-span-5 -mt-8">
            <div class="relative w-full max-w-[500px] mx-auto transform hover:-rotate-2 transition-transform duration-300">
              <Image
                src={ootbLogo}
                alt="Out of the Books Mascotte"
                class="w-full h-full object-contain drop-shadow-xl"
                widths={[500]}
                sizes="500px"
                loading="eager"
              />
            </div>
          </div>

          <!-- Contenu textuel -->
          <div class="text-center md:text-left order-1 md:order-2 md:col-span-7">
            <h1 class="font-heading text-4xl md:text-5xl font-bold text-white mb-6">
              {hero.title}
            </h1>
            
            <p class="text-xl text-white/90 font-light mb-8 max-w-xl mx-auto md:mx-0">
              {hero.description}
            </p>

            <!-- Barre de recherche intelligente -->
            <TagSearch tags={initialTags} placeholder={search.placeholder} />

            <!-- Séparateur discret -->
            <div class="mb-4 text-center md:text-left">
              <span class="text-white/40 text-xs">{filters.orLabel}</span>
            </div>

            <!-- Label pour les filtres -->
            <div class="text-white/90 text-sm uppercase tracking-wider mb-3 font-medium text-center md:text-left">
              {filters.labels.default}
            </div>

            <!-- Filtres principaux avec optimisation mobile - garder le texte -->
            <div class="flex flex-wrap gap-2 sm:gap-3 justify-center md:justify-start mb-4">
              <CategoryButton 
                href="/blog"
                icon={CONTENT_TYPES.all.icon}
                label={CONTENT_TYPES.all.shortLabel}
                isActive={true}
              />

              {Object.entries(CONTENT_TYPES)
                .filter(([key]) => key !== 'all')
                .map(([key, config]) => (
                  <CategoryButton 
                    href={`/category/${key}`}
                    icon={config.icon}
                    label={config.shortLabel}
                    color={config.color}
                  />
                ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </GradientHeroSection>

  <ScrollDownArrow 
    targetId="blog-content" 
    label="Voir les contenus"
    position="left-[20%] bottom-[20%]"
    class="text-white hidden md:flex"
  />

  <!-- Section contenu -->
  <section id="blog-content" class="bg-white">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto">
        <!-- Filtres minimalistes -->
        <div class="flex flex-col sm:flex-row sm:items-center gap-4 sm:gap-6 sm:justify-between mb-8">
          <h2 class="hidden sm:block text-2xl sm:text-3xl font-body font-semibold">
            {contentSection.title}
          </h2>
          <CategoryFilters blogConfig={sharedData} />
        </div>

        <BlogList posts={page.data} />
        <div class="mt-12">
          <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
  /* Animations raffinées */
  details[open] > div {
    animation: slideDown 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-20px);
    }
  }

  @keyframes float-delayed {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-15px);
    }
  }

  .animate-fadeIn {
    animation: fadeIn 0.5s ease-out;
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .animate-float-delayed {
    animation: float-delayed 8s ease-in-out infinite;
    animation-delay: -2s;
  }

  /* Transitions douces */
  a, button, input {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Style pour la barre de défilement des suggestions */
  #search-suggestions .max-h-64 {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
  }

  #search-suggestions .max-h-64::-webkit-scrollbar {
    width: 6px;
  }

  #search-suggestions .max-h-64::-webkit-scrollbar-track {
    background: transparent;
  }

  #search-suggestions .max-h-64::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }

  /* Style pour les boutons de filtre */
  .group:hover {
    ring-color: var(--hover-ring-color) !important;
  }
</style>