---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';
import { blogCategoryRobots, getStaticPathsBlogCategory, findTags } from '~/utils/blog';

import Layout from '~/layouts/PageLayout.astro';
import BlogList from '~/components/blog/List.astro';
import Headline from '~/components/blog/Headline.astro';
import Pagination from '~/components/blog/Pagination.astro';
import { Icon } from 'astro-icon/components';

export const prerender = true;

export const getStaticPaths = (async ({ paginate }) => {
  return await getStaticPathsBlogCategory({ paginate });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths> & { category: Record<string, string> };

const { page, category } = Astro.props as Props;
const currentPage = page.currentPage ?? 1;

const allTags = await findTags().then(tags => {
  const uniqueTags = new Map();
  tags.forEach(tag => {
    if (!uniqueTags.has(tag.slug)) {
      uniqueTags.set(tag.slug, tag);
    }
  });
  return Array.from(uniqueTags.values());
});

// Limiter le nombre de tags affichés initialement
const MAX_VISIBLE_TAGS = 15;
const initialTags = allTags.slice(0, MAX_VISIBLE_TAGS);

// Configuration des filtres
const FILTER_TYPES = {
  actualite: {
    icon: 'tabler:news',
    label: 'ACTUALITÉS',
  },
  fiche: {
    icon: 'tabler:file-text',
    label: 'FICHES PÉDAGOGIQUES',
  },
  live: {
    icon: 'tabler:brand-facebook',
    label: 'LIVES FACEBOOK',
  },
  podcast: {
    icon: 'tabler:brand-spotify',
    label: 'PODCASTS',
  },
  tv: {
    icon: 'tabler:device-tv',
    label: 'ÉMISSIONS TV',
  },
  premium: {
    icon: 'tabler:crown',
    label: 'CONTENUS PREMIUM',
  }
} as const;

const metadata = {
  title: `Category '${category.title}' ${currentPage > 1 ? ` — Page ${currentPage}` : ''}`,
  robots: {
    index: blogCategoryRobots?.index,
    follow: blogCategoryRobots?.follow,
  },
};
---

<Layout metadata={metadata}>
  <section class="px-6 sm:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
    <Headline
      subtitle="Découvrez nos podcasts, vidéos pédagogiques, fiches pratiques et contenus premium pour transformer l'éducation"
    >
      Nos Contenus
    </Headline>

    <div class="mb-12 flex flex-col items-center gap-8">
      <!-- Filtres principaux avec design épuré -->
      <div class="w-full">
        <div class="flex items-center gap-2 text-gray-600 text-sm mb-6 justify-center">
          <Icon name="tabler:filter" class="w-5 h-5" />
          <span class="font-medium capitalize">Filtrer par type de contenu</span>
        </div>
        <div class="flex flex-wrap items-center justify-center gap-4">
          {Object.entries(FILTER_TYPES).map(([key, config]) => {
            const variants = {
              actualite: 'border-gray-600 hover:bg-gray-600 text-gray-600',
              fiche: 'border-[#0EA5E9] hover:bg-[#0EA5E9] text-[#0EA5E9]',
              live: 'border-[#1877F2] hover:bg-[#1877F2] text-[#1877F2]',
              podcast: 'border-[#8d216d] hover:bg-[#8d216d] text-[#8d216d]',
              tv: 'border-[#22C55E] hover:bg-[#22C55E] text-[#22C55E]',
              premium: 'border-[#F43F5E] hover:bg-[#F43F5E] text-[#F43F5E]'
            };

            const isActive = key.toLowerCase() === category.slug?.toLowerCase();
            console.log('Category:', {
              key,
              categorySlug: category.slug,
              isActive
            });
            const activeClass = isActive ? {
              actualite: 'bg-gray-600',
              fiche: 'bg-[#0EA5E9]',
              live: 'bg-[#1877F2]',
              podcast: 'bg-[#8d216d]',
              tv: 'bg-[#22C55E]',
              premium: 'bg-[#F43F5E]'
            }[key] : '';

            return (
              <a
                href={`/category/${key}`}
                class:list={[
                  'group relative inline-flex items-center gap-2',
                  'transform skew-x-[-12deg]',
                  'border-2 transition-all duration-300',
                  'hover:-translate-y-0.5',
                  'shadow-sm hover:shadow-md',
                  'px-6 py-2.5',
                  variants[key as keyof typeof variants],
                  'hover:text-white',
                  isActive ? activeClass : 'bg-white dark:bg-gray-800',
                  isActive && '!text-white'
                ]}
              >
                <span class="transform skew-x-[12deg] flex items-center gap-2.5">
                  <Icon 
                    name={config.icon} 
                    class:list={[
                      'w-5 h-5 transition-colors duration-300',
                      isActive ? 'text-white' : 'group-hover:text-white'
                    ]} 
                  />
                  <span class:list={[
                    'font-bebas-neue italic font-extrabold uppercase tracking-wide',
                    'text-sm transition-colors duration-300',
                    isActive ? 'text-white' : 'group-hover:text-white'
                  ]}>
                    {config.label}
                  </span>
                </span>
              </a>
            );
          })}
        </div>
      </div>

      <!-- Filtres par thématique avec design simplifié -->
      <div class="w-full">
        <details class="group w-full max-w-2xl mx-auto">
          <summary class="flex items-center justify-between w-full px-5 py-3.5 bg-white dark:bg-gray-800 rounded-xl cursor-pointer border border-gray-200 dark:border-gray-700 hover:border-primary transition-colors">
            <div class="flex items-center gap-3">
              <Icon name="tabler:tags" class="w-5 h-5 text-primary/70" />
              <span class="font-medium text-gray-700 dark:text-gray-200 capitalize">Filtrer par thématique</span>
            </div>
            <Icon 
              name="tabler:chevron-down" 
              class="w-5 h-5 text-primary/70 transform transition-transform duration-300 group-open:rotate-180" 
            />
          </summary>

          <div class="mt-6 px-2">
            <!-- Barre de recherche modernisée -->
            <div class="max-w-md mx-auto mb-8">
              <div class="relative">
                <input
                  type="search"
                  id="tag-search"
                  placeholder="Rechercher une thématique..."
                  class="w-full px-5 py-3 pl-11 text-gray-700 bg-white border border-gray-200 rounded-xl focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/10 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-300 transition-all duration-300"
                />
                <Icon 
                  name="tabler:search" 
                  class="absolute left-4 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" 
                />
              </div>
            </div>

            <!-- Tags simplifiés -->
            <div class="flex flex-wrap justify-center gap-2" id="tags-container">
              {initialTags.map((tag) => (
                <a
                  href={`/tag/${tag.slug}`}
                  class:list={[
                    'inline-flex items-center gap-1.5 px-3 py-1',
                    'bg-gray-100 dark:bg-gray-800',
                    'rounded-full',
                    'border border-gray-200 dark:border-gray-700',
                    'transition-all duration-300',
                    'hover:border-primary hover:bg-primary/5',
                    'hover:-translate-y-0.5 hover:shadow-sm'
                  ]}
                  data-tag-name={tag.title.toLowerCase()}
                >
                  <Icon 
                    name="tabler:tag" 
                    class="w-3.5 h-3.5 text-gray-500 group-hover:text-primary" 
                  />
                  <span class="text-sm text-gray-700 dark:text-gray-300">
                    {tag.title}
                  </span>
                </a>
              ))}
            </div>
          </div>
        </details>
      </div>
    </div>

    <BlogList posts={page.data} />
    <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
  </section>
</Layout>

<script>
  // Logique de recherche de tags
  const searchInput = document.getElementById('tag-search') as HTMLInputElement;
  const tagsContainer = document.getElementById('tags-container');
  const tags = tagsContainer?.getElementsByTagName('a');

  searchInput?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    
    if (tags) {
      Array.from(tags).forEach(tag => {
        const tagName = tag.getAttribute('data-tag-name');
        if (tagName?.includes(searchTerm)) {
          tag.style.display = '';
        } else {
          tag.style.display = 'none';
        }
      });
    }
  });
</script>

<style>
  /* Animations raffinées */
  details[open] > div {
    animation: slideDown 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Transitions douces */
  a, button {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
</style>
