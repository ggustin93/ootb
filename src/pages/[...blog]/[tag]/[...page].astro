---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';
import { blogTagRobots, getStaticPathsBlogTag, findTags } from '~/utils/blog';
import GradientHeroSection from '~/components/sections/GradientHeroSection.astro';
import Layout from '~/layouts/PageLayout.astro';
import BlogList from '~/components/blog/List.astro';
import Pagination from '~/components/blog/Pagination.astro';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import TagSearch from '~/components/common/TagSearch.astro';

export const prerender = true;

export const getStaticPaths = (async ({ paginate }) => {
  return await getStaticPathsBlogTag({ paginate });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths> & {
  category?: { slug: string; title: string; }; // Ajout de la catégorie optionnelle
};

const { page, tag, category } = Astro.props as Props;
const currentPage = page.currentPage ?? 1;

const allTags = await findTags().then(tags => {
  const uniqueTags = new Map();
  tags.forEach(tag => {
    if (!uniqueTags.has(tag.slug)) {
      uniqueTags.set(tag.slug, tag);
    }
  });
  return Array.from(uniqueTags.values());
});

// Limiter le nombre de tags affichés initialement
const MAX_VISIBLE_TAGS = 15;
const initialTags = allTags.slice(0, MAX_VISIBLE_TAGS);

// Configuration des filtres
const FILTER_TYPES = {
  all: {
    icon: 'tabler:layout-grid',
    label: 'Tous',
  },
  actualite: {
    icon: 'tabler:news',
    label: 'Actualités',
  },
  fiche: {
    icon: 'tabler:file-text',
    label: 'Fiches',
  },
  live: {
    icon: 'tabler:brand-facebook',
    label: 'Lives',
  },
  podcast: {
    icon: 'tabler:brand-spotify',
    label: 'Podcasts',
  },
  tv: {
    icon: 'tabler:device-tv',
    label: 'TV',
  },
  premium: {
    icon: 'tabler:crown',
    label: 'Premium',
  }
} as const;

const metadata = {
  title: `Posts by tag '${tag.title}'${currentPage > 1 ? ` — Page ${currentPage} ` : ''}`,
  robots: {
    index: blogTagRobots?.index,
    follow: blogTagRobots?.follow,
  },
};
---

<Layout metadata={metadata}>
  <GradientHeroSection>
    <div class="relative z-10 container mx-auto px-4 pt-16 pb-8">
      <div class="max-w-6xl mx-auto">
        <div class="grid md:grid-cols-12 gap-12 items-center">
          <!-- Mascotte (1/3 de l'espace) -->
          <div class="relative hidden md:block order-1 md:col-span-5 -mt-8">
            <div class="relative w-full max-w-[500px] transform hover:-rotate-2 transition-transform duration-300">
              <Image
                src={import('~/assets/images/ootb-logo.svg')}
                alt="Out of the Books Mascotte"
                class="w-full h-full object-contain drop-shadow-xl"
                widths={[500]}
                sizes="500px"
                loading="eager"
              />
            </div>
          </div>

          <!-- Contenu textuel (2/3 de l'espace) -->
          <div class="text-center md:text-left order-2 md:col-span-7">
            <h1 class="font-heading text-4xl md:text-5xl font-bold text-white mb-6">
              Nos contenus
            </h1>
            <p class="text-xl text-white/90 font-light mb-8 max-w-xl">
              Découvrez nos podcasts, vidéos pédagogiques, fiches pratiques et contenus premium pour transformer l'éducation
            </p>

            <!-- Barre de recherche intelligente -->
            <TagSearch tags={initialTags} />

            <!-- Séparateur discret -->
            <div class="mb-4 text-center">
              <span class="text-white/40 text-xs">ou</span>
            </div>

            <!-- Label pour les filtres -->
            <div class="text-white/90 text-sm uppercase tracking-wider mb-3 font-medium">Filtrer par type de contenu :</div>

            <!-- Filtres principaux -->
            <div class="flex flex-wrap gap-3 justify-center md:justify-start">
              {/* Bouton "TOUS" toujours présent */}
              <a
                href="/blog"
                class:list={[
                  'group relative inline-flex items-center gap-2',
                  'transform skew-x-[-12deg]',
                  'transition-all duration-300',
                  'px-6 py-2.5',
                  'ring-2',
                  'transition-all duration-300',
                  !tag.slug ? [
                    'bg-white text-gray-800 ring-gray-800',
                    'scale-105',
                    'shadow-lg'
                  ] : [
                    'bg-gray-800 text-white ring-gray-800 hover:bg-white hover:text-gray-800',
                    'hover:-translate-y-1'
                  ]
                ]}
              >
                <span class="transform skew-x-[12deg] flex items-center gap-2.5">
                  <Icon 
                    name="tabler:layout-grid" 
                    class="w-4 h-4 transition-transform duration-300 group-hover:scale-110" 
                  />
                  <span class="text-sm font-bold uppercase tracking-wide">Tous</span>
                </span>
              </a>

              {/* Autres filtres */}
              {Object.entries(FILTER_TYPES).filter(([key]) => key !== 'all').map(([key, config]) => (
                <a
                  href={`/category/${key.toLowerCase()}`}
                  class:list={[
                    'group relative inline-flex items-center gap-2',
                    'transform skew-x-[-12deg]',
                    'transition-all duration-300',
                    'px-6 py-2.5',
                    'ring-2',
                    {
                      'bg-[--content-actualite] text-white ring-[--content-actualite] hover:bg-white hover:text-[--content-actualite]': key === 'actualite',
                      'bg-[--content-fiche] text-white ring-[--content-fiche] hover:bg-white hover:text-[--content-fiche]': key === 'fiche',
                      'bg-[--content-live] text-white ring-[--content-live] hover:bg-white hover:text-[--content-live]': key === 'live',
                      'bg-[--content-podcast] text-white ring-[--content-podcast] hover:bg-white hover:text-[--content-podcast]': key === 'podcast',
                      'bg-[--content-tv] text-white ring-[--content-tv] hover:bg-white hover:text-[--content-tv]': key === 'tv',
                      'bg-[--content-premium] text-white ring-[--content-premium] hover:bg-white hover:text-[--content-premium]': key === 'premium',
                    },
                    'hover:-translate-y-1'
                  ]}
                >
                  <span class="transform skew-x-[12deg] flex items-center gap-2.5">
                    <Icon 
                      name={config.icon} 
                      class="w-4 h-4 transition-transform duration-300 group-hover:scale-110" 
                    />
                    <span class="text-sm font-bold uppercase tracking-wide">{config.label}</span>
                  </span>
                </a>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </GradientHeroSection>

  <!-- Section contenu -->
  <section class="py-12 bg-white">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto">
        <h2 class="text-3xl font-body font-semibold mb-12">
          {tag.slug 
            ? (
              <span class="inline-flex items-center gap-3">
                <span class="text-gray-600">Contenus liés à</span>
                <span class="inline-flex items-center gap-2 bg-gray-100 px-4 py-2 rounded-full border border-gray-200">
                  <Icon name="tabler:tag" class="w-5 h-5 text-gray-500" />
                  <span class="text-gray-800 font-medium">{tag.title}</span>
                </span>
              </span>
            )
            : "Tous"
          }
        </h2>
        <BlogList posts={page.data} />
        <div class="mt-12">
          <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
  /* Animations raffinées */
  details[open] > div {
    animation: slideDown 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Transitions douces */
  a, button {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
</style>

