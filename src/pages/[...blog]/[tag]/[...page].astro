---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';
import { blogTagRobots, getStaticPathsBlogTag, findTags } from '~/utils/blog';
import { CONTENT_TYPES } from '~/config/content-types';
import GradientHeroSection from '~/components/sections/GradientHeroSection.astro';
import Layout from '~/layouts/PageLayout.astro';
import BlogList from '~/components/blog/List.astro';
import Pagination from '~/components/blog/Pagination.astro';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import TagSearch from '~/components/common/TagSearch.astro';
import ScrollDownArrow from '~/components/ui/ScrollDownArrow.astro';
import CategoryButton from '~/components/blog/CategoryButton.astro';
import CategoryFilters from '~/components/blog/CategoryFilters.astro';

// Import des données TinaCMS
import tagData from '~/content/blog/blog.json';
import ootbLogo from '~/assets/images/ootb-logo.svg';

export const prerender = true;

export const getStaticPaths = (async ({ paginate }) => {
  return await getStaticPathsBlogTag({ paginate });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths> & {
  tag: { slug: string; title: string; };
};

const { page, tag } = Astro.props as Props;
const currentPage = page.currentPage ?? 1;

const allTags = await findTags().then(tags => {
  const uniqueTags = new Map();
  tags.forEach(tag => {
    if (!uniqueTags.has(tag.slug)) {
      uniqueTags.set(tag.slug, tag);
    }
  });
  return Array.from(uniqueTags.values());
});

// Limiter le nombre de tags affichés initialement
const MAX_VISIBLE_TAGS = 15;
const initialTags = allTags.slice(0, MAX_VISIBLE_TAGS);

// Extraction correcte des données du JSON
const { hero } = tagData;
const { filters, search } = hero;

const metadata = {
  title: `Posts by tag '${tag.title}'${currentPage > 1 ? ` — Page ${currentPage} ` : ''}`,
  robots: {
    index: blogTagRobots?.index,
    follow: blogTagRobots?.follow,
  },
};
---

<Layout metadata={metadata}>
  <GradientHeroSection>
    <!-- Éléments décoratifs flottants -->
    <div class="absolute inset-0 overflow-hidden">
      <!-- Formes géométriques subtiles -->
      <div class="absolute w-32 h-32 rounded-full bg-white/10 blur-2xl -top-8 -left-8 animate-float"></div>
      <div class="absolute w-48 h-48 rounded-full bg-white/10 blur-3xl bottom-32 right-16 animate-float-delayed"></div>
    </div>

    <div class="relative z-10 container mx-auto px-4 pt-16 pb-8">
      <div class="max-w-6xl mx-auto">
        <div class="grid md:grid-cols-12 gap-12 items-center">
          <!-- Mascotte (cachée sur mobile, visible sur desktop) -->
          <div class="hidden md:block relative order-2 md:order-1 md:col-span-5 -mt-8">
            <div class="relative w-full max-w-[500px] mx-auto transform hover:-rotate-2 transition-transform duration-300">
              <Image
                src={ootbLogo}
                alt="Out of the Books Mascotte"
                class="w-full h-full object-contain drop-shadow-xl"
                widths={[500]}
                sizes="500px"
                loading="eager"
              />
            </div>
          </div>

          <!-- Contenu textuel -->
          <div class="text-center md:text-left order-1 md:order-2 md:col-span-7">
            <h1 class="font-heading text-4xl md:text-5xl font-bold text-white mb-6">
              {hero.title}
            </h1>
            <p class="text-xl text-white/90 font-light mb-8 max-w-xl mx-auto md:mx-0">
              {hero.description}
            </p>

            <!-- Barre de recherche intelligente -->
            <TagSearch tags={initialTags} placeholder={search.placeholder} />

            <!-- Séparateur discret -->
            <div class="mb-4 text-center md:text-left">
              <span class="text-white/40 text-xs">{filters.orLabel}</span>
            </div>

            <!-- Label pour les filtres -->
            <div class="text-white/90 text-sm uppercase tracking-wider mb-3 font-medium text-center md:text-left">
              {filters.labels.default}
            </div>

            <!-- Filtres -->
            <div class="flex flex-wrap gap-2 sm:gap-3 justify-center md:justify-start mb-4">
              <CategoryButton 
                href="/blog"
                icon={CONTENT_TYPES.all.icon}
                label={CONTENT_TYPES.all.shortLabel}
                isActive={!tag}
                withAnchor={true}
              />

              {Object.entries(CONTENT_TYPES)
                .filter(([key]) => key !== 'all')
                .map(([key, config]) => (
                  <CategoryButton 
                    href={`/category/${key}`}
                    icon={config.icon}
                    label={config.shortLabel}
                    color={config.color}
                    withAnchor={true}
                  />
                ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </GradientHeroSection>

  <ScrollDownArrow 
    targetId="category-content" 
    label={`Voir les contenus liés à "${tag.title}"`}
    position="left-[20%] bottom-[20%]"
    class="text-[--ootb-yellow] hidden md:flex"
    hideOnMobile={true}
  />

  <!-- Section contenu -->
  <section id="category-content" class="py-6 sm:py-8 bg-white">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto">
        <!-- Filtres minimalistes -->
        <div class="flex flex-col sm:flex-row sm:items-center gap-4 sm:gap-6 sm:justify-between mb-8">
          <h2 class="hidden sm:flex text-3xl font-body font-semibold items-center gap-3">
            {tag.slug && (
              <span class="inline-flex items-center gap-3">
                <span class="text-gray-600">Contenus liés à</span>
                <span class="inline-flex items-center gap-2 bg-gray-100 px-4 py-2 rounded-full border border-gray-200">
                  <Icon name="tabler:tag" class="w-5 h-5 text-gray-500" />
                  <span class="text-gray-800 font-medium">{tag.title}</span>
                </span>
              </span>
            )}
          </h2>
          <CategoryFilters currentCategory="" blogConfig={tagData} isTagPage={true} />
        </div>

        <!-- Tag title for mobile -->
        <h2 class="sm:hidden text-2xl font-body font-semibold mb-6">
          {tag.slug && (
            <span class="inline-flex items-center gap-2">
              <span class="text-gray-600">Tag :</span>
              <span class="inline-flex items-center gap-2 bg-gray-100 px-3 py-1.5 rounded-full border border-gray-200">
                <Icon name="tabler:tag" class="w-4 h-4 text-gray-500" />
                <span class="text-gray-800 font-medium">{tag.title}</span>
              </span>
            </span>
          )}
        </h2>

        <BlogList posts={page.data} />
        <div class="mt-12">
          <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
  /* Animations raffinées */
  details[open] > div {
    animation: slideDown 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Transitions douces */
  a, button {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-20px);
    }
  }

  @keyframes float-delayed {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-15px);
    }
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .animate-float-delayed {
    animation: float-delayed 8s ease-in-out infinite;
    animation-delay: -2s;
  }

  /* Style pour les boutons de filtre */
  .group:hover {
    ring-color: var(--hover-ring-color) !important;
  }
</style>

<script>
  // Script pour le défilement lisse
  document.addEventListener('DOMContentLoaded', () => {
    // Si l'URL contient une ancre, faire défiler la page en douceur
    if (window.location.hash === '#category-content') {
      const element = document.getElementById('category-content');
      if (element) {
        setTimeout(() => {
          const yOffset = -100; 
          const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;
          window.scrollTo({top: y, behavior: 'smooth'});
        }, 100);
      }
    }
  });

  // Solution ultra simplifiée - on va utiliser une approche native d'affichage/masquage
  document.addEventListener('astro:page-load', () => {
    console.log("Page Tag chargée");
    
    // Identifier les éléments DOM
    const tagButton = document.getElementById('tag-category-button');
    const tagDropdown = document.getElementById('tag-category-dropdown');
    const tagOverlay = document.getElementById('tag-dropdown-overlay');
    
    console.log("Éléments pour dropdown:", {
      button: !!tagButton, 
      dropdown: !!tagDropdown, 
      overlay: !!tagOverlay
    });
    
    // Hack solution - création et injection directe d'un élément personnalisé
    if (tagButton) {
      // Créer un nouveau bouton et un nouveau dropdown qui remplaceront les originaux
      const newButton = document.createElement('button');
      newButton.id = "custom-tag-button";
      newButton.innerHTML = tagButton.innerHTML;
      newButton.className = tagButton.className;
      newButton.setAttribute('aria-haspopup', 'listbox');
      newButton.setAttribute('aria-expanded', 'false');
      newButton.setAttribute('type', 'button');
      
      const newDropdown = document.createElement('div');
      newDropdown.id = "custom-tag-dropdown";
      newDropdown.style.display = 'none';
      newDropdown.style.position = 'absolute';
      newDropdown.style.zIndex = '50';
      newDropdown.style.top = '100%';
      newDropdown.style.left = '0';
      newDropdown.style.right = '0';
      newDropdown.style.background = 'white';
      newDropdown.style.borderRadius = '8px';
      newDropdown.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.1)';
      newDropdown.style.marginTop = '4px';
      
      // Contenu du dropdown
      if (tagDropdown) {
        newDropdown.innerHTML = tagDropdown.innerHTML;
      } else {
        // Fallback avec du contenu par défaut
        newDropdown.innerHTML = `
          <a href="/blog#category-content" class="flex items-center gap-2 px-4 py-3 hover:bg-gray-50 transition-colors">
            <span class="text-sm">Tous</span>
          </a>
          <a href="/category/actualite#category-content" class="flex items-center gap-2 px-4 py-3 hover:bg-gray-50 transition-colors">
            <span class="text-sm">Actualités</span>
          </a>
          <a href="/category/fiche#category-content" class="flex items-center gap-2 px-4 py-3 hover:bg-gray-50 transition-colors">
            <span class="text-sm">Fiches</span>
          </a>
        `;
      }
      
      // Remplacer le bouton original
      if (tagButton.parentNode) {
        // Container parent
        const container = document.createElement('div');
        container.className = "sm:hidden relative";
        container.style.position = "relative";
        
        // Ajouter les nouveaux éléments
        container.appendChild(newButton);
        container.appendChild(newDropdown);
        
        // Remplacer l'élément d'origine
        tagButton.parentNode.replaceChild(container, tagButton);
        
        // Overlay pour les clics extérieurs
        const newOverlay = document.createElement('div');
        newOverlay.id = "custom-tag-overlay";
        newOverlay.className = "fixed inset-0 z-10 bg-black/10 backdrop-blur-sm";
        newOverlay.style.display = "none";
        document.body.appendChild(newOverlay);
        
        // Variable pour suivre l'état du dropdown
        let isOpen = false;
        
        // Fonction pour ouvrir/fermer le dropdown
        function toggleDropdown() {
          isOpen = !isOpen;
          
          if (isOpen) {
            newDropdown.style.display = 'block';
            newOverlay.style.display = 'block';
            newButton.setAttribute('aria-expanded', 'true');
          } else {
            newDropdown.style.display = 'none';
            newOverlay.style.display = 'none';
            newButton.setAttribute('aria-expanded', 'false');
          }
        }
        
        // Événement pour le nouveau bouton
        newButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          toggleDropdown();
        });
        
        // Fermer lors d'un clic sur l'overlay
        newOverlay.addEventListener('click', () => {
          toggleDropdown();
        });
        
        // Fermer lors d'un clic sur un élément du dropdown
        const links = newDropdown.querySelectorAll('a');
        links.forEach(link => {
          link.addEventListener('click', () => {
            toggleDropdown();
          });
        });
      }
    }
  });
</script>

