---
// Configuration des variables d'environnement pour Tina CMS
const TINA_CLIENT_ID = import.meta.env.TINA_CLIENT_ID || 'default-client-id';
const API_URL = import.meta.env.DEV 
  ? 'http://localhost:4001/graphql' 
  : 'https://content.tinajs.io/graphql';

console.log('üîç Debug Admin Page:');
console.log('TINA_CLIENT_ID:', TINA_CLIENT_ID);
console.log('API_URL:', API_URL);
console.log('All Env Vars:', JSON.stringify(import.meta.env, null, 2));
---

<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Administration Out of the Books</title>
    <script 
      type="module"
      src="https://unpkg.com/@tinacms/cli@latest/dist/tina.js" 
      crossorigin
    ></script>
    <style>
      body { 
        font-family: Arial, sans-serif; 
        background-color: #f4f4f4; 
        display: flex; 
        justify-content: center; 
        align-items: center; 
        height: 100vh; 
        margin: 0; 
      }
      #debug-info {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        max-width: 600px;
        width: 100%;
      }
    </style>
  </head>
  <body class="tinacms">
    <div id="debug-info">
      <h1>Tina CMS Debug Information</h1>
      <pre id="debug-output"></pre>
    </div>
    <div id="root"></div>
    <script define:vars={{TINA_CLIENT_ID, API_URL}}>
      // Capture console logs
      const originalLog = console.log;
      const originalError = console.error;
      const logs = [];
      
      console.log = function() {
        logs.push(Array.from(arguments).map(String).join(' '));
        originalLog.apply(console, arguments);
      };
      
      console.error = function() {
        logs.push('ERROR: ' + Array.from(arguments).map(String).join(' '));
        originalError.apply(console, arguments);
      };

      // Attendre que le script Tina soit charg√©
      const waitForTina = () => {
        return new Promise((resolve, reject) => {
          const checkInterval = setInterval(() => {
            if (window.tina && typeof window.tina.init === 'function') {
              clearInterval(checkInterval);
              resolve(window.tina);
            }
          }, 100);

          // Timeout apr√®s 5 secondes
          setTimeout(() => {
            clearInterval(checkInterval);
            reject(new Error('Tina CMS script not loaded'));
          }, 5000);
        });
      };

      const init = async () => {
        try {
          // Attendre le chargement de Tina
          const tina = await waitForTina();
          
          // üöÄ Configuration de Tina Cloud
          await tina.init({
            clientId: TINA_CLIENT_ID,
            branch: 'main',
            tokenStorage: 'LOCAL_STORAGE',
            cmsCallback: (cms) => {
              // Activation des fonctionnalit√©s admin
              cms.flags.set('tina-admin', true);
            },
            apiURL: API_URL
          });

          console.log('‚úÖ Tina CMS initialis√© avec succ√®s');
        } catch (error) {
          console.error('‚ùå √âchec de l\'initialisation de Tina', error);
        } finally {
          // Afficher les logs de d√©bogage
          const debugOutput = document.getElementById('debug-output');
          if (debugOutput) {
            debugOutput.textContent = logs.join('\n');
          }
        }
      };

      // Charger Tina une fois le DOM charg√©
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
      } else {
        init();
      }
    </script>
  </body>
</html>
