import type { APIRoute } from 'astro';
import { Api } from 'nocodb-sdk';

// Forcer le rendu c√¥t√© serveur
export const prerender = false;

// Configuration NocoDB - s√©curis√©e car ex√©cut√©e c√¥t√© serveur uniquement
const NOCODB_BASE_URL = import.meta.env.NOCODB_BASE_URL || 'https://app.nocodb.com';
const NOCODB_API_TOKEN = import.meta.env.NOCODB_API_TOKEN;
const NOCODB_ORG_ID = import.meta.env.NOCODB_ORG_ID || 'noco';
const NOCODB_PROJECT_ID = import.meta.env.NOCODB_PROJECT_ID || 'pn7128r4idyluf0';
const NOCODB_TABLE_ID = import.meta.env.NOCODB_TABLE_ID || 'mza30wqm38wsmib';

console.log('üîÑ API endpoint submit-contact charg√©');
console.log('üìù Configuration:', {
  NOCODB_BASE_URL,
  hasToken: !!NOCODB_API_TOKEN,
  NOCODB_ORG_ID,
  NOCODB_PROJECT_ID,
  NOCODB_TABLE_ID
});

// Initialiser l'API NocoDB
const initNocoDBApi = () => {
  console.log('üîÑ Initialisation de l\'API NocoDB...');
  
  if (!NOCODB_API_TOKEN) {
    console.error('‚ùå Token API NocoDB manquant');
    return null;
  }
  
  try {
    const api = new Api({
      baseURL: NOCODB_BASE_URL,
      headers: {
        'xc-token': NOCODB_API_TOKEN
      }
    });
    
    console.log('‚úÖ API NocoDB initialis√©e avec succ√®s');
    return api;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de l\'API NocoDB:', error);
    return null;
  }
};

// D√©finir une interface pour les erreurs
interface ApiError extends Error {
  response?: {
    status?: number;
    data?: {
      msg?: string;
    };
  };
}

// Route GET pour tester la connexion et r√©cup√©rer la structure
export const GET: APIRoute = async () => {
  console.log('üîÑ Requ√™te GET re√ßue √† /api/submit-contact (test)');
  
  try {
    // V√©rifier si nous sommes en mode test
    const isTestMode = !NOCODB_API_TOKEN || NOCODB_API_TOKEN.trim() === '';
    console.log(`üîç Mode d√©tect√©: ${isTestMode ? 'TEST' : 'PRODUCTION'}`);
    
    if (isTestMode) {
      console.log('üß™ Mode TEST: simulation de la structure');
      
      return new Response(
        JSON.stringify({
          success: true,
          message: 'Mode test activ√©. Voici la structure attendue:',
          expectedStructure: {
            Objet: "Sujet du message",
            Message: "Contenu du message",
            Auteur: "adresse@email.com",
            Statut: "En attente de r√©ponse"
          },
          isTestMode: true
        }),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
    }
    
    // Mode production - tester la connexion √† NocoDB
    console.log('üöÄ Mode PRODUCTION: test de connexion √† NocoDB');
    
    // Initialiser l'API NocoDB
    const api = initNocoDBApi();
    if (!api) {
      console.error('‚ùå √âchec de l\'initialisation de l\'API NocoDB');
      
      return new Response(
        JSON.stringify({
          success: false,
          message: '√âchec de connexion √† NocoDB. V√©rifiez les variables d\'environnement.',
          error: 'API NocoDB non initialis√©e'
        }),
        {
          status: 500,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
    }
    
    try {
      console.log('üîÑ R√©cup√©ration d\'un exemple de donn√©es depuis NocoDB...');
      
      // R√©cup√©rer un exemple de ligne pour comprendre la structure
      const result = await api.dbTableRow.list(
        NOCODB_ORG_ID,
        NOCODB_PROJECT_ID,
        NOCODB_TABLE_ID,
        { limit: 1 }
      );
      
      console.log('‚úÖ R√©cup√©ration r√©ussie depuis NocoDB:', result);
      
      // Cr√©er un exemple de structure bas√© sur les donn√©es r√©elles
      const exampleStructure = {
        Objet: "Sujet du message",
        Message: "Contenu du message",
        Auteur: "adresse@email.com",
        Statut: "En attente de r√©ponse"
      };
      
      return new Response(
        JSON.stringify({
          success: true,
          message: 'Connexion √† NocoDB r√©ussie. Voici la structure attendue et un exemple de donn√©es:',
          expectedStructure: exampleStructure,
          sampleData: result.list && result.list.length > 0 ? result.list[0] : null,
          tableStructure: result.list && result.list.length > 0 ? Object.keys(result.list[0]) : [],
          isTestMode: false
        }),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
    } catch (error: unknown) {
      console.error('‚ùå Erreur API lors de la r√©cup√©ration des donn√©es:', error);
      
      const apiError = error as ApiError;
      
      return new Response(
        JSON.stringify({
          success: false,
          message: 'Erreur lors de la r√©cup√©ration des donn√©es depuis NocoDB.',
          error: apiError.message || 'Erreur inconnue'
        }),
        {
          status: 500,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
    }
  } catch (error: unknown) {
    console.error('‚ùå Erreur lors du traitement de la requ√™te GET:', error);
    
    const apiError = error as ApiError;
    
    return new Response(
      JSON.stringify({
        success: false,
        message: 'Une erreur s\'est produite lors du traitement de votre demande.',
        error: apiError.message || 'Erreur inconnue'
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );
  }
};

export const POST: APIRoute = async ({ request }) => {
  console.log('üîÑ Requ√™te POST re√ßue √† /api/submit-contact');
  
  try {
    // V√©rifier si nous sommes en mode test
    const isTestMode = !NOCODB_API_TOKEN || NOCODB_API_TOKEN.trim() === '';
    console.log(`üîç Mode d√©tect√©: ${isTestMode ? 'TEST' : 'PRODUCTION'}`);
    
    // R√©cup√©rer les donn√©es du formulaire (en JSON)
    const data = await request.json();
    console.log('üìù Donn√©es re√ßues:', data);
    
    // Formater les donn√©es pour NocoDB selon la structure r√©elle de la table
    const formattedData = {
      Objet: data.subject || "Contact depuis le site web",
      Message: data.message,
      Auteur: data.email,
      Statut: "En attente de r√©ponse"
    };
    
    console.log('üìù Donn√©es format√©es:', formattedData);
    
    // Mode test - simuler une soumission r√©ussie
    if (isTestMode) {
      console.log('üß™ Mode TEST: simulation de la soumission');
      console.log('üìù Donn√©es qui seraient envoy√©es:', formattedData);
      
      // Simuler un d√©lai de traitement
      await new Promise(resolve => setTimeout(resolve, 500));
      
      console.log('‚úÖ Simulation r√©ussie, envoi de la r√©ponse');
      
      return new Response(
        JSON.stringify({
          success: true,
          message: 'Merci pour votre message ! Nous vous r√©pondrons dans les plus brefs d√©lais.',
          isTestMode: true
        }),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
    }
    
    // Mode production - envoyer les donn√©es √† NocoDB
    console.log('üöÄ Mode PRODUCTION: envoi des donn√©es √† NocoDB');
    
    // Initialiser l'API NocoDB
    const api = initNocoDBApi();
    if (!api) {
      console.error('‚ùå √âchec de l\'initialisation de l\'API NocoDB');
      
      return new Response(
        JSON.stringify({
          success: false,
          message: 'Nous rencontrons actuellement un probl√®me technique. Notre √©quipe a √©t√© inform√©e et travaille √† r√©soudre ce probl√®me. Veuillez r√©essayer ult√©rieurement.',
          error: 'API NocoDB non initialis√©e'
        }),
        {
          status: 500,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
    }
    
    try {
      console.log('üîÑ Envoi des donn√©es √† NocoDB...');
      console.log('üìù Param√®tres:', {
        NOCODB_ORG_ID,
        NOCODB_PROJECT_ID,
        NOCODB_TABLE_ID,
        data: formattedData
      });
      
      // Envoyer les donn√©es √† l'API NocoDB
      const result = await api.dbTableRow.create(
        NOCODB_ORG_ID,
        NOCODB_PROJECT_ID,
        NOCODB_TABLE_ID,
        formattedData
      );
      
      console.log('‚úÖ Soumission r√©ussie √† NocoDB:', result);
      
      return new Response(
        JSON.stringify({
          success: true,
          message: 'Merci pour votre message ! Nous vous r√©pondrons dans les plus brefs d√©lais.',
          isTestMode: false
        }),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
    } catch (error: unknown) {
      console.error('‚ùå Erreur API lors de la soumission:', error);
      
      const apiError = error as ApiError;
      
      return new Response(
        JSON.stringify({
          success: false,
          message: 'Nous n\'avons pas pu envoyer votre message. Veuillez v√©rifier votre connexion internet et r√©essayer. Si le probl√®me persiste, contactez-nous par email.',
          error: apiError.message || 'Erreur inconnue'
        }),
        {
          status: 500,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
    }
  } catch (error: unknown) {
    console.error('‚ùå Erreur lors du traitement de la requ√™te:', error);
    
    const apiError = error as ApiError;
    
    return new Response(
      JSON.stringify({
        success: false,
        message: 'Une erreur s\'est produite lors du traitement de votre demande. Veuillez v√©rifier les informations saisies et r√©essayer.',
        error: apiError.message || 'Erreur inconnue'
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );
  }
}; 