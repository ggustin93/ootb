// Script de build pour g√©n√©rer les donn√©es statiques du festival
// Ce script est ex√©cut√© uniquement au moment du build

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import sharp from 'sharp';
import dotenv from 'dotenv';
import { Api } from 'nocodb-sdk';
import { Poppler } from 'node-poppler';

// Charger les variables d'environnement
dotenv.config();

// Obtenir le chemin du r√©pertoire actuel
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const ROOT_DIR = path.resolve(__dirname, '../..');

// D√©terminer si nous sommes en mode production
// V√©rifier plusieurs variables d'environnement que Netlify pourrait d√©finir
const IS_NETLIFY = process.env.NETLIFY === 'true';
const FORCE_PRODUCTION = process.env.FORCE_PRODUCTION === 'true';
const NODE_ENV_PRODUCTION = process.env.NODE_ENV === 'production';

// D√©tecter la branche avec plusieurs variables possibles
const BRANCH = process.env.BRANCH || 
               process.env.NETLIFY_BRANCH || 
               process.env.HEAD || 
               process.env.VERCEL_GIT_COMMIT_REF ||
               'unknown';

// Si nous sommes sur Netlify ou si le mode production est forc√© ou si NODE_ENV est production
const IS_PRODUCTION = IS_NETLIFY || FORCE_PRODUCTION || NODE_ENV_PRODUCTION;
const IS_MAIN_BRANCH = BRANCH === 'main' || BRANCH === 'master';

// Ajouter un log de d√©bogage pour v√©rifier toutes les variables de branche
console.log(`üîç Variables de branche d√©tect√©es:`);
console.log(`   - BRANCH: ${process.env.BRANCH || 'non d√©finie'}`);
console.log(`   - NETLIFY_BRANCH: ${process.env.NETLIFY_BRANCH || 'non d√©finie'}`);
console.log(`   - HEAD: ${process.env.HEAD || 'non d√©finie'}`);
console.log(`   - VERCEL_GIT_COMMIT_REF: ${process.env.VERCEL_GIT_COMMIT_REF || 'non d√©finie'}`);
console.log(`   - Branche finale utilis√©e: ${BRANCH}`);
console.log(`   - Est-ce main/master?: ${IS_MAIN_BRANCH ? 'OUI' : 'NON'}`);

// Charger les settings pour v√©rifier showUnpublishedEvents
let showUnpublishedEvents = true; // Par d√©faut, on montre tout (s√©curit√© pour le dev)
try {
  const settingsPath = path.join(ROOT_DIR, 'src/content/site/settings.json');
  const settings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));
  showUnpublishedEvents = settings?.festival?.showUnpublishedEvents ?? true;
} catch (error) {
  console.warn('‚ö†Ô∏è Impossible de charger settings.json, utilisation des valeurs par d√©faut:', error.message);
}

// GARDE-FOU DE S√âCURIT√â: En production sur main, on ne montre JAMAIS les √©v√©nements non publi√©s
if (IS_PRODUCTION && IS_MAIN_BRANCH) {
  showUnpublishedEvents = false;
  console.log('üîí S√âCURIT√â: Branche main en production - √©v√©nements non publi√©s masqu√©s');
}

console.log(`üîß Environnement de build:`);
console.log(`   - Netlify: ${IS_NETLIFY ? 'Oui' : 'Non'}`);
console.log(`   - NODE_ENV: ${process.env.NODE_ENV || 'non d√©fini'}`);
console.log(`   - Branche: ${BRANCH}`);
console.log(`   - Force production: ${FORCE_PRODUCTION ? 'Oui' : 'Non'}`);
console.log(`   - Mode final: ${IS_PRODUCTION ? 'PRODUCTION' : 'D√âVELOPPEMENT'}`);
console.log(`   - Afficher √©v√©nements non publi√©s: ${showUnpublishedEvents ? 'Oui' : 'Non'}`);

// Configuration NocoDB (bas√©e sur src/config/nocodb.ts)
const NOCODB_BASE_URL = process.env.NOCODB_BASE_URL || "https://app.nocodb.com";
const NOCODB_API_TOKEN = process.env.NOCODB_API_TOKEN || "";

const NOCODB_CONFIG = {
  // Identifiant du projet
  projectId: "pocv8knemg3rcok",
  
  // Identifiants des tables
  tables: {
    stands: "mbwhou86e9tzqql", // ID de la table des stands
    ateliers: "maiiy35ahod5nnu", // ID de la table des ateliers
    conferences: "mdf8viczcxywoug" // ID de la table des conf√©rences
  },
  
  // Param√®tres de requ√™te par d√©faut
  defaultQueryParams: {
    stands: {
      offset: 0,
      limit: 100,
      where: ""
    },
    ateliers: {
      offset: 0,
      limit: 50,
      where: ""
    },
    conferences: {
      offset: 0,
      limit: 50,
      where: ""
    }
  }
};

// R√©pertoires pour les images (bas√©s sur src/services/imageProcessor.ts)
const IMAGES_SRC_DIR = path.join(ROOT_DIR, 'src', 'assets', 'images', 'events');
const IMAGES_PUBLIC_DIR = path.join(ROOT_DIR, 'public', 'images', 'events');
const OUTPUT_DIR = path.join(ROOT_DIR, 'src', 'content', 'festival');
const RAW_DATA_DIR = path.join(ROOT_DIR, 'src', 'content', 'festival', 'raw-data');

// V√©rifier si les r√©pertoires existent et les cr√©er si n√©cessaire
if (!fs.existsSync(IMAGES_SRC_DIR)) {
  fs.mkdirSync(IMAGES_SRC_DIR, { recursive: true });
  console.log(`üìÅ R√©pertoire cr√©√© : ${IMAGES_SRC_DIR}`);
}

if (!fs.existsSync(IMAGES_PUBLIC_DIR)) {
  fs.mkdirSync(IMAGES_PUBLIC_DIR, { recursive: true });
  console.log(`üìÅ R√©pertoire cr√©√© : ${IMAGES_PUBLIC_DIR}`);
}

if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  console.log(`üìÅ R√©pertoire cr√©√© : ${OUTPUT_DIR}`);
}

if (!fs.existsSync(RAW_DATA_DIR)) {
  fs.mkdirSync(RAW_DATA_DIR, { recursive: true });
  console.log(`üìÅ R√©pertoire cr√©√© : ${RAW_DATA_DIR}`);
}

// Fonction pour g√©n√©rer le chemin d'image en fonction du mode
function getImagePath(eventType, fileName) {
  // Sur Netlify avec Astro, nous devons utiliser un chemin qui sera accessible
  // apr√®s le build. Les fichiers dans public/ sont copi√©s √† la racine du site.
  return `/images/events/${eventType}/${fileName}.webp`;
}

// Afficher un message au d√©marrage pour indiquer le mode et les chemins d'images
console.log(`üñºÔ∏è Chemins d'images en mode ${IS_PRODUCTION ? 'production' : 'd√©veloppement'}:`);
console.log(`   - Chemin des images dans JSON: ${getImagePath('example', 'example').replace('example/example.webp', '')}`);
console.log(`   - Images source: ${IMAGES_SRC_DIR}`);
console.log(`   - Images public: ${IMAGES_PUBLIC_DIR}`);

// Jours du festival
const DAYS = ['Mercredi', 'Jeudi', 'Vendredi'];

/**
 * Initialise l'API NocoDB avec le token d'authentification
 * @returns Instance de l'API NocoDB
 */
function initNocoDBApi() {
  console.log('Initialisation de l\'API NocoDB avec le token:', NOCODB_API_TOKEN ? 'Token pr√©sent' : 'Token manquant');
  
  return new Api({
    baseURL: NOCODB_BASE_URL,
    headers: {
      "xc-token": NOCODB_API_TOKEN
    }
  });
}

// Normaliser les valeurs de jour
function normalizeDay(day) {
  if (!day) return 'Mercredi'; // Valeur par d√©faut
  
  // G√©rer le cas o√π day est un nombre (0 = Les trois jours, 1 = Mercredi, 2 = Jeudi, 3 = Vendredi)
  if (typeof day === 'number') {
    switch (day) {
      case 1: return 'Mercredi';
      case 2: return 'Jeudi';
      case 3: return 'Vendredi';
      case 0: return 'Mercredi'; // Pour les trois jours, on met par d√©faut Mercredi
      default: return 'Mercredi';
    }
  }
  
  // G√©rer le cas o√π day est un objet (avec Title)
  if (typeof day === 'object' && day !== null) {
    if (day.Title) return normalizeDay(day.Title);
    return 'Mercredi';
  }
  
  // Normaliser les valeurs "√Ä d√©finir" ou similaires
  if (day === '√Ä d√©finir' || day === 'A d√©finir' || day === '√† d√©finir' || day === 'a d√©finir') {
    return 'Mercredi';
  }
  
  // V√©rifier si le jour est valide
  if (DAYS.includes(day)) {
    return day;
  }
  
  // Si le jour n'est pas reconnu, retourner la valeur par d√©faut
  console.warn(`‚ö†Ô∏è Jour non reconnu: "${day}", utilisation de la valeur par d√©faut`);
  return 'Mercredi';
}

// Formater l'heure au format HH:mm
function formatTime(time) {
  if (!time) return '√Ä d√©finir';
  // Si l'heure est au format HH:mm:ss, on enl√®ve les secondes
  if (typeof time === 'string' && time.length > 5) {
    return time.substring(0, 5);
  }
  return time;
}

/**
 * Calcule l'heure de fin √† partir d'une heure de d√©but et d'une dur√©e.
 * @param {string} startTime - L'heure de d√©but au format "HH:mm".
 * @param {number} durationInMinutes - La dur√©e en minutes.
 * @returns {string} L'heure de fin au format "HH:mm".
 */
function calculateEndTime(startTime, durationInMinutes) {
  if (!startTime || typeof startTime !== 'string' || !startTime.includes(':') || durationInMinutes == null) {
    return '';
  }

  const [hours, minutes] = startTime.split(':').map(Number);
  if (isNaN(hours) || isNaN(minutes)) {
    return '';
  }

  const startDate = new Date();
  startDate.setHours(hours, minutes, 0, 0);

  const endDate = new Date(startDate.getTime() + durationInMinutes * 60000);

  const endHours = endDate.getHours().toString().padStart(2, '0');
  const endMinutes = endDate.getMinutes().toString().padStart(2, '0');

  return `${endHours}:${endMinutes}`;
}

/**
 * Tests automatiques pour la fonction calculateEndTime
 */
function testCalculateEndTime() {
  const tests = [
    { start: '09:00', duration: 60, expected: '10:00' },
    { start: '09:30', duration: 30, expected: '10:00' },
    { start: '14:45', duration: 90, expected: '16:15' },
    { start: '23:30', duration: 60, expected: '00:30' }
  ];

  let allPassed = true;
  
  tests.forEach(test => {
    const result = calculateEndTime(test.start, test.duration);
    if (result !== test.expected) {
      console.error(`‚ùå Test failed: ${test.start} + ${test.duration}min = ${result} (expected ${test.expected})`);
      allPassed = false;
    }
  });

  if (allPassed) {
    console.log('‚úÖ calculateEndTime function tests passed');
  }
  return allPassed;
}

/**
 * D√©termine la dur√©e d'un √©v√©nement selon son type et donn√©es
 * @param {Object} event - L'√©v√©nement √† analyser
 * @returns {number} Dur√©e en minutes
 * 
 * Logique de priorit√© :
 * 1. Champ "Dur√©e" explicite dans NocoDB (en minutes)
 * 2. D√©mos num√©riques (Village num√©rique) = 30 minutes
 * 3. Ateliers normaux et conf√©rences = 60 minutes (1h)
 */
function getEventDuration(event) {
  // Priorit√© 1: champ Dur√©e explicite (en minutes)
  if (event.Dur√©e && !isNaN(parseInt(event.Dur√©e))) {
    return parseInt(event.Dur√©e);
  }
  
  // Priorit√© 2: d√©mos num√©riques (Village num√©rique) = 30 minutes
  // G√©rer le cas o√π Espaces peut √™tre un objet ou une cha√Æne de caract√®res
  const espacesTitle = event.Espaces && typeof event.Espaces === 'object' ? 
                       event.Espaces.Title : 
                       event.Espaces;
  
  if (espacesTitle === 'Village num√©rique') {
    return 30;
  }
  
  // Priorit√© 3: ateliers normaux et conf√©rences par d√©faut = 60 minutes (1h)
  return 60;
}

// Ex√©cuter les tests au chargement
testCalculateEndTime();

/**
 * V√©rifie si les dossiers d'images des √©v√©nements sont vides
 * @returns {boolean} - True si au moins un des dossiers d'images est vide, false sinon
 */
function areImageDirectoriesEmpty() {
  try {
    const imageDirectories = [
      path.join(IMAGES_SRC_DIR, 'stands'),
      path.join(IMAGES_SRC_DIR, 'ateliers'),
      path.join(IMAGES_SRC_DIR, 'conferences')
    ];
    
    // Si l'un des dossiers n'existe pas, on consid√®re qu'ils sont vides
    for (const dir of imageDirectories) {
      if (!fs.existsSync(dir)) {
        console.log(`üìÅ Le r√©pertoire d'images ${dir} n'existe pas. G√©n√©ration des images requise.`);
        return true;
      }
      
      // V√©rifier si le dossier contient des fichiers
      const files = fs.readdirSync(dir);
      if (files.length === 0) {
        console.log(`üìÅ Le r√©pertoire d'images ${dir} est vide. G√©n√©ration des images requise.`);
        return true;
      }
    }
    
    console.log(`üìÅ Tous les r√©pertoires d'images contiennent des fichiers.`);
    return false;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la v√©rification des r√©pertoires d'images:`, error);
    // En cas d'erreur, on g√©n√®re par s√©curit√©
    return true;
  }
}

// Fonction principale
async function main() {
  try {
    console.log('üöÄ D√©but de la g√©n√©ration des donn√©es du festival...');
    
    // Lancer l'auto-test au d√©but du build
    testCalculateEndTime();
    
    // Cr√©er les r√©pertoires n√©cessaires
    await createDirectories();
    
    // R√©initialiser les fichiers JSON si l'option reset est activ√©e
    const args = process.argv.slice(2);
    if (args.includes('--reset')) {
      await resetJsonFiles();
      console.log('üóëÔ∏è R√©initialisation des fichiers JSON effectu√©e.');
    }
    
    // R√©cup√©rer les donn√©es depuis NocoDB
    console.log('üìä R√©cup√©ration des donn√©es depuis NocoDB...');
    
    // R√©cup√©rer les stands
    console.log('üè¢ R√©cup√©ration des stands...');
    const standsResponse = await fetchStands();
    
    // R√©cup√©rer les ateliers
    console.log('üß™ R√©cup√©ration des ateliers...');
    const ateliersResponse = await fetchAteliers();
    
    // R√©cup√©rer les conf√©rences
    console.log('üé§ R√©cup√©ration des conf√©rences...');
    const conferencesResponse = await fetchConferences();
    
    // V√©rifier si des donn√©es ont chang√©
    const dataChanged = standsResponse.dataChanged || 
                         ateliersResponse.dataChanged || 
                         conferencesResponse.dataChanged;
    
    // V√©rifier si les dossiers d'images sont vides
    const imagesEmpty = areImageDirectoriesEmpty();
    
    // Si l'option fetch-only est activ√©e, on s'arr√™te ici
    if (args.includes('--fetch-only')) {
      console.log('üõë Option --fetch-only activ√©e. Arr√™t du processus.');
      return;
    }
    
    // Si aucune donn√©e n'a chang√©, que les dossiers d'images ne sont pas vides
    // et que l'option no-reset n'est pas activ√©e, pas besoin de continuer
    if (!dataChanged && !imagesEmpty && !args.includes('--no-reset')) {
      console.log('‚úÖ Aucune modification d√©tect√©e dans les donn√©es et les images sont d√©j√† pr√©sentes. G√©n√©ration des fichiers non n√©cessaire.');
      return;
    }
    
    let generationReason = '';
    if (dataChanged) generationReason += 'modifications d√©tect√©es dans les donn√©es';
    if (imagesEmpty) generationReason += (generationReason ? ', ' : '') + 'dossiers d\'images vides';
    if (args.includes('--no-reset')) generationReason += (generationReason ? ', ' : '') + 'option --no-reset activ√©e';
    
    console.log(`üîÑ G√©n√©ration des fichiers n√©cessaire (${generationReason})...`);
    
    // Convertir les donn√©es en √©v√©nements
    console.log('üîÑ Conversion des donn√©es en √©v√©nements...');
    const standsEvents = convertStandsToEvents(standsResponse.list);
    const ateliersEvents = convertAteliersToEvents(ateliersResponse.list);
    const conferencesEvents = convertConferencesToEvents(conferencesResponse.list);
    
    // Fusionner tous les √©v√©nements
    const allEvents = [
      ...standsEvents,
      ...ateliersEvents,
      ...conferencesEvents
    ];
    
    // T√©l√©charger et traiter les images
    console.log('üñºÔ∏è Traitement des images...');
    const eventsWithImages = await processEventImages(allEvents);
    
    // Organiser les √©v√©nements par jour
    console.log('üìÖ Organisation des √©v√©nements par jour...');
    const eventsByDay = organizeEventsByDay(eventsWithImages);
    
    // G√©n√©rer le fichier JSON
    console.log('üíæ G√©n√©ration du fichier JSON...');
    await saveEventsToJson(eventsByDay);
    
    // V√©rifier les chemins d'images
    console.log('üîç V√©rification des chemins d\'images...');
    await verifyProductionImagePaths(eventsByDay);
    
    // Cr√©er un fichier README pour expliquer comment utiliser les images
    await createImagesReadme();
    
    console.log('‚úÖ G√©n√©ration des donn√©es statiques termin√©e !');
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des donn√©es:', error);
    process.exit(1);
  }
}

// Cr√©er les r√©pertoires n√©cessaires
async function createDirectories() {
  const dirs = [
    IMAGES_SRC_DIR,
    IMAGES_PUBLIC_DIR,
    path.join(IMAGES_SRC_DIR, 'stands'),
    path.join(IMAGES_SRC_DIR, 'ateliers'),
    path.join(IMAGES_SRC_DIR, 'conferences'),
    path.join(IMAGES_PUBLIC_DIR, 'stands'),
    path.join(IMAGES_PUBLIC_DIR, 'ateliers'),
    path.join(IMAGES_PUBLIC_DIR, 'conferences'),
    OUTPUT_DIR,
    RAW_DATA_DIR
  ];
  
  for (const dir of dirs) {
    if (!fs.existsSync(dir)) {
      await fs.promises.mkdir(dir, { recursive: true });
      console.log(`üìÅ R√©pertoire cr√©√© : ${dir}`);
    }
  }
}

// Sauvegarder les donn√©es brutes dans un fichier JSON pour r√©f√©rence
function saveRawData(dataList, filename) {
  try {
    const filePath = path.join(RAW_DATA_DIR, filename);
    fs.writeFileSync(filePath, JSON.stringify(dataList, null, 2));
    console.log(`‚úÖ Donn√©es brutes sauvegard√©es dans ${filePath}`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de la sauvegarde des donn√©es (${filename}):`, error);
  }
}

/**
 * Charge les donn√©es depuis le cache local
 * @param {string} dataType - Le type de donn√©es (stands, ateliers, conferences)
 * @returns {Promise<Array>} - Les donn√©es du cache ou null si erreur
 */
async function loadCachedData(dataType) {
  const cacheFile = path.join(RAW_DATA_DIR, `${dataType}_raw.json`);
  
  try {
    if (!fs.existsSync(cacheFile)) {
      console.warn(`‚ö†Ô∏è Fichier de cache non trouv√©: ${cacheFile}`);
      return null;
    }
    
    const cacheData = await fs.promises.readFile(cacheFile, 'utf8');
    const parsedData = JSON.parse(cacheData);
    
    // Valider la structure du cache
    if (!Array.isArray(parsedData)) {
      console.error(`‚ùå Format de cache invalide pour ${dataType}: attendu array, re√ßu ${typeof parsedData}`);
      return null;
    }
    
    // V√©rifier l'√¢ge du cache
    const stats = fs.statSync(cacheFile);
    const ageHours = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60);
    const ageDays = Math.floor(ageHours / 24);
    
    if (ageDays > 0) {
      console.warn(`‚ö†Ô∏è Cache de ${dataType} date de ${ageDays} jour(s)`);
    }
    
    console.log(`‚úÖ ${parsedData.length} ${dataType} charg√©s depuis le cache`);
    return parsedData;
    
  } catch (error) {
    console.error(`‚ùå Erreur lors du chargement du cache ${dataType}:`, error.message);
    return null;
  }
}

/**
 * V√©rifie si les donn√©es ont chang√© par rapport aux donn√©es pr√©c√©demment sauvegard√©es
 * @param {Array} newDataList - La nouvelle liste d'√©l√©ments r√©cup√©r√©e de l'API
 * @param {string} dataType - Le type de donn√©es (stands, ateliers, conferences)
 * @returns {boolean} - True si les donn√©es ont chang√©, false sinon
 */
function checkIfDataChanged(newDataList, dataType) {
  const rawFileName = `${dataType}_raw.json`;
  const filePath = path.join(RAW_DATA_DIR, rawFileName);

  try {
    // V√©rifier si le fichier de donn√©es pr√©c√©dent existe
    if (!fs.existsSync(filePath)) {
      console.log(`üìù Aucun fichier de donn√©es pr√©c√©dent trouv√© pour ${dataType} (${rawFileName}). Sauvegarde initiale.`);
      saveRawData(newDataList, rawFileName);
      return true;
    }

    // Lire les anciennes donn√©es
    const oldDataRaw = fs.readFileSync(filePath, 'utf8');
    const oldDataList = JSON.parse(oldDataRaw);

    // Comparaison par nombre d'√©l√©ments
    if (!Array.isArray(oldDataList) || oldDataList.length !== newDataList.length) {
      console.log(`üìä Diff√©rence de nombre d'√©l√©ments d√©tect√©e pour ${dataType} (${oldDataList ? oldDataList.length : 0} vs ${newDataList.length}).`);
      saveRawData(newDataList, rawFileName);
      return true;
    }

    // Comparaison plus d√©taill√©e (bas√©e sur les ID et la s√©rialisation)
    // Cr√©e des maps pour une recherche rapide par ID
    const oldDataMap = new Map(oldDataList.map(item => [item.ID || item.Id, JSON.stringify(item)]));
    const newDataMap = new Map(newDataList.map(item => [item.ID || item.Id, JSON.stringify(item)]));

    // V√©rifie si tous les anciens √©l√©ments existent et sont identiques dans les nouvelles donn√©es
    for (const [id, oldJson] of oldDataMap.entries()) {
        if (!newDataMap.has(id) || newDataMap.get(id) !== oldJson) {
            console.log(`üîÑ Modification d√©tect√©e pour ${dataType} (√©l√©ment ID: ${id} modifi√© ou supprim√©).`);
            saveRawData(newDataList, rawFileName);
            return true;
        }
    }

    // V√©rifie si de nouveaux √©l√©ments ont √©t√© ajout√©s
     for (const [id] of newDataMap.entries()) {
        if (!oldDataMap.has(id)) {
             console.log(`üîÑ Modification d√©tect√©e pour ${dataType} (nouvel √©l√©ment ID: ${id} ajout√©).`);
             saveRawData(newDataList, rawFileName);
             return true;
        }
    }


    console.log(`‚úÖ Aucune modification d√©tect√©e dans les donn√©es ${dataType}.`);
    return false;

  } catch (error) {
    console.error(`‚ùå Erreur lors de la v√©rification des donn√©es ${dataType}:`, error);
    // En cas d'erreur (ex: fichier JSON corrompu), consid√©rer comme modifi√© pour forcer la reg√©n√©ration
    saveRawData(newDataList, rawFileName); // Sauvegarde la nouvelle version par s√©curit√©
    return true;
  }
}

// Fonction g√©n√©rique pour r√©cup√©rer toutes les lignes d'une table avec pagination
async function fetchAllTableRows(api, tableId, queryParamsBase, dataType) {
  let allItems = [];
  let currentPage = 0;
  let isLastPage = false;
  let totalRows = 0;
  const limit = queryParamsBase.limit || 50; // Utiliser la limite d√©finie ou 50 par d√©faut

  console.log(`Appel √† l'API NocoDB pour r√©cup√©rer les ${dataType}...`);

  while (!isLastPage) {
    const queryParams = {
      ...queryParamsBase,
      offset: currentPage * limit,
      limit: limit,
      where: queryParamsBase.where || "" // Assurer que where est d√©fini
    };

    console.log(`${dataType}: Requ√™te page ${currentPage + 1} avec offset ${queryParams.offset}, limit ${queryParams.limit}`);

    try {
      const response = await api.dbTableRow.list(
        "noco",
        NOCODB_CONFIG.projectId,
        tableId,
        queryParams
      );

      const currentItems = response.list || [];
      allItems = [...allItems, ...currentItems];
      totalRows = response.pageInfo?.totalRows || totalRows; // Conserver le total si d√©j√† connu

      // D√©termination plus fiable de la derni√®re page
      isLastPage = response.pageInfo?.isLastPage || (currentItems.length < limit) || (allItems.length >= totalRows && totalRows > 0);

      console.log(`${dataType}: Page ${currentPage + 1} r√©cup√©r√©e: ${currentItems.length} √©l√©ments (Total: ${allItems.length}/${totalRows || 'inconnu'})`);

      currentPage++;

      // S√©curit√© anti-boucle infinie
      if (currentPage > 100) {
        console.warn(`‚ö†Ô∏è Nombre maximum de pages (100) atteint pour ${dataType}, arr√™t de la boucle par s√©curit√©.`);
        break;
      }

      // Si la derni√®re r√©ponse √©tait vide et ce n'est pas la premi√®re page, on arr√™te
      if (currentItems.length === 0 && currentPage > 1) {
          console.log(`${dataType}: R√©ponse vide re√ßue pour la page ${currentPage}, fin de la r√©cup√©ration.`);
          isLastPage = true; // Forcer la sortie
      }

    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration de la page ${currentPage + 1} pour ${dataType}:`, error);
      // D√©cider s'il faut arr√™ter ou continuer en cas d'erreur sur une page
      // Pour l'instant, on arr√™te pour √©viter des donn√©es partielles non d√©tect√©es
      throw new Error(`Erreur API NocoDB pour ${dataType} page ${currentPage + 1}: ${error.message}`);
    }
  }

  console.log(`Donn√©es r√©cup√©r√©es pour ${dataType}: ${allItems.length} √©l√©ments trouv√©s au total`);
  return allItems;
}

// R√©cup√©rer les stands depuis NocoDB avec pagination compl√®te
async function fetchStands() {
  try {
    const api = initNocoDBApi();
    const allStands = await fetchAllTableRows(
        api,
        NOCODB_CONFIG.tables.stands,
        NOCODB_CONFIG.defaultQueryParams.stands,
        'stands'
    );
    const dataChanged = checkIfDataChanged(allStands, 'stands');
    return { list: allStands, dataChanged: dataChanged };
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des stands depuis l\'API:', error.message);
    
    // Fallback: utiliser les donn√©es en cache si disponibles
    console.warn('‚ö†Ô∏è Tentative de chargement depuis le cache...');
    const cachedData = await loadCachedData('stands');
    
    if (cachedData && cachedData.length > 0) {
      console.warn('‚ö†Ô∏è ATTENTION: Utilisation des donn√©es en CACHE pour les stands');
      console.warn('‚ö†Ô∏è V√©rifiez le token NocoDB dans les variables d\'environnement');
      return { list: cachedData, dataChanged: false }; // Pas de changement, on utilise le cache
    }
    
    console.error('‚ùå Aucune donn√©e disponible pour les stands (ni API, ni cache)');
    return { list: [], dataChanged: true }; // Indiquer un changement en cas d'erreur pour forcer la reg√©n√©ration
  }
}

// R√©cup√©rer les ateliers depuis NocoDB avec pagination compl√®te
async function fetchAteliers() {
  try {
    const api = initNocoDBApi();
     const allAteliers = await fetchAllTableRows(
        api,
        NOCODB_CONFIG.tables.ateliers,
        NOCODB_CONFIG.defaultQueryParams.ateliers,
        'ateliers'
    );
    const dataChanged = checkIfDataChanged(allAteliers, 'ateliers');
    return { list: allAteliers, dataChanged: dataChanged };
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des ateliers depuis l\'API:', error.message);
    
    // Fallback: utiliser les donn√©es en cache si disponibles
    console.warn('‚ö†Ô∏è Tentative de chargement depuis le cache...');
    const cachedData = await loadCachedData('ateliers');
    
    if (cachedData && cachedData.length > 0) {
      console.warn('‚ö†Ô∏è ATTENTION: Utilisation des donn√©es en CACHE pour les ateliers');
      console.warn('‚ö†Ô∏è V√©rifiez le token NocoDB dans les variables d\'environnement');
      return { list: cachedData, dataChanged: false }; // Pas de changement, on utilise le cache
    }
    
    console.error('‚ùå Aucune donn√©e disponible pour les ateliers (ni API, ni cache)');
    return { list: [], dataChanged: true };
  }
}

// R√©cup√©rer les conf√©rences depuis NocoDB avec pagination compl√®te
async function fetchConferences() {
  try {
    const api = initNocoDBApi();
    const allConferences = await fetchAllTableRows(
        api,
        NOCODB_CONFIG.tables.conferences,
        NOCODB_CONFIG.defaultQueryParams.conferences,
        'conferences'
    );
    const dataChanged = checkIfDataChanged(allConferences, 'conferences');
    return { list: allConferences, dataChanged: dataChanged };
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des conf√©rences depuis l\'API:', error.message);
    
    // Fallback: utiliser les donn√©es en cache si disponibles
    console.warn('‚ö†Ô∏è Tentative de chargement depuis le cache...');
    const cachedData = await loadCachedData('conferences');
    
    if (cachedData && cachedData.length > 0) {
      console.warn('‚ö†Ô∏è ATTENTION: Utilisation des donn√©es en CACHE pour les conf√©rences');
      console.warn('‚ö†Ô∏è V√©rifiez le token NocoDB dans les variables d\'environnement');
      return { list: cachedData, dataChanged: false }; // Pas de changement, on utilise le cache
    }
    
    console.error('‚ùå Aucune donn√©e disponible pour les conf√©rences (ni API, ni cache)');
    return { list: [], dataChanged: true };
  }
}

// Convertir les stands en √©v√©nements
function convertStandsToEvents(stands) {
  return stands.map(stand => {
    // Extraire le logo (prendre le plus r√©cent si plusieurs fichiers)
    const logoFiles = stand["Envoyez votre logo"] || [];
    const logo = logoFiles.length > 0 ? logoFiles[logoFiles.length - 1]?.signedUrl : null;
    
    // Normaliser le jour
    const normalizedDay = normalizeDay(stand.Jours);
    
    // G√©rer le cas o√π Espaces peut √™tre null
    let location = '√Ä d√©finir';
    if (stand.Espaces && typeof stand.Espaces === 'object') {
      location = stand.Espaces.Title || '√Ä d√©finir';
    }
    
    // Extraire les informations suppl√©mentaires
    const target = stand["√Ä qui s'adresse le stand ?"] || '';
    const level = stand["Niveau d'enseignement"] || '';
    const teachingType = stand["Type d'enseignement"] || '';
    const website = stand["Site internet"] || '';
    
    // Extraire le statut et la th√©matique
    const status = stand["Statut"] === "Publi√©" ? "Publi√©" : "A valider";
    const theme = stand["Th√©matique li√©e"] && stand["Th√©matique li√©e"].Title ? stand["Th√©matique li√©e"].Title : '';
    
    // GARDE-FOU: Filtrer les √©v√©nements non publi√©s si n√©cessaire
    if (!showUnpublishedEvents && status === "A valider") {
      return null; // Cet √©v√©nement sera filtr√©
    }
    
    return {
      id: `stand-${stand.ID}`,
      title: stand["Choisissez un titre court"] || `Stand ${stand.ID}`,
      description: stand["D√©crivez bri√®vement votre stand pour les visiteurs"] || '',
      type: 'Stands',
      day: normalizedDay,
      time: 'Toute la journ√©e',
      endTime: '',
      location,
      speaker: `${stand.Pr√©nom || ''} ${stand.Nom || ''}`.trim() || 'Anonyme',
      organization: '',
      image: logo,
      speakerImage: null,
      tags: [
        target,
        level,
        teachingType
      ].filter(Boolean),
      target,
      level,
      teachingType,
      url: website,
      contact: {
        email: stand.Email || '',
        phone: stand.GSM || ''
      },
      status,
      theme
    };
  }).filter(Boolean); // Filtrer les valeurs null
}

// Convertir les ateliers en √©v√©nements
function convertAteliersToEvents(ateliers) {
  return ateliers.map(atelier => {
    // Extraire le logo (prendre le plus r√©cent si plusieurs fichiers)
    const logoFiles = atelier["Envoyez votre logo"] || [];
    const logo = logoFiles.length > 0 ? logoFiles[logoFiles.length - 1]?.signedUrl : null;
    const speakerImage = atelier["Envoyez une photo de vous"]?.[0]?.signedUrl || null;
    
    // Normaliser le jour
    const normalizedDay = normalizeDay(atelier.Jours);
    
    // G√©rer les cas o√π les champs peuvent √™tre null
    const time = formatTime(atelier.Heure);
    const formattedEndTime = formatTime(atelier["Heure de fin"]);
    const endTime = (formattedEndTime && formattedEndTime !== '√Ä d√©finir') ? formattedEndTime : calculateEndTime(time, getEventDuration(atelier));

    // G√©rer le cas o√π Espaces peut √™tre un objet ou une cha√Æne de caract√®res
    let location = '√Ä d√©finir';
    if (atelier.Espaces) {
      location = typeof atelier.Espaces === 'object' && atelier.Espaces !== null ? 
                atelier.Espaces.Title || '√Ä d√©finir' : 
                atelier.Espaces;
    }
    
    // Extraire les informations suppl√©mentaires
    const target = atelier["√Ä qui s'adresse atelier ?"] || '';
    const level = atelier["Niveau d'enseignement"] || '';
    const teachingType = atelier["Type d'enseignement"] || '';
    const website = atelier["Site internet"] || '';
    
    // Extraire le statut
    const status = atelier["Statut"] === "Publi√©" ? "Publi√©" : "A valider";
    
    // GARDE-FOU: Filtrer les √©v√©nements non publi√©s si n√©cessaire
    if (!showUnpublishedEvents && status === "A valider") {
      return null; // Cet √©v√©nement sera filtr√©
    }
    
    return {
      id: `atelier-${atelier.ID}`,
      title: atelier["Choisissez un titre court"] || `Atelier ${atelier.ID}`,
      description: atelier["D√©crivez bri√®vement votre animation pour les visiteurs"] || '',
      type: 'Ateliers',
      day: normalizedDay,
      time,
      endTime,
      location,
      speaker: `${atelier.Pr√©nom || ''} ${atelier.Nom || ''}`.trim() || 'Anonyme',
      organization: atelier.Organisation || '',
      image: logo,
      speakerImage,
      tags: [
        target,
        level,
        teachingType
      ].filter(Boolean),
      target,
      level,
      teachingType,
      url: website,
      contact: {
        email: atelier.Email || '',
        phone: atelier.GSM || ''
      },
      status
    };
  }).filter(Boolean); // Filtrer les valeurs null
}

// Convertir les conf√©rences en √©v√©nements
function convertConferencesToEvents(conferences) {
  return conferences.map(conference => {
    // Extraire les images (prendre le plus r√©cent si plusieurs fichiers)
    const logoFiles = conference["Envoyez votre logo"] || [];
    const logo = logoFiles.length > 0 ? logoFiles[logoFiles.length - 1]?.signedUrl : null;
    const speakerImage = conference["Envoyez une photo de vous"]?.[0]?.signedUrl || null;
    
    // Normaliser le jour
    const normalizedDay = normalizeDay(conference.Jours);
    
    // D√©terminer le titre
    let title = '';
    
    // Essayer d'abord "Choisissez un titre pour la conf√©rence"
    if (conference["Choisissez un titre pour la conf√©rence"]) {
      title = conference["Choisissez un titre pour la conf√©rence"];
    } 
    // Ensuite essayer "Choisissez un titre court"
    else if (conference["Choisissez un titre court"]) {
      title = conference["Choisissez un titre court"];
    }
    // Ensuite essayer le champ Titre
    else if (conference.Titre) {
      if (typeof conference.Titre === 'object' && conference.Titre !== null) {
        title = conference.Titre.Title || '';
      } else {
        title = conference.Titre;
      }
    }
    
    // Si toujours pas de titre, utiliser le num√©ro de conf√©rence
    if (!title || title.trim() === '') {
      title = `Conf√©rence ${conference.ID}`;
    }
    
    // G√©rer le cas o√π Espaces peut √™tre null
    let location = '√Ä d√©finir';
    if (conference.Espaces) {
      location = typeof conference.Espaces === 'object' && conference.Espaces !== null ? 
                conference.Espaces.Title || '√Ä d√©finir' : 
                conference.Espaces;
    }
    
    // Extraire les informations suppl√©mentaires
    const target = conference["√Ä qui s'adresse conference ?"] || '';
    const level = conference["Niveau d'enseignement"] || '';
    const teachingType = conference["Type d'enseignement"] || '';
    const website = conference["Site internet"] || '';
    
    // Extraire le statut
    const status = conference["Statut"] === "Publi√©" ? "Publi√©" : "A valider";
    
    // GARDE-FOU: Filtrer les √©v√©nements non publi√©s si n√©cessaire
    if (!showUnpublishedEvents && status === "A valider") {
      return null; // Cet √©v√©nement sera filtr√©
    }
    
    // Logique de dur√©e
    const duration = conference.Dur√©e || 60; // 60min (1h) par d√©faut pour les conf√©rences
    const formattedEndTime = formatTime(conference["Heure de fin"]);
    const endTime = (formattedEndTime && formattedEndTime !== '√Ä d√©finir') ? formattedEndTime : calculateEndTime(formatTime(conference.Heure), duration);
    
    return {
      id: `conference-${conference.ID}`,
      title: title || `Conf√©rence ${conference.ID}`,
      description: conference["D√©crivez bri√®vement votre conf√©rence pour les visiteurs"] || '',
      type: 'Conf√©rences',
      day: normalizedDay,
      time: formatTime(conference.Heure),
      endTime,
      location,
      speaker: `${conference.Pr√©nom || ''} ${conference.Nom || ''}`.trim() || 'Anonyme',
      organization: conference.Organisation || '',
      image: logo,
      speakerImage,
      tags: [
        target,
        level,
        teachingType
      ].filter(Boolean),
      target,
      level,
      teachingType,
      url: website,
      contact: {
        email: conference.Email || '',
        phone: conference.GSM || ''
      },
      status
    };
  }).filter(Boolean); // Filtrer les valeurs null
}

// T√©l√©charger et traiter les images des √©v√©nements
async function processEventImages(events) {
  // Cr√©er un cache pour √©viter de t√©l√©charger plusieurs fois la m√™me image
  const imageUrlCache = new Map();
  // Compteur pour les images t√©l√©charg√©es
  let downloadCount = 0;
  let totalImages = 0;
  
  // Compter le nombre total d'images √† t√©l√©charger
  events.forEach(event => {
    if (event.image) totalImages++;
    if (event.speakerImage) totalImages++;
  });
  
  console.log(`üñºÔ∏è T√©l√©chargement de ${totalImages} images...`);
  
  // Traiter chaque √©v√©nement
  for (const event of events) {
    // Traiter l'image principale de l'√©v√©nement
    if (event.image) {
      downloadCount++;
      const optimizedImagePath = await downloadAndOptimizeImage(
        event.image,
        event.type.toLowerCase().replace(/√©/g, 'e').replace(/√®/g, 'e').replace(/√™/g, 'e').replace(/√ß/g, 'c'),
        event.id,
        false,
        event.title,
        event.day,
        imageUrlCache
      );
      
      if (optimizedImagePath) {
        event.image = optimizedImagePath;
        
        // Afficher le progr√®s toutes les 5 images ou √† la fin
        if (downloadCount % 5 === 0 || downloadCount === totalImages) {
          console.log(`üì• Progression: ${downloadCount}/${totalImages} images t√©l√©charg√©es (${Math.round(downloadCount/totalImages*100)}%)`);
        }
      }
    }
    
    // Traiter l'image du conf√©rencier
    if (event.speakerImage) {
      downloadCount++;
      const optimizedSpeakerImagePath = await downloadAndOptimizeImage(
        event.speakerImage,
        event.type.toLowerCase().replace(/√©/g, 'e').replace(/√®/g, 'e').replace(/√™/g, 'e').replace(/√ß/g, 'c'),
        event.id,
        true,
        event.title,
        event.day,
        imageUrlCache
      );
      
      if (optimizedSpeakerImagePath) {
        event.speakerImage = optimizedSpeakerImagePath;
        
        // Afficher le progr√®s toutes les 5 images ou √† la fin
        if (downloadCount % 5 === 0 || downloadCount === totalImages) {
          console.log(`üì• Progression: ${downloadCount}/${totalImages} images t√©l√©charg√©es (${Math.round(downloadCount/totalImages*100)}%)`);
        }
      }
    }
  }
  
  console.log(`‚úÖ T√©l√©chargement termin√©: ${downloadCount} images trait√©es`);
  
  return events;
}

/**
 * Converts a PDF buffer to a PNG image buffer using node-poppler
 * @param {Buffer} pdfBuffer - The PDF file buffer
 * @param {string} eventId - Event ID for logging purposes
 * @returns {Promise<Buffer|null>} PNG image buffer or null on failure
 */
async function convertPdfToImageBuffer(pdfBuffer, eventId) {
  // V√©rifier si la conversion PDF est d√©sactiv√©e (environnement Netlify sans Poppler)
  if (process.env.PDF_CONVERSION_DISABLED === 'true') {
    console.log(`‚ö†Ô∏è Conversion PDF d√©sactiv√©e pour ${eventId} (environnement sans Poppler)`);
    return null;
  }

  const tempDir = path.join(ROOT_DIR, 'temp', `pdf-conversion-${eventId}-${Date.now()}`);
  const tempPdfPath = path.join(tempDir, 'input.pdf');
  const outputPngPath = path.join(tempDir, 'output'); // Sans extension, pdfToCairo l'ajoute
  
  try {
    // Cr√©er le r√©pertoire temporaire
    await fs.promises.mkdir(tempDir, { recursive: true });
    
    // √âcrire le PDF buffer dans un fichier temporaire
    await fs.promises.writeFile(tempPdfPath, pdfBuffer);
    
    // Initialiser l'instance Poppler
    const poppler = new Poppler();
    
    // Configuration pour la conversion PDF vers PNG haute qualit√©
    const options = {
      firstPageToConvert: 1,
      lastPageToConvert: 1,
      pngFile: true,
      resolutionXYAxis: 300, // 300 DPI pour une haute qualit√©
      singleFile: true, // Un seul fichier de sortie
    };
    
    // Convertir le PDF en PNG avec pdfToCairo
    await poppler.pdfToCairo(tempPdfPath, outputPngPath, options);
    
    // V√©rifier que le fichier PNG a √©t√© cr√©√© (pdfToCairo ajoute automatiquement .png)
    const actualPngPath = `${outputPngPath}.png`;
    if (!fs.existsSync(actualPngPath)) {
      // Lister les fichiers cr√©√©s pour le d√©bogage
      const files = fs.readdirSync(tempDir);
      throw new Error(`Fichier PNG converti non trouv√©. Attendu: ${actualPngPath}, Fichiers cr√©√©s: ${files.join(', ')}`);
    }
    
    // Lire l'image PNG convertie
    const pngBuffer = await fs.promises.readFile(actualPngPath);
    console.log(`‚úÖ PDF converti avec succ√®s pour ${eventId} (${pngBuffer.length} bytes)`);
    
    return pngBuffer;
    
  } catch (error) {
    console.error(`‚ùå Erreur lors de la conversion PDF pour ${eventId}:`, error.message);
    return null;
  } finally {
    // Nettoyage : supprimer le r√©pertoire temporaire
    try {
      if (fs.existsSync(tempDir)) {
        await fs.promises.rm(tempDir, { recursive: true, force: true });
      }
    } catch (cleanupError) {
      console.warn(`‚ö†Ô∏è Erreur lors du nettoyage pour ${eventId}:`, cleanupError.message);
    }
  }
}

// T√©l√©charger et optimiser une image
async function downloadAndOptimizeImage(
  imageUrl,
  eventType,
  eventId,
  isSpeakerImage = false,
  eventTitle,
  eventDay,
  imageUrlCache
) {
  // Si l'URL est d√©j√† dans le cache, retourner le chemin d√©j√† optimis√©
  if (imageUrlCache.has(imageUrl)) {
    return imageUrlCache.get(imageUrl);
  }
  
  try {
    // V√©rifier si l'URL est valide
    if (!imageUrl || !imageUrl.startsWith('http')) {
      return null;
    }
    
    // Cr√©er un nom de fichier unique bas√© sur l'ID de l'√©v√©nement
    const filePrefix = isSpeakerImage ? 'speaker-' : '';
    const fileName = `${filePrefix}${eventId}`;
    
    // D√©terminer les chemins de destination
    const srcDir = path.join(IMAGES_SRC_DIR, eventType);
    const publicDir = path.join(IMAGES_PUBLIC_DIR, eventType);
    const publicFilePath = path.join(publicDir, `${fileName}.webp`);

    // V√©rifier si l'image existe d√©j√†, sauf si l'option --force-images est activ√©e
    const args = process.argv.slice(2);
    if (fs.existsSync(publicFilePath) && !args.includes('--force-images')) {
      // Mettre en cache et retourner le chemin existant
      const optimizedPath = getImagePath(eventType, fileName);
      imageUrlCache.set(imageUrl, optimizedPath);
      return optimizedPath;
    }
    
    // S'assurer que les r√©pertoires existent
    await fs.promises.mkdir(srcDir, { recursive: true });
    await fs.promises.mkdir(publicDir, { recursive: true });
    
    // T√©l√©charger l'image
    const response = await fetch(imageUrl);
    if (!response.ok) {
      console.error(`‚ö†Ô∏è Erreur lors du t√©l√©chargement de l'image pour ${eventId}: ${response.status} ${response.statusText}`);
      return await createPlaceholderImage(srcDir, publicDir, fileName, eventType, imageUrlCache, imageUrl);
    }
    
    const buffer = await response.buffer();
    
    try {
      // Cr√©er un fond blanc pour toutes les images
      const whiteBackground = {
        r: 255, g: 255, b: 255, alpha: 1
      };
      
      // D√©tecter et convertir les PDFs et ICOs si n√©cessaire
      const contentType = response.headers.get('content-type') || '';
      const urlLower = imageUrl.toLowerCase();
      let imageBuffer = buffer;
      let wasConverted = false;
      
      if (contentType === 'application/pdf' || urlLower.endsWith('.pdf')) {
        console.log(`üìÑ Conversion PDF d√©tect√©e pour ${eventId}`);
        imageBuffer = await convertPdfToImageBuffer(buffer, eventId);
        wasConverted = true;
        if (!imageBuffer) {
          console.error(`‚ö†Ô∏è √âchec de la conversion PDF pour ${eventId}, utilisation d'une image de remplacement`);
          return await createPlaceholderImage(srcDir, publicDir, fileName, eventType, imageUrlCache, imageUrl);
        }
      } else if (contentType === 'image/x-icon' || 
                 contentType === 'image/vnd.microsoft.icon' || 
                 urlLower.endsWith('.ico')) {
        console.log(`üîÆ Conversion ICO d√©tect√©e pour ${eventId}`);
        // Sharp supporte nativement les fichiers .ico, pas besoin de conversion sp√©ciale
        // Mais on log pour la tra√ßabilit√©
        wasConverted = true;
      }
      
      // Charger l'image (originale ou convertie depuis PDF)
      const originalImage = sharp(imageBuffer);
      
      // Utiliser un fit diff√©rent pour les images de conf√©renciers
      const fitOption = isSpeakerImage ? 'cover' : 'inside';
      const positionOption = isSpeakerImage ? 'north' : 'center';
      
      // Configuration WebP optimis√©e selon le type de fichier source
      let webpOptions = { quality: 80 };
      
      if (urlLower.endsWith('.ico')) {
        // Optimisation sp√©ciale pour les fichiers ICO (souvent des logos)
        webpOptions = {
          quality: 85,           // Qualit√© plus √©lev√©e pour les logos
          alphaQuality: 100,     // Pr√©server la transparence √† 100%
          preset: 'icon',        // Preset optimis√© pour les ic√¥nes
          effort: 6,             // Effort maximal pour la compression
          lossless: false        // Mode lossy mais haute qualit√©
        };
      } else if (urlLower.endsWith('.pdf')) {
        // Configuration pour les PDFs convertis
        webpOptions = {
          quality: 82,           // L√©g√®rement plus haute pour les PDFs vectoriels
          alphaQuality: 95,      // Bonne qualit√© alpha
          smartSubsample: true,  // Optimisation du sous-√©chantillonnage
          effort: 4              // Effort √©quilibr√©
        };
      }
      
      // G√©n√©rer la version principale (400px) dans le dossier public
      await originalImage
        .resize(400, 400, { 
          fit: fitOption,
          position: positionOption,
          withoutEnlargement: true,
          background: whiteBackground
        })
        .webp(webpOptions)
        .toFile(path.join(publicDir, `${fileName}.webp`));
      
      // G√©n√©rer √©galement une version dans src/assets pour le d√©veloppement local
      // Cette √©tape est optionnelle mais peut √™tre utile pour le d√©veloppement
      if (!IS_PRODUCTION) {
        await originalImage
          .resize(400, 400, { 
            fit: fitOption,
            position: positionOption,
            withoutEnlargement: true,
            background: whiteBackground
          })
          .webp(webpOptions)
          .toFile(path.join(srcDir, `${fileName}.webp`));
      }
      
      // Stocker le chemin dans le cache
      const optimizedPath = getImagePath(eventType, fileName);
      imageUrlCache.set(imageUrl, optimizedPath);
      
      // Log de succ√®s avec indication du type de conversion
      if (wasConverted) {
        const conversionType = urlLower.endsWith('.pdf') ? 'PDF' : 'ICO';
        console.log(`‚úÖ ${conversionType} converti et optimis√© pour ${eventId} ‚Üí ${optimizedPath}`);
      }
      
      return optimizedPath;
      
    } catch (error) {
      console.error(`‚ö†Ô∏è Erreur lors de l'optimisation de l'image pour ${eventId}: ${error.message}`);
      
      // Si l'erreur concerne un format non support√©, cr√©er une image de remplacement
      return await createPlaceholderImage(srcDir, publicDir, fileName, eventType, imageUrlCache, imageUrl);
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è Erreur lors du traitement de l'image pour ${eventId}: ${error.message}`);
    return null;
  }
}

// Fonction pour cr√©er une image de remplacement
async function createPlaceholderImage(srcDir, publicDir, fileName, eventType, imageUrlCache, imageUrl) {
  try {
    console.log(`üîÑ Cr√©ation d'une image de remplacement pour ${fileName}`);
    
    // Cr√©er une image de remplacement avec un fond blanc
    const placeholderImage = await sharp({
      create: {
        width: 400,
        height: 400,
        channels: 4,
        background: { r: 255, g: 255, b: 255, alpha: 1 }
      }
    })
    .webp({ quality: 80 })
    .toBuffer();
    
    // Toujours sauvegarder dans le dossier public
    await fs.promises.writeFile(path.join(publicDir, `${fileName}.webp`), placeholderImage);
    
    // Optionnellement sauvegarder dans le dossier src pour le d√©veloppement
    if (!IS_PRODUCTION) {
      await fs.promises.writeFile(path.join(srcDir, `${fileName}.webp`), placeholderImage);
    }
    
    // Stocker le chemin dans le cache
    const fallbackPath = getImagePath(eventType, fileName);
    imageUrlCache.set(imageUrl, fallbackPath);
    
    console.log(`‚úÖ Image de remplacement cr√©√©e pour ${fileName}`);
    return fallbackPath;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la cr√©ation de l'image de remplacement: ${error.message}`);
    return null;
  }
}

// Organiser les √©v√©nements par jour
function organizeEventsByDay(events) {
  const eventsByDay = {};
  
  // Initialiser les jours
  for (const day of DAYS) {
    eventsByDay[day] = [];
  }
  
  // Cr√©er des ensembles pour suivre les IDs d√©j√† ajout√©s par jour
  const addedEventIdsByDay = {};
  for (const day of DAYS) {
    addedEventIdsByDay[day] = new Set();
  }
  
  // S√©parer les stands des autres √©v√©nements
  const stands = events.filter(event => event.type === 'Stands');
  const otherEvents = events.filter(event => event.type !== 'Stands');
  
  // Fonction de comparaison pour le tri
  const compareEvents = (a, b) => {
    // Si un √©v√©nement a une heure d√©finie et l'autre non, celui avec l'heure d√©finie passe en premier
    if (a.time !== '√Ä d√©finir' && b.time === '√Ä d√©finir') return -1;
    if (a.time === '√Ä d√©finir' && b.time !== '√Ä d√©finir') return 1;

    // Si les deux √©v√©nements ont une heure d√©finie et diff√©rente de "√Ä d√©finir"
    if (a.time !== '√Ä d√©finir' && b.time !== '√Ä d√©finir' && 
        a.time !== 'Tous les jours' && b.time !== 'Tous les jours') {
      return a.time.localeCompare(b.time);
    }

    // Si les deux sont "√Ä d√©finir", trier par type
    if (a.type === b.type) return 0;
    if (a.type === 'Conf√©rences') return -1;
    if (b.type === 'Conf√©rences') return 1;
    if (a.type === 'Ateliers') return -1;
    if (b.type === 'Ateliers') return 1;
    return 0;
  };
  
  // Ajouter les √©v√©nements (hors stands) aux jours correspondants
  for (const event of otherEvents) {
    const normalizedDay = normalizeDay(event.day);
    if (DAYS.includes(normalizedDay)) {
      if (!addedEventIdsByDay[normalizedDay].has(event.id)) {
        eventsByDay[normalizedDay].push({
          ...event,
          day: normalizedDay
        });
        addedEventIdsByDay[normalizedDay].add(event.id);
      } else {
        console.warn(`‚ö†Ô∏è Doublon d√©tect√© et ignor√©: ${event.id} (${event.title}) pour le jour ${normalizedDay}`);
      }
    }
  }
  
  // Ajouter une propri√©t√© shared aux stands pour indiquer qu'ils sont partag√©s entre les jours
  const standsWithSharedFlag = stands.map(stand => ({
    ...stand,
    time: 'Tous les jours',
    shared: true // Indicateur que l'√©v√©nement est partag√© entre les jours
  }));
  
  // Ajouter les stands seulement au jour "Mercredi" (le premier jour)
  // On les ajoutera aux autres jours dans l'interface via DayFilter.astro
  if (standsWithSharedFlag.length > 0) {
    eventsByDay['Mercredi'] = [...eventsByDay['Mercredi'], ...standsWithSharedFlag];
    console.log(`üìä ${standsWithSharedFlag.length} stands ajout√©s uniquement au jour Mercredi`);
  }
  
  // Trier les √©v√©nements de chaque jour
  for (const day of DAYS) {
    eventsByDay[day].sort(compareEvents);
  }
  
  // Compter les √©v√©nements par type et par jour pour le d√©bogage
  const counts = {
    total: 0,
    stands: 0,
    ateliers: 0,
    conferences: 0,
    byDay: {}
  };
  
  // Initialiser les compteurs par jour
  for (const day of DAYS) {
    counts.byDay[day] = {
      total: eventsByDay[day].length,
      stands: eventsByDay[day].filter(e => e.type === 'Stands').length,
      ateliers: eventsByDay[day].filter(e => e.type === 'Ateliers').length,
      conferences: eventsByDay[day].filter(e => e.type === 'Conf√©rences').length
    };
  }
  
  // Compter les √©v√©nements uniques
  const uniqueEvents = new Set();
  const uniqueStands = new Set();
  const uniqueAteliers = new Set();
  const uniqueConferences = new Set();
  
  Object.values(eventsByDay).flat().forEach(event => {
    const eventKey = `${event.type}-${event.id}`;
    uniqueEvents.add(eventKey);
    
    if (event.type === 'Stands') {
      uniqueStands.add(event.id);
    } else if (event.type === 'Ateliers') {
      uniqueAteliers.add(event.id);
    } else if (event.type === 'Conf√©rences') {
      uniqueConferences.add(event.id);
    }
  });
  
  counts.stands = uniqueStands.size;
  counts.ateliers = uniqueAteliers.size;
  counts.conferences = uniqueConferences.size;
  counts.total = counts.stands + counts.ateliers + counts.conferences;
  
  // Afficher les statistiques
  console.log('\nüìä Statistiques des √©v√©nements :');
  console.log(`Total: ${counts.total} √©v√©nements uniques`);
  console.log(`Stands: ${counts.stands}`);
  console.log(`Ateliers: ${counts.ateliers}`);
  console.log(`Conf√©rences: ${counts.conferences}`);
  
  console.log('\nR√©partition par jour:');
  for (const day of DAYS) {
    console.log(`${day}: ${counts.byDay[day].total} √©v√©nements (${counts.byDay[day].stands} stands, ${counts.byDay[day].ateliers} ateliers, ${counts.byDay[day].conferences} conf√©rences)`);
  }
  
  return eventsByDay;
}

// Sauvegarder les √©v√©nements dans un fichier JSON
async function saveEventsToJson(eventsByDay) {
  // Sauvegarder le fichier principal des √©v√©nements par jour
  const outputPath = path.join(OUTPUT_DIR, 'events.json');
  
  await fs.promises.writeFile(
    outputPath,
    JSON.stringify(eventsByDay, null, 2),
    'utf8'
  );
  
  console.log(`üìÑ Fichier JSON principal g√©n√©r√© : ${outputPath}`);
  
  // Sauvegarder √©galement les √©v√©nements par type pour r√©f√©rence
  const eventTypes = {
    stands: [],
    ateliers: [],
    conferences: []
  };
  
  // Regrouper les √©v√©nements par type
  Object.values(eventsByDay).forEach(events => {
    events.forEach(event => {
      if (event.type === 'Stands') {
        // √âviter les doublons pour les stands (qui peuvent appara√Ætre plusieurs jours)
        if (!eventTypes.stands.some(s => s.id === event.id)) {
          eventTypes.stands.push(event);
        }
      } else if (event.type === 'Ateliers') {
        eventTypes.ateliers.push(event);
      } else if (event.type === 'Conf√©rences') {
        eventTypes.conferences.push(event);
      }
    });
  });
  
  // Sauvegarder chaque type dans un fichier s√©par√©
  for (const [type, events] of Object.entries(eventTypes)) {
    const typePath = path.join(OUTPUT_DIR, `${type}.json`);
    await fs.promises.writeFile(
      typePath,
      JSON.stringify(events, null, 2),
      'utf8'
    );
    console.log(`üìÑ Fichier JSON pour ${type} g√©n√©r√© : ${typePath}`);
  }
}

// R√©initialiser les fichiers JSON
async function resetJsonFiles() {
  console.log('üóëÔ∏è R√©initialisation des fichiers JSON...');
  
  const jsonFiles = [
    path.join(OUTPUT_DIR, 'events.json'),
    path.join(OUTPUT_DIR, 'stands.json'),
    path.join(OUTPUT_DIR, 'ateliers.json'),
    path.join(OUTPUT_DIR, 'conferences.json')
  ];
  
  for (const file of jsonFiles) {
    if (fs.existsSync(file)) {
      try {
        await fs.promises.unlink(file);
        console.log(`‚úÖ Fichier supprim√©: ${file}`);
      } catch (error) {
        console.error(`‚ùå Erreur lors de la suppression du fichier ${file}:`, error);
      }
    }
  }
}

// V√©rifier que les chemins d'images en production sont corrects
async function verifyProductionImagePaths(eventsByDay) {
  let imageCount = 0;
  let missingCount = 0;
  
  console.log('üîç V√©rification des chemins d\'images...');
  
  // Parcourir tous les √©v√©nements
  for (const day in eventsByDay) {
    for (const event of eventsByDay[day]) {
      // V√©rifier l'image principale
      if (event.image) {
        imageCount++;
        
        // Extraire le chemin relatif de l'image (sans le / initial)
        const relativePath = event.image.startsWith('/') ? event.image.substring(1) : event.image;
        
        // V√©rifier si l'image existe dans le dossier public
        const publicPath = path.join(ROOT_DIR, 'public', relativePath);
        if (!fs.existsSync(publicPath)) {
          console.error(`‚ö†Ô∏è Image manquante: ${publicPath}`);
          missingCount++;
        }
      }
      
      // V√©rifier l'image du conf√©rencier
      if (event.speakerImage) {
        imageCount++;
        
        // Extraire le chemin relatif de l'image (sans le / initial)
        const relativePath = event.speakerImage.startsWith('/') ? event.speakerImage.substring(1) : event.speakerImage;
        
        // V√©rifier si l'image existe dans le dossier public
        const publicPath = path.join(ROOT_DIR, 'public', relativePath);
        if (!fs.existsSync(publicPath)) {
          console.error(`‚ö†Ô∏è Image de conf√©rencier manquante: ${publicPath}`);
          missingCount++;
        }
      }
    }
  }
  
  console.log(`üìä V√©rification des images termin√©e: ${imageCount} images v√©rifi√©es, ${missingCount} manquantes`);
  
  if (missingCount > 0) {
    console.warn(`‚ö†Ô∏è Attention: ${missingCount} images sont manquantes dans le dossier public. Les chemins dans le JSON pourraient √™tre incorrects.`);
  } else {
    console.log('‚úÖ Toutes les images sont pr√©sentes dans le dossier public.');
  }
  
  // Afficher un rappel important
  console.log('\nüîî RAPPEL IMPORTANT:');
  console.log('   Les chemins d\'images dans le JSON sont d√©finis comme:');
  console.log(`   ${getImagePath('example', 'example').replace('example/example.webp', '')}`);
  console.log('   Assurez-vous que ces chemins sont accessibles sur Netlify.');
  console.log('\n‚ö†Ô∏è NOTE POUR ASTRO:');
  console.log('   Si vous utilisez ces images dans des composants Astro, vous avez deux options:');
  console.log('   1. Utiliser la balise <img> standard avec le chemin exact du JSON:');
  console.log('      <img src="/images/events/stands/stand-123.webp" alt="..." />');
  console.log('   2. Utiliser le composant Image d\'Astro avec une URL absolue:');
  console.log('      <Image src="/images/events/stands/stand-123.webp" width="400" height="400" alt="..." />');
  console.log('   √âvitez d\'importer ces images avec import car Astro les traiterait diff√©remment.');
}

// Cr√©er un fichier README pour expliquer comment utiliser les images
async function createImagesReadme() {
  const readmePath = path.join(IMAGES_PUBLIC_DIR, 'README.md');
  
  const readmeContent = `# Images des √©v√©nements

Ce dossier contient les images optimis√©es pour les √©v√©nements du festival.

## Structure

Les images sont organis√©es par type d'√©v√©nement :
- \`/stands\` : Images des stands
- \`/ateliers\` : Images des ateliers
- \`/conferences\` : Images des conf√©rences

## Utilisation dans Astro

### Option 1 : Balise HTML standard (recommand√©)

\`\`\`astro
---
// Importer les donn√©es JSON
import events from '../content/festival/events.json';
---

{events.Mercredi.map(event => (
  <div>
    <h2>{event.title}</h2>
    {event.image && <img src={event.image} alt={event.title} />}
  </div>
))}
\`\`\`

### Option 2 : Composant Image d'Astro avec URL

\`\`\`astro
---
// Importer les donn√©es JSON et le composant Image
import { Image } from 'astro:assets';
import events from '../content/festival/events.json';
---

{events.Mercredi.map(event => (
  <div>
    <h2>{event.title}</h2>
    {event.image && (
      <Image 
        src={event.image} 
        width={400} 
        height={400} 
        alt={event.title} 
      />
    )}
  </div>
))}
\`\`\`

### ‚ö†Ô∏è Important

- N'essayez PAS d'importer ces images avec \`import\` car Astro les traiterait diff√©remment
- Les chemins dans le JSON sont d√©j√† optimis√©s pour fonctionner en production sur Netlify
- Utilisez toujours les chemins exacts fournis dans le JSON
`;

  await fs.promises.writeFile(readmePath, readmeContent, 'utf8');
  console.log(`üìù Fichier README cr√©√© : ${readmePath}`);
}

// Ex√©cuter la fonction principale
main().catch(error => {
  console.error('‚ùå Erreur lors de la g√©n√©ration des donn√©es statiques:', error);
  process.exit(1);
});

// Exporter les fonctions pour les tests
export {
  downloadAndOptimizeImage,
  createPlaceholderImage,
  getImagePath,
  convertPdfToImageBuffer
}; 