import type { Event } from '~/types/festival';
import { Api } from 'nocodb-sdk';
import { NOCODB_BASE_URL, NOCODB_CONFIG, getNocoDBToken } from '~/config/nocodb';
import { FestivalDay } from '~/services/events';
import fs from 'fs';
import path from 'path';

// Configuration du cache
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes en millisecondes
const FORCE_REFRESH = false; // Mettre √† true pour forcer le rafra√Æchissement du cache
const AUTO_REFRESH_INTERVAL = 15 * 60 * 1000; // 15 minutes en millisecondes
const MAX_CACHE_AGE = 60 * 60 * 1000; // 1 heure en millisecondes (dur√©e maximale avant rafra√Æchissement forc√©)
const LIGHT_CHECK_INTERVAL = 3 * 60 * 1000; // 3 minutes en millisecondes (intervalle pour les v√©rifications l√©g√®res)

// Cache pour les diff√©rentes requ√™tes
const standsCache = { timestamp: 0, data: null as NocoDBResponse | null, count: 0 };
const ateliersCache = { timestamp: 0, data: null as NocoDBSessionsResponse | null, count: 0 };
const conferencesCache = { timestamp: 0, data: null as NocoDBSessionsResponse | null, count: 0 };
const sessionsCache = { timestamp: 0, data: null as NocoDBSessionsResponse | null, count: 0 };

// Variables pour suivre les mises √† jour
let autoRefreshActive = false;
let lastFullRefresh = 0; // Timestamp du dernier rafra√Æchissement complet
let lastLightCheck = 0; // Timestamp de la derni√®re v√©rification l√©g√®re
let updateDetected = false; // Indique si une mise √† jour a √©t√© d√©tect√©e

/**
 * V√©rifie si les donn√©es en cache sont encore valides
 * @param cache Objet de cache √† v√©rifier
 * @returns true si le cache est valide, false sinon
 */
function isCacheValid<T>(cache: { timestamp: number, data: T | null }): boolean {
  if (FORCE_REFRESH) return false;
  if (!cache.data) return false;
  
  const now = Date.now();
  const age = now - cache.timestamp;
  
  // Si le cache est trop vieux (plus de MAX_CACHE_AGE), on le consid√®re comme invalide
  if (age > MAX_CACHE_AGE) {
    console.log(`üïí Cache trop ancien (${Math.round(age / 1000 / 60)} minutes), rafra√Æchissement forc√©`);
    return false;
  }
  
  // Sinon, on v√©rifie si le cache est encore valide selon la dur√©e normale
  return age < CACHE_DURATION;
}

/**
 * Met √† jour le cache avec de nouvelles donn√©es
 * @param cache Objet de cache √† mettre √† jour
 * @param data Donn√©es √† stocker en cache
 * @param name Nom du cache pour les logs
 */
function updateCache<T>(cache: { timestamp: number, data: T | null }, data: T, name: string): void {
  cache.timestamp = Date.now();
  cache.data = data;
  console.log(`üîÑ Cache mis √† jour pour "${name}" √† ${new Date().toLocaleTimeString()}`);
}

/**
 * Vide tous les caches pour forcer un rafra√Æchissement des donn√©es
 */
export function clearAllCaches(): void {
  standsCache.timestamp = 0;
  standsCache.data = null;
  
  ateliersCache.timestamp = 0;
  ateliersCache.data = null;
  
  conferencesCache.timestamp = 0;
  conferencesCache.data = null;
  
  sessionsCache.timestamp = 0;
  sessionsCache.data = null;
  
  console.log(`üßπ Tous les caches ont √©t√© vid√©s`);
}

/**
 * Effectue une v√©rification l√©g√®re pour d√©tecter les nouvelles donn√©es
 * Cette fonction ne r√©cup√®re que le nombre d'√©l√©ments pour chaque type de donn√©es
 * et compare avec les valeurs en cache pour d√©tecter les mises √† jour
 */
export async function checkForUpdates(): Promise<boolean> {
  const now = Date.now();
  
  // Limiter la fr√©quence des v√©rifications l√©g√®res
  if (now - lastLightCheck < LIGHT_CHECK_INTERVAL) {
    console.log(`‚è±Ô∏è Derni√®re v√©rification l√©g√®re il y a ${Math.round((now - lastLightCheck) / 1000)} secondes, attente...`);
    return updateDetected;
  }
  
  lastLightCheck = now;
  console.log('üîç V√©rification l√©g√®re des mises √† jour...');
  
  try {
    const api = initNocoDBApi();
    let hasUpdates = false;
    
    // V√©rifier les stands
    if (standsCache.data) {
      const standsCount = await getItemCount(api, NOCODB_CONFIG.tables.stands);
      if (standsCount !== standsCache.count) {
        console.log(`üîÑ Mise √† jour d√©tect√©e pour les stands: ${standsCache.count} -> ${standsCount}`);
        standsCache.count = standsCount;
        hasUpdates = true;
      }
    }
    
    // V√©rifier les ateliers
    if (ateliersCache.data) {
      const ateliersCount = await getItemCount(api, NOCODB_CONFIG.tables.ateliers);
      if (ateliersCount !== ateliersCache.count) {
        console.log(`üîÑ Mise √† jour d√©tect√©e pour les ateliers: ${ateliersCache.count} -> ${ateliersCount}`);
        ateliersCache.count = ateliersCount;
        hasUpdates = true;
      }
    }
    
    // V√©rifier les conf√©rences
    if (conferencesCache.data) {
      const conferencesCount = await getItemCount(api, NOCODB_CONFIG.tables.conferences);
      if (conferencesCount !== conferencesCache.count) {
        console.log(`üîÑ Mise √† jour d√©tect√©e pour les conf√©rences: ${conferencesCache.count} -> ${conferencesCount}`);
        conferencesCache.count = conferencesCount;
        hasUpdates = true;
      }
    }
    
    // Si des mises √† jour sont d√©tect√©es, rafra√Æchir les donn√©es
    if (hasUpdates) {
      console.log('üîÑ Mises √† jour d√©tect√©es, rafra√Æchissement des donn√©es...');
      updateDetected = true;
      
      // Rafra√Æchir les donn√©es avec un d√©lai pour √©viter de surcharger l'API
      setTimeout(() => {
        forceRefreshAllData().catch(error => {
          console.error('‚ùå Erreur lors du rafra√Æchissement des donn√©es apr√®s d√©tection de mises √† jour:', error);
        });
      }, 1000);
    } else {
      console.log('‚úÖ Aucune mise √† jour d√©tect√©e');
    }
    
    return hasUpdates;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des mises √† jour:', error);
    return false;
  }
}

/**
 * R√©cup√®re le nombre d'√©l√©ments pour une table donn√©e
 * @param api Instance de l'API NocoDB
 * @param table Nom de la table
 * @returns Nombre d'√©l√©ments dans la table
 */
async function getItemCount(api: Api<unknown>, table: string): Promise<number> {
  try {
    // Utiliser une requ√™te l√©g√®re qui ne r√©cup√®re qu'une seule ligne
    // mais qui renvoie le nombre total d'√©l√©ments
    const response = await api.dbTableRow.list(
      "noco",
      NOCODB_CONFIG.projectId,
      table,
      {
        limit: 1,
        offset: 0
      }
    );
    
    return response.pageInfo?.totalRows || 0;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration du nombre d'√©l√©ments pour ${table}:`, error);
    return 0;
  }
}

/**
 * Force le rafra√Æchissement de toutes les donn√©es
 * @returns Promise qui se r√©sout lorsque toutes les donn√©es sont rafra√Æchies
 */
export async function forceRefreshAllData(): Promise<void> {
  const now = Date.now();
  const timeSinceLastRefresh = now - lastFullRefresh;
  
  // Limiter la fr√©quence des rafra√Æchissements complets (pas plus d'une fois par minute)
  if (timeSinceLastRefresh < 60 * 1000) {
    console.log(`‚è±Ô∏è Dernier rafra√Æchissement il y a ${Math.round(timeSinceLastRefresh / 1000)} secondes, attente...`);
    return;
  }
  
  console.log('üîÑ For√ßage du rafra√Æchissement de toutes les donn√©es...');
  lastFullRefresh = now;
  updateDetected = false; // R√©initialiser le drapeau de d√©tection de mise √† jour
  
  // Vider tous les caches
  clearAllCaches();
  
  try {
    // R√©cup√©rer toutes les donn√©es en parall√®le
    const [stands, ateliers, conferences, sessions] = await Promise.all([
      fetchStands(),
      fetchAteliers(),
      fetchConferences(),
      fetchSessions()
    ]);
    
    // Mettre √† jour les compteurs
    standsCache.count = stands.list.length;
    ateliersCache.count = ateliers.list.length;
    conferencesCache.count = conferences.list.length;
    sessionsCache.count = sessions.list.length;
    
    console.log('‚úÖ Toutes les donn√©es ont √©t√© rafra√Æchies avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors du rafra√Æchissement des donn√©es:', error);
    throw error;
  }
}

/**
 * D√©marre le rafra√Æchissement automatique des donn√©es
 * @param interval Intervalle de rafra√Æchissement en millisecondes (par d√©faut: 15 minutes)
 */
export function startAutoRefresh(interval: number = AUTO_REFRESH_INTERVAL): void {
  if (autoRefreshActive) {
    console.log('‚ö†Ô∏è Le rafra√Æchissement automatique est d√©j√† actif');
    return;
  }
  
  console.log(`üîÑ D√©marrage du rafra√Æchissement automatique toutes les ${interval / 60000} minutes`);
  
  // Rafra√Æchir imm√©diatement les donn√©es
  forceRefreshAllData().catch(error => {
    console.error('‚ùå Erreur lors du rafra√Æchissement initial des donn√©es:', error);
  });
  
  // Configurer le rafra√Æchissement p√©riodique complet
  setInterval(() => {
    console.log('‚è∞ Rafra√Æchissement automatique des donn√©es...');
    forceRefreshAllData().catch(error => {
      console.error('‚ùå Erreur lors du rafra√Æchissement automatique des donn√©es:', error);
    });
  }, interval);
  
  // Configurer les v√©rifications l√©g√®res plus fr√©quentes
  setInterval(() => {
    checkForUpdates().catch(error => {
      console.error('‚ùå Erreur lors de la v√©rification l√©g√®re des mises √† jour:', error);
    });
  }, LIGHT_CHECK_INTERVAL);
  
  autoRefreshActive = true;
}

/**
 * V√©rifie si les donn√©es sont d√©j√† en cache
 * @returns true si toutes les donn√©es sont en cache, false sinon
 */
export function isDataCached(): boolean {
  return Boolean(
    standsCache.data && 
    ateliersCache.data && 
    conferencesCache.data && 
    sessionsCache.data
  );
}

// Types pour les donn√©es NocoDB
export interface NocoDBStand {
  ID: number;
  Pr√©nom: string;
  Nom: string;
  Email: string;
  GSM: string;
  "Site internet": string;
  "Choisissez un titre court": string;
  "√Ä qui s'adresse le stand ?": string;
  "Niveau d'enseignement": string;
  "Type d'enseignement": string;
  "D√©crivez bri√®vement votre stand pour les visiteurs": string;
  "Envoyez votre logo": Array<{
    id: string;
    url: string;
    title: string;
    mimetype: string;
    size: number;
    width: number;
    height: number;
    thumbnails: {
      tiny: { signedUrl: string };
      small: { signedUrl: string };
      card_cover: { signedUrl: string };
    };
    signedUrl: string;
  }>;
  Statut: string;
  "Th√©matique li√©e": { Id: number; Title: string } | null;
  Espaces: { Id: number; Title: string } | null;
  Jours: number; // 0 = Les trois jours, 1 = Mercredi, 2 = Jeudi, 3 = Vendredi
}

// Interface pour les ateliers
export interface NocoDBAtelier {
  ID: number;
  Pr√©nom: string;
  Nom: string;
  Email: string;
  GSM: string;
  "Site internet": string;
  "Choisissez un titre court": string;
  "√Ä qui s'adresse atelier ?": string;
  "Niveau d'enseignement": string;
  "Type d'enseignement": string;
  "D√©crivez bri√®vement votre animation pour les visiteurs": string;
  "√Ä propos de vous": string;
  "Envoyez votre logo": Array<{
    id: string;
    url: string;
    title: string;
    mimetype: string;
    size: number;
    width: number;
    height: number;
    thumbnails: {
      tiny: { signedUrl: string };
      small: { signedUrl: string };
      card_cover: { signedUrl: string };
    };
    signedUrl: string;
  }>;
  Jours: string;
  Heure: string;
  Statut: string;
  Espaces: string;
}

// Interface pour les conf√©rences
export interface NocoDBConference {
  ID: number;
  Pr√©nom: string;
  Nom: string;
  Email: string;
  GSM: string;
  "Site internet": string;
  "Choisissez un titre court"?: string;
  "Choisissez un titre pour la conf√©rence"?: string;
  "√Ä qui s'adresse la conf√©rence ?"?: string;
  "√Ä qui s'adresse conference ?"?: string;
  "Niveau d'enseignement": string;
  "Type d'enseignement": string;
  "D√©crivez bri√®vement votre conf√©rence pour les visiteurs": string;
  "√Ä propos de vous": string;
  "Envoyez votre logo": Array<{
    id: string;
    url: string;
    title: string;
    mimetype: string;
    size: number;
    width: number;
    height: number;
    thumbnails: {
      tiny: { signedUrl: string };
      small: { signedUrl: string };
      card_cover: { signedUrl: string };
    };
    signedUrl: string;
  }>;
  "Envoyez une photo de vous": Array<{
    id: string;
    url: string;
    title: string;
    mimetype: string;
    size: number;
    width: number;
    height: number;
    thumbnails: {
      tiny: { signedUrl: string };
      small: { signedUrl: string };
      card_cover: { signedUrl: string };
    };
    signedUrl: string;
  }>;
  Jours: { Id: number; Title: string } | string;
  Heure: string | null;
  Statut: string;
  Espaces: { Id: number; Title: string } | string;
}

// Type union pour les sessions (ateliers et conf√©rences)
export type NocoDBSession = NocoDBAtelier | NocoDBConference;

export interface NocoDBResponse {
  list: NocoDBStand[];
  pageInfo: {
    totalRows: number;
    page: number;
    pageSize: number;
    isFirstPage: boolean;
    isLastPage: boolean;
  };
  stats: {
    dbQueryTime: string;
  };
}

export interface NocoDBSessionsResponse {
  list: NocoDBSession[];
  pageInfo: {
    totalRows: number;
    page: number;
    pageSize: number;
    isFirstPage: boolean;
    isLastPage: boolean;
  };
  stats: {
    dbQueryTime: string;
  };
}

/**
 * Initialise l'API NocoDB avec le token d'authentification
 * @returns Instance de l'API NocoDB
 */
function initNocoDBApi() {
  const apiToken = getNocoDBToken();
  
  console.log('Initialisation de l\'API NocoDB avec le token:', apiToken ? 'Token pr√©sent' : 'Token manquant');
  
  return new Api({
    baseURL: NOCODB_BASE_URL,
    headers: {
      "xc-token": apiToken
    }
  });
}

/**
 * Sauvegarde les donn√©es brutes dans un fichier JSON pour d√©bogage
 * @param data Les donn√©es √† sauvegarder
 * @param filename Le nom du fichier
 */
function saveRawData(data: unknown, filename: string): void {
  try {
    // Cr√©er le dossier logs s'il n'existe pas
    const logsDir = path.resolve(process.cwd(), 'logs');
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
    }
    
    // √âcrire les donn√©es dans un fichier JSON
    const filePath = path.join(logsDir, filename);
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    console.log(`‚úÖ Donn√©es sauvegard√©es dans ${filePath}`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de la sauvegarde des donn√©es:`, error);
  }
}

/**
 * R√©cup√®re les stands depuis l'API NocoDB
 * @returns R√©ponse contenant la liste des stands
 */
export async function fetchStands(): Promise<NocoDBResponse> {
  // V√©rifier si les donn√©es sont en cache et valides
  if (isCacheValid(standsCache)) {
    console.log('üì¶ Utilisation des donn√©es en cache pour les stands');
    return standsCache.data!;
  }
  
  try {
    const api = initNocoDBApi();
    
    console.log('Appel √† l\'API NocoDB pour r√©cup√©rer les stands...');
    
    // Appel √† l'API pour r√©cup√©rer les donn√©es
    const response = await api.dbTableRow.list(
      "noco",
      NOCODB_CONFIG.projectId,
      NOCODB_CONFIG.tables.stands,
      NOCODB_CONFIG.defaultQueryParams.stands
    );
    
    console.log(`Donn√©es r√©cup√©r√©es avec succ√®s: ${response.list.length} stands trouv√©s`);
    
    // Sauvegarder la r√©ponse compl√®te
    saveRawData(response, 'stands_response.json');
    
    // Formatage de la r√©ponse pour correspondre √† l'interface NocoDBResponse
    const formattedResponse = {
      list: response.list as NocoDBStand[],
      pageInfo: {
        totalRows: response.pageInfo?.totalRows || 0,
        page: response.pageInfo?.page || 1,
        pageSize: response.pageInfo?.pageSize || 25,
        isFirstPage: response.pageInfo?.isFirstPage || true,
        isLastPage: response.pageInfo?.isLastPage || true
      },
      stats: { 
        dbQueryTime: "0" // Valeur par d√©faut car stats n'existe pas dans la r√©ponse
      }
    };
    
    // Mettre √† jour le cache
    updateCache(standsCache, formattedResponse, 'stands');
    
    return formattedResponse;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des stands:', error);
    throw error;
  }
}

/**
 * R√©cup√®re les ateliers depuis l'API NocoDB
 * @returns R√©ponse contenant la liste des ateliers
 */
export async function fetchAteliers(): Promise<NocoDBSessionsResponse> {
  // V√©rifier si les donn√©es sont en cache et valides
  if (isCacheValid(ateliersCache)) {
    console.log('üì¶ Utilisation des donn√©es en cache pour les ateliers');
    return ateliersCache.data!;
  }
  
  try {
    const api = initNocoDBApi();
    
    console.log('Appel √† l\'API NocoDB pour r√©cup√©rer les ateliers...');
    
    // Appel √† l'API pour r√©cup√©rer les donn√©es
    const response = await api.dbTableRow.list(
      "noco",
      NOCODB_CONFIG.projectId,
      NOCODB_CONFIG.tables.ateliers,
      NOCODB_CONFIG.defaultQueryParams.ateliers
    );
    
    console.log(`Donn√©es r√©cup√©r√©es avec succ√®s: ${response.list.length} ateliers trouv√©s`);
    
    // Sauvegarder la r√©ponse compl√®te
    saveRawData(response, 'ateliers_response.json');
    
    // Formatage de la r√©ponse pour correspondre √† l'interface NocoDBSessionsResponse
    const formattedResponse = {
      list: response.list as NocoDBSession[],
      pageInfo: {
        totalRows: response.pageInfo?.totalRows || 0,
        page: response.pageInfo?.page || 1,
        pageSize: response.pageInfo?.pageSize || 25,
        isFirstPage: response.pageInfo?.isFirstPage || true,
        isLastPage: response.pageInfo?.isLastPage || true
      },
      stats: { 
        dbQueryTime: "0" // Valeur par d√©faut car stats n'existe pas dans la r√©ponse
      }
    };
    
    // Mettre √† jour le cache
    updateCache(ateliersCache, formattedResponse, 'ateliers');
    
    return formattedResponse;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des ateliers:', error);
    throw error;
  }
}

/**
 * R√©cup√®re les conf√©rences depuis l'API NocoDB
 * @returns R√©ponse contenant la liste des conf√©rences
 */
export async function fetchConferences(): Promise<NocoDBSessionsResponse> {
  // V√©rifier si les donn√©es sont en cache et valides
  if (isCacheValid(conferencesCache)) {
    console.log('üì¶ Utilisation des donn√©es en cache pour les conf√©rences');
    return conferencesCache.data!;
  }
  
  try {
    const api = initNocoDBApi();
    
    console.log('Appel √† l\'API NocoDB pour r√©cup√©rer les conf√©rences...');
    
    // Appel √† l'API pour r√©cup√©rer les donn√©es
    const response = await api.dbTableRow.list(
      "noco",
      NOCODB_CONFIG.projectId,
      NOCODB_CONFIG.tables.conferences,
      NOCODB_CONFIG.defaultQueryParams.conferences
    );
    
    console.log(`Donn√©es r√©cup√©r√©es avec succ√®s: ${response.list.length} conf√©rences trouv√©es`);
    
    // Sauvegarder la r√©ponse compl√®te
    saveRawData(response, 'conferences_response.json');
    
    // Formatage de la r√©ponse pour correspondre √† l'interface NocoDBSessionsResponse
    const formattedResponse = {
      list: response.list as NocoDBSession[],
      pageInfo: {
        totalRows: response.pageInfo?.totalRows || 0,
        page: response.pageInfo?.page || 1,
        pageSize: response.pageInfo?.pageSize || 25,
        isFirstPage: response.pageInfo?.isFirstPage || true,
        isLastPage: response.pageInfo?.isLastPage || true
      },
      stats: { 
        dbQueryTime: "0" // Valeur par d√©faut car stats n'existe pas dans la r√©ponse
      }
    };
    
    // Mettre √† jour le cache
    updateCache(conferencesCache, formattedResponse, 'conferences');
    
    return formattedResponse;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des conf√©rences:', error);
    throw error;
  }
}

/**
 * R√©cup√®re toutes les sessions (ateliers et conf√©rences) depuis l'API NocoDB
 * @returns R√©ponse contenant la liste des sessions
 */
export async function fetchSessions(): Promise<NocoDBSessionsResponse> {
  // V√©rifier si les donn√©es sont en cache et valides
  if (isCacheValid(sessionsCache)) {
    console.log('üì¶ Utilisation des donn√©es en cache pour les sessions');
    return sessionsCache.data!;
  }
  
  try {
    // R√©cup√©rer les ateliers et les conf√©rences
    const ateliers = await fetchAteliers();
    const conferences = await fetchConferences();
    
    // Combiner les r√©sultats
    const combinedList = [...ateliers.list, ...conferences.list];
    
    console.log(`Sessions combin√©es: ${combinedList.length} sessions au total (${ateliers.list.length} ateliers + ${conferences.list.length} conf√©rences)`);
    
    // Formatage de la r√©ponse pour correspondre √† l'interface NocoDBSessionsResponse
    const formattedResponse = {
      list: combinedList,
      pageInfo: {
        totalRows: combinedList.length,
        page: 1,
        pageSize: combinedList.length,
        isFirstPage: true,
        isLastPage: true
      },
      stats: { 
        dbQueryTime: "0"
      }
    };
    
    // Mettre √† jour le cache
    updateCache(sessionsCache, formattedResponse, 'sessions');
    
    return formattedResponse;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des sessions:', error);
    throw error;
  }
}

/**
 * D√©termine le jour de l'√©v√©nement √† partir de la valeur fournie
 * @param jourValue La valeur du jour √† traiter
 * @returns Le jour format√© comme FestivalDay
 */
function getEventDay(jourValue: unknown): FestivalDay {
  // G√©rer les valeurs nulles ou undefined
  if (jourValue === null || jourValue === undefined) {
    return '√Ä d√©finir';
  }
  
  // Si c'est un objet avec un champ Title
  if (typeof jourValue === 'object' && jourValue !== null && 'Title' in jourValue) {
    const title = (jourValue as { Title: string }).Title;
    
    // Normaliser le titre pour extraire le jour
    const titleLower = title.toLowerCase();
    if (titleLower.includes('mercredi')) return 'Mercredi';
    if (titleLower.includes('jeudi')) return 'Jeudi';
    if (titleLower.includes('vendredi')) return 'Vendredi';
    
    return '√Ä d√©finir';
  }
  
  // Si c'est une cha√Æne de caract√®res
  if (typeof jourValue === 'string') {
    const jourLower = jourValue.toLowerCase();
    if (jourLower.includes('mercredi')) return 'Mercredi';
    if (jourLower.includes('jeudi')) return 'Jeudi';
    if (jourLower.includes('vendredi')) return 'Vendredi';
    
    return '√Ä d√©finir';
  }
  
  // Si c'est un nombre (0 = Les trois jours, 1 = Mercredi, 2 = Jeudi, 3 = Vendredi)
  if (typeof jourValue === 'number') {
    if (jourValue === 1) return 'Mercredi';
    if (jourValue === 2) return 'Jeudi';
    if (jourValue === 3) return 'Vendredi';
    
    return '√Ä d√©finir';
  }
  
  return '√Ä d√©finir';
}

// Fonction pour convertir les stands en √©v√©nements (pr√©sents tous les jours)
export function convertStandsToEvents(stands: NocoDBStand[]): Event[] {
  console.log(`[DEBUG NOCODB] Conversion de ${stands.length} stands en √©v√©nements`);
  const defaultImage = '/images/default-stand.jpg';
  
  // Tableau pour stocker tous les √©v√©nements
  const allEvents: Event[] = [];
  
  // Pour chaque stand, cr√©er trois √©v√©nements (un pour chaque jour)
  stands.forEach(stand => {
    // Jours du festival
    const festivalDays: FestivalDay[] = ['Mercredi', 'Jeudi', 'Vendredi'];
    
    // R√©cup√©rer l'URL de l'image ou utiliser l'image par d√©faut
    const imageUrl = stand["Envoyez votre logo"]?.length > 0 
      ? stand["Envoyez votre logo"][0].signedUrl 
      : defaultImage;
    
    // G√©n√©rer un titre plus descriptif si le titre est manquant
    let title = stand["Choisissez un titre court"];
    if (!title || title.trim() === "") {
      // Si le pr√©nom et le nom sont disponibles, utiliser "Stand de [Pr√©nom Nom]"
      if (stand.Pr√©nom && stand.Nom) {
        title = `Stand de ${stand.Pr√©nom} ${stand.Nom}`;
      } 
      // Sinon, si nous avons une description, utiliser les premiers mots
      else if (stand["D√©crivez bri√®vement votre stand pour les visiteurs"]) {
        const description = stand["D√©crivez bri√®vement votre stand pour les visiteurs"];
        // Prendre les 5 premiers mots de la description ou moins si la description est courte
        const words = description.split(' ').slice(0, 5);
        title = words.join(' ') + (words.length === 5 ? '...' : '');
      } 
      // En dernier recours, utiliser un titre g√©n√©rique avec l'ID
      else {
        title = `Stand #${stand.ID}`;
      }
      
      console.log(`‚ö†Ô∏è Titre manquant pour le stand #${stand.ID}, titre g√©n√©r√©: "${title}"`);
    }
    
    // Cr√©er un √©v√©nement pour chaque jour
    festivalDays.forEach(day => {
      allEvents.push({
        id: `stand-${stand.ID}-${day}`,
        title: title,
        description: stand["D√©crivez bri√®vement votre stand pour les visiteurs"] || "Description √† venir",
        day,
        time: "Toute la journ√©e",
        location: stand.Espaces?.Title || "Emplacement √† d√©finir",
        speaker: stand.Pr√©nom && stand.Nom ? `${stand.Pr√©nom} ${stand.Nom}` : "Exposant √† d√©finir",
        type: "Stands" as const,
        image: imageUrl,
        url: stand["Site internet"] || "",
        target: stand["√Ä qui s'adresse le stand ?"] || "Public √† d√©finir",
        level: stand["Niveau d'enseignement"] || "Niveau √† d√©finir",
        teachingType: stand["Type d'enseignement"] || "Type √† d√©finir"
      });
    });
  });
  
  // Analyser la distribution des jours pour les stands
  const standsByDay: Record<FestivalDay, number> = {} as Record<FestivalDay, number>;
  allEvents.forEach(event => {
    if (!standsByDay[event.day]) standsByDay[event.day] = 0;
    standsByDay[event.day]++;
  });
  console.log('üìä Distribution des stands par jour:', standsByDay);
  
  return allEvents;
}

// Fonction pour convertir les ateliers en √©v√©nements
export function convertAteliersToEvents(ateliers: NocoDBAtelier[]): Event[] {
  const defaultImage = '/images/default-workshop.jpg';
  
  const events = ateliers.map(atelier => {
    // D√©terminer le jour
    const day = getEventDay(atelier.Jours);
    
    
    // R√©cup√©rer l'URL de l'image ou utiliser l'image par d√©faut
    const imageUrl = atelier["Envoyez votre logo"]?.length > 0 
      ? atelier["Envoyez votre logo"][0].signedUrl 
      : defaultImage;
    
    // G√©n√©rer un titre plus descriptif si le titre est manquant
    let title = atelier["Choisissez un titre court"];
    if (!title || title.trim() === "") {
      // Si le pr√©nom et le nom sont disponibles, utiliser "Atelier de [Pr√©nom Nom]"
      if (atelier.Pr√©nom && atelier.Nom) {
        title = `Atelier de ${atelier.Pr√©nom} ${atelier.Nom}`;
      } 
      // Sinon, si nous avons une description, utiliser les premiers mots
      else if (atelier["D√©crivez bri√®vement votre animation pour les visiteurs"]) {
        const description = atelier["D√©crivez bri√®vement votre animation pour les visiteurs"];
        // Prendre les 5 premiers mots de la description ou moins si la description est courte
        const words = description.split(' ').slice(0, 5);
        title = words.join(' ') + (words.length === 5 ? '...' : '');
      } 
      // En dernier recours, utiliser un titre g√©n√©rique avec l'ID
      else {
        title = `Atelier #${atelier.ID}`;
      }
      
      console.log(`‚ö†Ô∏è Titre manquant pour l'atelier #${atelier.ID}, titre g√©n√©r√©: "${title}"`);
    }
    
    return {
      id: `atelier-${atelier.ID}`,
      title: title,
      description: atelier["D√©crivez bri√®vement votre animation pour les visiteurs"] || "Description √† venir",
      day,
      time: atelier.Heure || "Horaire √† d√©finir",
      location: atelier.Espaces || "Emplacement √† d√©finir",
      speaker: atelier.Pr√©nom && atelier.Nom ? `${atelier.Pr√©nom} ${atelier.Nom}` : "Intervenant √† d√©finir",
      type: "Ateliers" as const,
      image: imageUrl,
      url: atelier["Site internet"] || "",
      target: atelier["√Ä qui s'adresse atelier ?"] || "Public √† d√©finir",
      level: atelier["Niveau d'enseignement"] || "Niveau √† d√©finir",
      teachingType: atelier["Type d'enseignement"] || "Type √† d√©finir"
    };
  });
  
  // Analyser la distribution des jours pour les ateliers
  const ateliersByDay: Record<FestivalDay, number> = {} as Record<FestivalDay, number>;
  events.forEach(event => {
    if (!ateliersByDay[event.day]) ateliersByDay[event.day] = 0;
    ateliersByDay[event.day]++;
  });
  console.log('üìä Distribution des ateliers par jour:', ateliersByDay);
  
  return events;
}

// Fonction pour convertir les conf√©rences en √©v√©nements
export function convertConferencesToEvents(conferences: NocoDBConference[]): Event[] {
  const defaultImage = '/images/default-conference.jpg';
  const defaultSpeakerImage = '/images/default-speaker.jpg';
  
  console.log('üîÑ Conversion des conf√©rences en √©v√©nements...');
  
  const events = conferences.map((conference, index) => {
    try {
      // D√©terminer le jour
      const day = getEventDay(conference.Jours);
      
      // Image URL extraction
      const imageUrl = conference["Envoyez votre logo"]?.length > 0 
        ? conference["Envoyez votre logo"][0].signedUrl 
        : defaultImage;

      // Speaker image extraction
      const speakerImageUrl = conference["Envoyez une photo de vous"]?.length > 0 
        ? conference["Envoyez une photo de vous"][0].signedUrl 
        : defaultSpeakerImage;

      // G√©n√©rer un titre plus descriptif si le titre est manquant
      let title = conference["Choisissez un titre pour la conf√©rence"];
      if (!title || title.trim() === "") {
        // Si le pr√©nom et le nom sont disponibles, utiliser "Conf√©rence de [Pr√©nom Nom]"
        if (conference.Pr√©nom && conference.Nom) {
          title = `Conf√©rence de ${conference.Pr√©nom} ${conference.Nom}`;
        } 
        // Sinon, si nous avons une description, utiliser les premiers mots
        else if (conference["D√©crivez bri√®vement votre conf√©rence pour les visiteurs"]) {
          const description = conference["D√©crivez bri√®vement votre conf√©rence pour les visiteurs"];
          // Prendre les 5 premiers mots de la description ou moins si la description est courte
          const words = description.split(' ').slice(0, 5);
          title = words.join(' ') + (words.length === 5 ? '...' : '');
        } 
        // En dernier recours, utiliser un titre g√©n√©rique avec l'ID
        else {
          title = `Conf√©rence #${conference.ID}`;
        }
        
        console.log(`‚ö†Ô∏è Titre manquant pour la conf√©rence #${conference.ID}, titre g√©n√©r√©: "${title}"`);
      }

      return {
        id: `conference-${conference.ID}`,
        title: title,
        description: conference["D√©crivez bri√®vement votre conf√©rence pour les visiteurs"] || "Description √† venir",
        day,
        time: conference.Heure || "Horaire √† d√©finir",
        location: typeof conference.Espaces === 'object' ? conference.Espaces?.Title : conference.Espaces || "Emplacement √† d√©finir",
        speaker: conference.Pr√©nom && conference.Nom ? `${conference.Pr√©nom} ${conference.Nom}` : "Intervenant √† d√©finir",
        type: "Conf√©rences" as const,
        image: imageUrl,
        speakerImage: speakerImageUrl,
        url: conference["Site internet"] || "",
        target: conference["√Ä qui s'adresse la conf√©rence ?"] || "Public √† d√©finir",
        level: conference["Niveau d'enseignement"] || "Niveau √† d√©finir",
        teachingType: conference["Type d'enseignement"] || "Type √† d√©finir"
      };
    } catch (error) {
      console.error(`‚ùå Erreur lors de la conversion de la conf√©rence #${index + 1}:`, error);
      return null;
    }
  }).filter(event => event !== null);
  
  // Analyser la distribution des jours pour les conf√©rences
  const conferencesByDay: Record<FestivalDay, number> = {} as Record<FestivalDay, number>;
  events.forEach(event => {
    if (!conferencesByDay[event.day]) conferencesByDay[event.day] = 0;
    conferencesByDay[event.day]++;
  });
  console.log('üìä Distribution des conf√©rences par jour:', conferencesByDay);
  
  return events;
}

// Fonction pour convertir les sessions (ateliers et conf√©rences) en √©v√©nements
export function convertSessionsToEvents(sessions: NocoDBSession[]): Event[] {
  // Fonction pour d√©terminer si une session est un atelier
  const isAtelier = (session: NocoDBSession): session is NocoDBAtelier => {
    return (
      // Champs sp√©cifiques aux ateliers
      "√Ä qui s'adresse atelier ?" in session &&
      // Champ de description sp√©cifique aux ateliers
      "D√©crivez bri√®vement votre animation pour les visiteurs" in session
    );
  };

  // Fonction pour d√©terminer si une session est une conf√©rence
  const isConference = (session: NocoDBSession): session is NocoDBConference => {
    return (
      // Champs sp√©cifiques aux conf√©rences
      (("√Ä qui s'adresse la conf√©rence ?" in session) || 
       ("√Ä qui s'adresse conference ?" in session)) &&
      // Champ de description sp√©cifique aux conf√©rences
      "D√©crivez bri√®vement votre conf√©rence pour les visiteurs" in session
    );
  };

  // S√©parer les sessions en ateliers et conf√©rences
  const ateliers = sessions.filter(isAtelier);
  const conferences = sessions.filter(isConference);

  console.log(`üè∑Ô∏è Sessions d√©tect√©es:`);
  console.log(`   - Ateliers: ${ateliers.length}`);
  console.log(`   - Conf√©rences: ${conferences.length}`);

  // Afficher des d√©tails sur les sessions non class√©es
  const unclassifiedSessions = sessions.filter(
    session => !isAtelier(session) && !isConference(session)
  );
  
  if (unclassifiedSessions.length > 0) {
    console.warn('‚ö†Ô∏è Sessions non class√©es:');
    unclassifiedSessions.forEach((session, index) => {
      console.warn(`   Session #${index + 1} - Champs disponibles:`, Object.keys(session));
      console.warn(`   D√©tails de la session:`, JSON.stringify(session, null, 2));
    });
  }

  // Convertir les ateliers
  const atelierEvents = convertAteliersToEvents(ateliers);
  
  // Convertir les conf√©rences
  const conferenceEvents = convertConferencesToEvents(conferences);

  // Combiner les √©v√©nements
  const allEvents = [...atelierEvents, ...conferenceEvents];

  // Analyser la r√©partition des √©v√©nements par jour
  const eventsByDay = organizeEventsByDay(allEvents);
  console.log('üìä R√©partition des √©v√©nements par jour apr√®s conversion:');
  Object.entries(eventsByDay).forEach(([day, events]) => {
    console.log(`   - ${day}: ${events.length} √©v√©nements`);
  });
  
  // V√©rifier sp√©cifiquement les √©v√©nements du vendredi
  console.log('üîç V√©rification des √©v√©nements du vendredi:');
  const vendrediEvents = eventsByDay['Vendredi'] || [];
  if (vendrediEvents.length === 0) {
    console.warn('‚ö†Ô∏è Aucun √©v√©nement trouv√© pour vendredi!');
  } else {
    console.log(`   Nombre d'√©v√©nements du vendredi: ${vendrediEvents.length}`);
    vendrediEvents.forEach((event, index) => {
      console.log(`   √âv√©nement #${index + 1}: ${event.title} (${event.type})`);
    });
  }

  console.log(`‚ú® Total d'√©v√©nements convertis: ${allEvents.length}`);
  
  return allEvents;
}

// Fonction pour organiser les √©v√©nements par jour
export function organizeEventsByDay(events: Event[]): Record<string, Event[]> {
  const result: Record<string, Event[]> = {};
  
  events.forEach(event => {
    const day = event.day;
    if (!result[day]) {
      result[day] = [];
    }
    result[day].push(event);
  });
  
  return result;
}

// Ajout d'une fonction pour analyser la r√©partition des √©v√©nements par jour
export function logEventDistribution(events: Event[]): void {
  const eventsByDay = organizeEventsByDay(events);
  console.log('üìä R√©partition des √©v√©nements par jour:');
  Object.entries(eventsByDay).forEach(([day, dayEvents]) => {
    console.log(`   - ${day}: ${dayEvents.length} √©v√©nements`);
  });
}