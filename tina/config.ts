// tinacms.config.js

import { defineConfig } from "tinacms";
import { postsCollection } from "./postsCollection";
import { homepageCollection } from "./homepageCollection";

// Fonction de validation des variables d'environnement
const validateEnvVar = (varName: string, defaultValue?: string): string => {
  const value = process.env[varName];
  if (!value) {
    console.error(`‚ùå Variable d'environnement ${varName} manquante !`);
    if (defaultValue) {
      console.warn(`üîß Utilisation de la valeur par d√©faut : ${defaultValue}`);
      return defaultValue;
    }
    throw new Error(`Variable d'environnement ${varName} requise mais non d√©finie`);
  }
  return value;
};

// R√©cup√©ration s√©curis√©e des variables Tina
const TINA_CLIENT_ID = validateEnvVar('TINA_CLIENT_ID', 'e5043161-7d23-41bf-a7bc-626eef359ef0');
const TINA_TOKEN = validateEnvVar('TINA_TOKEN', 'abe9d5391460078be76f1935613f9055303eff11');
const TINA_SEARCH_TOKEN = validateEnvVar('TINA_SEARCH_TOKEN');

// Logs de d√©bogage pour l'environnement
console.log('üîç Variables Tina Cloud:');
console.log('TINA_CLIENT_ID:', process.env.TINA_CLIENT_ID ? 'Pr√©sent ‚úÖ' : 'Manquant ‚ùå');
console.log('TINA_TOKEN:', process.env.TINA_TOKEN ? 'Pr√©sent ‚úÖ' : 'Manquant ‚ùå');
console.log('TINA_SEARCH_TOKEN:', process.env.TINA_SEARCH_TOKEN ? 'Pr√©sent ‚úÖ' : 'Manquant ‚ùå');

// Log de tous les environnements pour d√©bogage complet
console.log('üåç Tous les environnements:');
Object.keys(process.env).forEach(key => {
  if (key.includes('TINA') || key.includes('CLIENT') || key.includes('TOKEN')) {
    console.log(`${key}: ${process.env[key]}`);
  }
});

export default defineConfig({
  // Tina Cloud Credentials
  branch: "main", 
  clientId: TINA_CLIENT_ID,
  token: TINA_TOKEN,
  
  // Configuration de l'URL Tina avec v√©rification explicite
  contentApiUrlOverride: (() => {
    const version = '1.8';
    const url = `https://content.tinajs.io/${version}/content/${TINA_CLIENT_ID}/github/main`;
    
    console.log('üöÄ URL de contenu Tina g√©n√©r√©e:', url);
    console.log('üîë Version utilis√©e:', version);
    console.log('üÜî ClientID utilis√©:', TINA_CLIENT_ID);
    
    return url;
  })(),
  
  // Optional: Disable import alias warnings
  disableImportAliasWarnings: true,

  // Preview Configuration
  preview: {
    hosts: ['localhost:4321'],
    previewTimeout: 3000,
  },

  // Build Output Configuration
  build: {
    outputFolder: "admin",
    publicFolder: "public",
  },

  // Media Management
  media: {
    // Option 1: Tina's Default Media Management
    tina: {
      publicFolder: "src/assets",
      mediaRoot: "images",
    },
    
    // Option 2: Cloudinary Integration (Recommended)
    // Uncomment and configure if you want to use Cloudinary
    /*
    cloudinary: {
      cloudName: process.env.CLOUDINARY_CLOUD_NAME,
      apiKey: process.env.CLOUDINARY_API_KEY,
      apiSecret: process.env.CLOUDINARY_API_SECRET,
      folder: "out-of-the-books", // Optional: specify a folder in your Cloudinary account
    },
    */
  },

  // Search Configuration
  search: {
    tina: {
      indexerToken: TINA_SEARCH_TOKEN || "", // Optional: Add search token if using Tina's search
      stopwordLanguages: ['fra'],
    },
  },

  // Schema Configuration
  schema: {
    collections: [
      {
        ...homepageCollection,
      },
      {
        ...postsCollection,
        label: "Gestion des contenus",
        name: "post",
        path: "src/content/post",
        format: "mdx",
        description: "G√©rez ici tous vos contenus (Actualit√©s, Fiches, Lives, Podcasts, √âmissions, Premium). Chaque type de contenu a ses propres champs sp√©cifiques qui s'afficheront selon la cat√©gorie s√©lectionn√©e.",
        ui: {
          filename: {
            readonly: true,
            slugify: (values) => {
              return `${values.category}-${values.title
                .toLowerCase()
                .replace(/ /g, '-')
                .replace(/[^a-zA-Z0-9-]/g, '')}`;
            },
          },
        },
        defaultItem: () => ({
          publishDate: new Date().toISOString(),
        }),
      },
    ],
  },

  // Configuration automatique des modifications
  gitProvider: {
    name: 'github',
    branch: 'main',
    authProvider: 'github',
    autoCommit: true,   // Commits automatiques
    autoMerge: true     // Merge automatique des changements
  },
  
  // Options de commit personnalis√©es
  commitMessages: {
    createNew: 'Cr√©ation de {{collection.label}} : {{document.title}}',
    update: 'Mise √† jour de {{collection.label}} : {{document.title}}',
    delete: 'Suppression de {{collection.label}} : {{document.title}}'
  }
});
