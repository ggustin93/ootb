// postsCollection.js
import { mediaFields, validateMediaByCategory, updateMediaTypeByCategory } from './mediaFields';

const CONTENT_TYPES = {
  actualite: "Actualit√©s",
  fiche: "Fiches",
  live: "Lives",
  podcast: "Podcasts",
  tv: "Emissions TV",
  premium: "Premium",
}

export const postsCollection = {
  name: "post",
  label: "üìö Gestion des contenus",
  path: "src/content/post",
  format: "mdx",
  mdx: {
    disableImportAliasWarnings: true,
    resolve: {
      '~/components/mdx': './src/components/mdx'
    }
  },
  ui: {
    itemTable: {
      defaultSort: {
        key: "_values.publishDate",
        direction: "desc"
      },
      tableColumns: [
        {
          key: "_values.published",
          name: "Statut",
          render: (value) => value ? "‚úÖ Publi√©" : "‚ö†Ô∏è Brouillon"
        },
        {
          key: "_values.publishDate",
          name: "Date de publication",
        },
        {
          key: "_values.category",
          name: "Cat√©gorie",
          render: (value) => CONTENT_TYPES[value] || value
        },
        {
          key: "_values.title",
          name: "Titre"
        }
      ]
    },
    sortable: {
      fields: [
        {
          key: "_values.publishDate",
          name: "Date de publication"
        },
        {
          key: "_values.title",
          name: "Titre"
        },
        {
          key: "_values.category",
          name: "Type de contenu"
        },
        {
          key: "_values.published",
          name: "Statut"
        }
      ]
    },
    allowedActions: {
      create: true,
      delete: true,
      update: true,
      save: true,
    },
    filename: {
      readonly: false,
      slugify: (values) => {
        return `${values?.title
          ?.toLowerCase()
          .replace(/ /g, '-')
          .replace(/[^a-zA-Z0-9-]/g, '')}`;
      },
      description: "Le nom du fichier sera g√©n√©r√© automatiquement √† partir du titre. Il sera converti en minuscules, les espaces seront remplac√©s par des tirets et les caract√®res sp√©ciaux seront supprim√©s.",
    },
    itemProps: (item) => {
      // Personnaliser l'affichage en fonction du type de m√©dia
      let label = `M√©dia: ${item?.type || 'Non d√©fini'}`;
      
      if (item?.type === 'podcast') {
        label = `üéôÔ∏è Podcast Ausha`;
      } else if (item?.type === 'youtube') {
        label = `üé¨ Vid√©o YouTube`;
      } else if (item?.type === 'tv') {
        label = `üì∫ √âmission TV`;
      }
      
      return { label };
    },
    validate: (data) => {
      // Validation des champs m√©dia en fonction de la cat√©gorie
      const mediaValidation = validateMediaByCategory(data);
      
      // Si la validation retourne une cha√Æne, c'est une erreur
      if (typeof mediaValidation === 'string') {
        return mediaValidation;
      }
      
      // V√©rifications suppl√©mentaires pour les podcasts
      if (data.category === 'podcast') {
        if (!data.media) {
          return "‚ö†Ô∏è OBLIGATOIRE: Pour un podcast, vous devez configurer le m√©dia";
        }
        
        // Les deux champs sont obligatoires pour les podcasts
        if (!data.media.iframeCode) {
          return "‚ö†Ô∏è OBLIGATOIRE: Pour un podcast, le code iframe est requis";
        }
        
        if (!data.media.smartlinkUrl) {
          return "‚ö†Ô∏è OBLIGATOIRE: Pour un podcast, l'URL Smartlink est requise";
        }
        
        // V√©rifier le format de l'URL Smartlink
        if (data.media.smartlinkUrl && !data.media.smartlinkUrl.match(/^https:\/\/smartlink\.ausha\.co\//)) {
          return "‚ö†Ô∏è L'URL Smartlink doit √™tre au format https://smartlink.ausha.co/nom-du-podcast/numero-nom-episode";
        }
      }
      
      // V√©rifications pour les lives
      if (data.category === 'live') {
        if (!data.media || !data.media.videoUrl) {
          return "‚ö†Ô∏è OBLIGATOIRE: Pour un live, l'URL YouTube est obligatoire";
        }
        
        // V√©rifier le format de l'URL YouTube
        if (data.media?.videoUrl && !data.media.videoUrl.match(/^https:\/\/(youtu\.be\/|www\.youtube\.com\/)/)) {
          return "‚ö†Ô∏è L'URL doit √™tre une URL YouTube valide";
        }
      }
      
      // V√©rifications pour les √©missions TV
      if (data.category === 'tv') {
        if (!data.media || !data.media.tvcomUrl) {
          return "‚ö†Ô∏è OBLIGATOIRE: Pour une √©mission TV, l'URL TV Com est obligatoire";
        }
        
        // V√©rifier le format de l'URL TV Com
        if (data.media?.tvcomUrl && !data.media.tvcomUrl.match(/^https:\/\/www\.tvcom\.be\/video\//)) {
          return "‚ö†Ô∏è L'URL TV Com doit √™tre au format https://www.tvcom.be/video/...";
        }
      }
      
      return true;
    }
  },
  fields: [
    // Placer la cat√©gorie en premier pour une meilleure exp√©rience utilisateur
    {
      type: "string",
      name: "category",
      label: "Cat√©gorie",
      description: "Type de contenu",
      required: true,
      options: Object.entries(CONTENT_TYPES).map(([value, label]) => ({
        value,
        label
      })),
      ui: {
        // Quand la cat√©gorie change, mettre √† jour automatiquement le type de m√©dia
        onChange: updateMediaTypeByCategory
      }
    },
    {
      type: "boolean",
      name: "published",
      label: "Publi√©",
      description: "Statut de publication du contenu (par d√©faut: publi√©)",
      required: false,
      ui: {
        parse: (value) => value === undefined ? true : value,
        format: (value) => value === undefined ? true : value,
        description: "‚úÖ ACTIV√â = Le contenu est visible sur le site\n‚ö†Ô∏è D√âSACTIV√â = Le contenu n'est pas visible"
      },
    },
    {
      type: "boolean",
      name: "draft",
      label: "Brouillon (D√©pr√©ci√©)",
      description: "Champ technique - Ne pas modifier directement",
      required: false,
      ui: {
        parse: (value, data) => !data.published, // Toujours l'inverse de published
        format: (value) => !value,
        component: "hidden", // Cach√© car g√©r√© automatiquement via published
      },
    },
    {
      type: "string",
      name: "title",
      label: "Titre",
      description: "Titre principal du contenu",
      required: true,
      isTitle: true,
    },
    {
      type: "string",
      name: "description",
      label: "Description",
      description: "R√©sum√© court du contenu (150-200 caract√®res)",
      required: true,
      ui: {
        component: "textarea"
      }
    },
    {
      type: "datetime",
      name: "publishDate",
      label: "Date de publication",
      required: true,
    },
    {
      type: "image",
      name: "image",
      label: "Image principale",
      description: "Image mise en avant (format 16:9 recommand√©)",
    },
    // Champs pour la compatibilit√© avec l'ancienne structure (masqu√©s)
    {
      type: "string",
      name: "videoUrl",
      label: "URL de la vid√©o (ancienne structure)",
      description: "URL compl√®te de la vid√©o YouTube (utiliser de pr√©f√©rence la nouvelle structure media)",
      ui: {
        component: "hidden"
      }
    },
    {
      type: "string",
      name: "tvcomUrl",
      label: "URL TV Com (ancienne structure)",
      description: "URL compl√®te de l'√©mission sur TV Com (utiliser de pr√©f√©rence la nouvelle structure media)",
      ui: {
        component: "hidden"
      }
    },
    {
      type: "string",
      name: "podcastUrl",
      label: "URL du podcast (ancienne structure - d√©pr√©ci√©)",
      description: "URL compl√®te du podcast (utiliser de pr√©f√©rence la nouvelle structure media)",
      ui: {
        component: "hidden"
      }
    },
    {
      type: "string",
      name: "showId",
      label: "ID du show (ancienne structure)",
      description: "Identifiant du show Ausha (utiliser de pr√©f√©rence la nouvelle structure media)",
      ui: {
        component: "hidden"
      }
    },
    {
      type: "string",
      name: "podcastId",
      label: "ID de l'√©pisode (ancienne structure)",
      description: "Identifiant de l'√©pisode Ausha (utiliser de pr√©f√©rence la nouvelle structure media)",
      ui: {
        component: "hidden"
      }
    },
    {
      type: "string",
      name: "expert",
      label: "Expert",
      description: "Nom de l'expert ou intervenant principal",
    },
    {
      type: "string",
      name: "duration",
      label: "Dur√©e",
      description: "Dur√©e du contenu (ex: 45min, 1h30)",
    },
    {
      type: "string",
      name: "tags",
      label: "Tags",
      description: "Mots-cl√©s associ√©s au contenu",
      list: true,
      ui: {
        component: "tags",
      }
    },
    // Utilisation de l'objet mediaFields import√©
    mediaFields,
    {
      type: "rich-text",
      name: "body",
      label: "Contenu",
      isBody: true,
    },
  ],
};